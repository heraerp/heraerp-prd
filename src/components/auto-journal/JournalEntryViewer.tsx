'use client'

import React from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import {
  FileText,
  CheckCircle,
  AlertTriangle,
  Eye,
  Edit,
  Calendar,
  DollarSign,
  Building,
  Bot,
  User
} from 'lucide-react'

interface JournalLine {
  gl_account_code: string
  account_name: string
  description: string
  debit_amount: number
  credit_amount: number
  line_order: number
}

interface JournalEntry {
  id: string
  journal_date: string
  description: string
  reference: string
  total_amount: number
  auto_generated: boolean
  ai_confidence: number
  validation_status: 'pending' | 'validated' | 'requires_review'
  lines: JournalLine[]
  created_at: string
  created_by?: string
}

interface JournalEntryViewerProps {
  entries: JournalEntry[]
  onViewEntry?: (entry: JournalEntry) => void
  onEditEntry?: (entry: JournalEntry) => void
}

export function JournalEntryViewer({ entries, onViewEntry, onEditEntry }: JournalEntryViewerProps) {
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(Math.abs(amount))
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    })
  }

  const getStatusBadge = (status: string, aiConfidence?: number, autoGenerated?: boolean) => {
    if (status === 'validated') {
      return (
        <Badge className="bg-green-100 text-green-700 border-green-200">
          <CheckCircle className="w-3 h-3 mr-1" />
          Validated
        </Badge>
      )
    } else if (status === 'requires_review') {
      return (
        <Badge className="bg-yellow-100 text-yellow-700 border-yellow-200">
          <AlertTriangle className="w-3 h-3 mr-1" />
          Review
        </Badge>
      )
    } else {
      return <Badge className="bg-muted text-gray-700 border-border">Pending</Badge>
    }
  }

  const getGenerationBadge = (autoGenerated: boolean, aiConfidence?: number) => {
    if (autoGenerated) {
      return (
        <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
          <Bot className="w-3 h-3 mr-1" />
          Auto-Generated {aiConfidence && `(${Math.round(aiConfidence * 100)}%)`}
        </Badge>
      )
    } else {
      return (
        <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">
          <User className="w-3 h-3 mr-1" />
          Manual
        </Badge>
      )
    }
  }

  if (entries.length === 0) {
    return (
      <Card className="bg-background/80 backdrop-blur-sm">
        <CardContent className="p-12 text-center">
          <FileText className="w-16 h-16 mx-auto text-gray-300 mb-4" />
          <h3 className="text-lg font-medium text-gray-100 mb-2">No Journal Entries</h3>
          <p className="text-muted-foreground">
            Journal entries will appear here as transactions are processed
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-4">
      {entries.map(entry => (
        <Card
          key={entry.id}
          className="bg-background/80 backdrop-blur-sm hover:shadow-md transition-shadow"
        >
          <CardHeader className="pb-3">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <CardTitle className="text-lg">{entry.description}</CardTitle>
                  {getStatusBadge(
                    entry.validation_status,
                    entry.ai_confidence,
                    entry.auto_generated
                  )}
                  {getGenerationBadge(entry.auto_generated, entry.ai_confidence)}
                </div>
                <CardDescription className="flex items-center gap-4">
                  <span className="flex items-center gap-1">
                    <Calendar className="w-4 h-4" />
                    {formatDate(entry.journal_date)}
                  </span>
                  <span className="flex items-center gap-1">
                    <FileText className="w-4 h-4" />
                    {entry.reference}
                  </span>
                  <span className="flex items-center gap-1">
                    <DollarSign className="w-4 h-4" />
                    {formatCurrency(entry.total_amount)}
                  </span>
                </CardDescription>
              </div>
              <div className="flex items-center gap-2">
                {onViewEntry && (
                  <Button variant="outline" size="sm" onClick={() => onViewEntry(entry)}>
                    <Eye className="w-4 h-4 mr-1" />
                    View
                  </Button>
                )}
                {onEditEntry && (
                  <Button variant="outline" size="sm" onClick={() => onEditEntry(entry)}>
                    <Pencil className="w-4 h-4 mr-1" />
                    Edit
                  </Button>
                )}
              </div>
            </div>
          </CardHeader>

          <CardContent className="pt-0">
            {/* Journal Lines */}
            <div className="border rounded-lg overflow-hidden">
              <table className="w-full text-sm">
                <thead className="bg-muted border-b">
                  <tr>
                    <th className="px-4 py-3 text-left font-medium text-muted-foreground">
                      Account
                    </th>
                    <th className="px-4 py-3 text-left font-medium text-muted-foreground">
                      Description
                    </th>
                    <th className="px-4 py-3 text-right font-medium text-muted-foreground">
                      Debit
                    </th>
                    <th className="px-4 py-3 text-right font-medium text-muted-foreground">
                      Credit
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {entry.lines
                    .sort((a, b) => a.line_order - b.line_order)
                    .map((line, index) => (
                      <tr key={index} className={index % 2 === 0 ? 'bg-background' : 'bg-gray-25'}>
                        <td className="px-4 py-3">
                          <div className="font-medium">{line.gl_account_code}</div>
                          <div className="text-xs text-muted-foreground">{line.account_name}</div>
                        </td>
                        <td className="px-4 py-3">{line.description}</td>
                        <td className="px-4 py-3 text-right font-mono">
                          {line.debit_amount > 0 ? formatCurrency(line.debit_amount) : '—'}
                        </td>
                        <td className="px-4 py-3 text-right font-mono">
                          {line.credit_amount > 0 ? formatCurrency(line.credit_amount) : '—'}
                        </td>
                      </tr>
                    ))}
                </tbody>
                <tfoot className="bg-muted border-t">
                  <tr className="font-medium">
                    <td className="px-4 py-3" colSpan={2}>
                      Total
                    </td>
                    <td className="px-4 py-3 text-right font-mono">
                      {formatCurrency(
                        entry.lines.reduce((sum, line) => sum + line.debit_amount, 0)
                      )}
                    </td>
                    <td className="px-4 py-3 text-right font-mono">
                      {formatCurrency(
                        entry.lines.reduce((sum, line) => sum + line.credit_amount, 0)
                      )}
                    </td>
                  </tr>
                </tfoot>
              </table>
            </div>

            {/* Entry Metadata */}
            <div className="mt-4 flex items-center justify-between text-xs text-muted-foreground">
              <div className="flex items-center gap-4">
                {entry.auto_generated && entry.ai_confidence && (
                  <span>AI Confidence: {Math.round(entry.ai_confidence * 100)}%</span>
                )}
                <span>Created: {formatDate(entry.created_at)}</span>
                {entry.created_by && <span>By: {entry.created_by}</span>}
              </div>
              <div className="flex items-center gap-1">
                <Building className="w-3 h-3" />
                <span>Journal Entry #{entry.id.substring(0, 8)}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}
