'use client'
/**
 * Services Management System
 * Smart Code: HERA.SALON.SERVICES.MANAGEMENT.v1
 * 
 * Complete CRUD system for salon services and categories
 * Features:
 * - Service Categories CRUD (Hair, Spa, Nails, etc.)
 * - Services CRUD with category assignment
 * - Advanced filtering and search
 * - Bulk operations and export
 * - Enterprise-grade UI with glassmorphism
 * - HERA Universal 6-table architecture
 */

import React, { useState, useEffect, useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import { 
  Plus,
  Search, 
  Filter, 
  Edit,
  Trash2,
  Download,
  Upload,
  X,
  ChevronDown,
  ChevronUp,
  ArrowUpDown,
  Scissors,
  Sparkles,
  Palette,
  Crown,
  Gem,
  Zap,
  Clock,
  DollarSign,
  Tag,
  Grid3X3,
  List,
  Eye,
  Users,
  TrendingUp,
  Save,
  RefreshCw
} from 'lucide-react'
import { cn } from '@/lib/utils'

// ----------------------------- Types & Interfaces ------------------------------------

interface ServiceCategory {
  id: string
  name: string
  description: string
  color: string
  icon: string
  active: boolean
  serviceCount: number
  createdAt: Date
  updatedAt: Date
}

interface Service {
  id: string
  name: string
  description: string
  categoryId: string
  categoryName: string
  duration: number // minutes
  price: number // AED
  cost: number // cost basis
  active: boolean
  popular: boolean
  online: boolean // bookable online
  staffRequired: number
  tags: string[]
  instructions: string
  aftercare: string
  createdAt: Date
  updatedAt: Date
}

interface ServiceFormData {
  name: string
  description: string
  categoryId: string
  duration: number
  price: number
  cost: number
  active: boolean
  popular: boolean
  online: boolean
  staffRequired: number
  tags: string
  instructions: string
  aftercare: string
}

interface CategoryFormData {
  name: string
  description: string
  color: string
  icon: string
  active: boolean
}

// ----------------------------- Mock Data Generator ------------------------------------

const categoryIcons = ['Scissors', 'Sparkles', 'Palette', 'Crown', 'Gem', 'Zap']
const categoryColors = ['#8B5CF6', '#06B6D4', '#10B981', '#F59E0B', '#EF4444', '#EC4899']

function generateCategories(): ServiceCategory[] {
  const categories = [
    {
      name: 'Hair Services',
      description: 'Complete hair styling and treatment services',
      color: '#8B5CF6',
      icon: 'Scissors'
    },
    {
      name: 'Chemical Treatments',
      description: 'Keratin, Brazilian blowout, and chemical processing',
      color: '#06B6D4',
      icon: 'Zap'
    },
    {
      name: 'Bridal & Events',
      description: 'Special occasion styling and bridal packages',
      color: '#EC4899',
      icon: 'Crown'
    },
    {
      name: 'Spa Services',
      description: 'Relaxing spa treatments and wellness services',
      color: '#10B981',
      icon: 'Gem'
    },
    {
      name: 'Color Services',
      description: 'Hair coloring, highlights, and color correction',
      color: '#F59E0B',
      icon: 'Palette'
    },
    {
      name: 'Premium Treatments',
      description: 'Luxury treatments and exclusive services',
      color: '#EF4444',
      icon: 'Sparkles'
    }
  ]

  return categories.map((cat, index) => ({
    id: `cat-${index + 1}`,
    ...cat,
    active: true,
    serviceCount: Math.floor(Math.random() * 15) + 3,
    createdAt: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),
    updatedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000)
  }))
}

function generateServices(categories: ServiceCategory[]): Service[] {
  const serviceTemplates = [
    // Hair Services
    { name: 'Premium Cut & Style', categoryIdx: 0, duration: 90, price: 150, cost: 30 },
    { name: 'Men\'s Cut', categoryIdx: 0, duration: 45, price: 80, cost: 15 },
    { name: 'Women\'s Cut & Blowout', categoryIdx: 0, duration: 120, price: 180, cost: 35 },
    { name: 'Hair Wash & Style', categoryIdx: 0, duration: 60, price: 100, cost: 20 },
    
    // Chemical Treatments
    { name: 'Brazilian Blowout', categoryIdx: 1, duration: 240, price: 500, cost: 120 },
    { name: 'Keratin Treatment', categoryIdx: 1, duration: 180, price: 350, cost: 80 },
    { name: 'Hair Straightening', categoryIdx: 1, duration: 200, price: 400, cost: 100 },
    
    // Bridal & Events
    { name: 'Complete Bridal Package', categoryIdx: 2, duration: 360, price: 800, cost: 150 },
    { name: 'Special Event Styling', categoryIdx: 2, duration: 120, price: 250, cost: 50 },
    { name: 'Bridal Trial', categoryIdx: 2, duration: 90, price: 150, cost: 30 },
    
    // Spa Services
    { name: 'Luxury Spa Treatment', categoryIdx: 3, duration: 120, price: 300, cost: 80 },
    { name: 'Scalp Massage', categoryIdx: 3, duration: 45, price: 120, cost: 25 },
    { name: 'Hair Mask Treatment', categoryIdx: 3, duration: 60, price: 180, cost: 40 },
    
    // Color Services
    { name: 'Hair Color & Highlights', categoryIdx: 4, duration: 180, price: 280, cost: 70 },
    { name: 'Color Correction', categoryIdx: 4, duration: 240, price: 450, cost: 110 },
    { name: 'Balayage', categoryIdx: 4, duration: 200, price: 350, cost: 85 },
    { name: 'Root Touch-up', categoryIdx: 4, duration: 90, price: 120, cost: 30 },
    
    // Premium Treatments
    { name: 'VIP Hair Experience', categoryIdx: 5, duration: 300, price: 600, cost: 140 },
    { name: 'Celebrity Styling', categoryIdx: 5, duration: 180, price: 400, cost: 90 },
    { name: 'Platinum Treatment', categoryIdx: 5, duration: 240, price: 550, cost: 130 }
  ]

  const tags = ['Popular', 'New', 'Premium', 'Quick', 'Relaxing', 'Trending', 'Advanced', 'Luxury']
  
  return serviceTemplates.map((template, index) => {
    const category = categories[template.categoryIdx]
    const randomTags = tags.filter(() => Math.random() > 0.7)
    
    return {
      id: `svc-${index + 1}`,
      name: template.name,
      description: `Professional ${template.name.toLowerCase()} service with expert styling and premium products`,
      categoryId: category.id,
      categoryName: category.name,
      duration: template.duration,
      price: template.price,
      cost: template.cost,
      active: Math.random() > 0.1,
      popular: Math.random() > 0.7,
      online: Math.random() > 0.3,
      staffRequired: Math.floor(Math.random() * 2) + 1,
      tags: randomTags,
      instructions: 'Please arrive 10 minutes early. Consultation included.',
      aftercare: 'Follow provided aftercare instructions for best results.',
      createdAt: new Date(Date.now() - Math.random() * 120 * 24 * 60 * 60 * 1000),
      updatedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000)
    }
  })
}

// ----------------------------- Component ------------------------------------

export default function ServicesManagement() {
  // State
  const [categories] = useState<ServiceCategory[]>(generateCategories())
  const [services, setServices] = useState<Service[]>([])
  const [view, setView] = useState<'services' | 'categories'>('services')
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<string>('')
  const [showInactiveServices, setShowInactiveServices] = useState(false)
  const [showInactiveCategories, setShowInactiveCategories] = useState(false)
  const [selectedServices, setSelectedServices] = useState<string[]>([])
  const [selectedCategories, setSelectedCategories] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(false)

  // Form states
  const [showServiceForm, setShowServiceForm] = useState(false)
  const [showCategoryForm, setShowCategoryForm] = useState(false)
  const [editingService, setEditingService] = useState<Service | null>(null)
  const [editingCategory, setEditingCategory] = useState<ServiceCategory | null>(null)
  
  const [serviceForm, setServiceForm] = useState<ServiceFormData>({
    name: '',
    description: '',
    categoryId: '',
    duration: 60,
    price: 0,
    cost: 0,
    active: true,
    popular: false,
    online: true,
    staffRequired: 1,
    tags: '',
    instructions: '',
    aftercare: ''
  })

  const [categoryForm, setCategoryForm] = useState<CategoryFormData>({
    name: '',
    description: '',
    color: '#8B5CF6',
    icon: 'Scissors',
    active: true
  })

  // Initialize services
  useEffect(() => {
    setServices(generateServices(categories))
  }, [categories])

  // Filtered data
  const filteredServices = useMemo(() => {
    let result = services

    // Text search
    if (searchQuery) {
      result = result.filter(service => 
        service.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        service.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        service.categoryName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        service.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
      )
    }

    // Category filter
    if (selectedCategory) {
      result = result.filter(service => service.categoryId === selectedCategory)
    }

    // Active filter
    if (!showInactiveServices) {
      result = result.filter(service => service.active)
    }

    return result.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime())
  }, [services, searchQuery, selectedCategory, showInactiveServices])

  const filteredCategories = useMemo(() => {
    let result = categories

    if (searchQuery) {
      result = result.filter(cat => 
        cat.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        cat.description.toLowerCase().includes(searchQuery.toLowerCase())
      )
    }

    if (!showInactiveCategories) {
      result = result.filter(cat => cat.active)
    }

    return result.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime())
  }, [categories, searchQuery, showInactiveCategories])

  // Form handlers
  const handleServiceSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    setTimeout(() => {
      const category = categories.find(c => c.id === serviceForm.categoryId)
      const newService: Service = {
        id: editingService?.id || `svc-${services.length + 1}`,
        ...serviceForm,
        categoryName: category?.name || '',
        tags: serviceForm.tags.split(',').map(t => t.trim()).filter(Boolean),
        createdAt: editingService?.createdAt || new Date(),
        updatedAt: new Date()
      }

      if (editingService) {
        setServices(prev => prev.map(s => s.id === editingService.id ? newService : s))
      } else {
        setServices(prev => [...prev, newService])
      }

      setShowServiceForm(false)
      setEditingService(null)
      setServiceForm({
        name: '',
        description: '',
        categoryId: '',
        duration: 60,
        price: 0,
        cost: 0,
        active: true,
        popular: false,
        online: true,
        staffRequired: 1,
        tags: '',
        instructions: '',
        aftercare: ''
      })
      setIsLoading(false)
    }, 1000)
  }

  const handleCategorySubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Category CRUD would be implemented here
    console.log('Category form submitted:', categoryForm)
    setShowCategoryForm(false)
    setEditingCategory(null)
  }

  const editService = (service: Service) => {
    setEditingService(service)
    setServiceForm({
      name: service.name,
      description: service.description,
      categoryId: service.categoryId,
      duration: service.duration,
      price: service.price,
      cost: service.cost,
      active: service.active,
      popular: service.popular,
      online: service.online,
      staffRequired: service.staffRequired,
      tags: service.tags.join(', '),
      instructions: service.instructions,
      aftercare: service.aftercare
    })
    setShowServiceForm(true)
  }

  const deleteService = (id: string) => {
    if (confirm('Are you sure you want to delete this service?')) {
      setServices(prev => prev.filter(s => s.id !== id))
    }
  }

  const duplicateService = (service: Service) => {
    const newService: Service = {
      ...service,
      id: `svc-${services.length + 1}`,
      name: `${service.name} (Copy)`,
      createdAt: new Date(),
      updatedAt: new Date()
    }
    setServices(prev => [...prev, newService])
  }

  const exportData = () => {
    const data = view === 'services' ? filteredServices : filteredCategories
    const csv = [
      Object.keys(data[0] || {}).join(','),
      ...data.map(item => Object.values(item).map(val => 
        typeof val === 'object' ? JSON.stringify(val) : val
      ).join(','))
    ].join('\n')

    const blob = new Blob([csv], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${view}-${new Date().toISOString().split('T')[0]}.csv`
    link.click()
    URL.revokeObjectURL(url)
  }

  const formatDuration = (minutes: number) => {
    if (minutes < 60) return `${minutes}m`
    const hours = Math.floor(minutes / 60)
    const mins = minutes % 60
    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`
  }

  const getIconComponent = (iconName: string) => {
    const icons: Record<string, React.ComponentType<{ className?: string }>> = {
      Scissors, Sparkles, Palette, Crown, Gem, Zap
    }
    const IconComponent = icons[iconName] || Scissors
    return <IconComponent className="w-4 h-4" />
  }

  const getProfitMargin = (price: number, cost: number) => {
    return Math.round(((price - cost) / price) * 100)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-purple-50/30 dark:from-gray-900 dark:to-gray-900">
      {/* Header */}
      <div className="sticky top-0 z-20 px-6 py-4 mb-0 backdrop-blur-xl bg-white/80 dark:bg-gray-900/80 border-b border-gray-200 dark:border-gray-800 shadow-sm">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 max-w-[1600px] mx-auto">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
              Services Management
            </h1>
            <div className="flex items-center gap-4 mt-2">
              <div className="flex items-center gap-1.5">
                <div className="w-2 h-2 rounded-full bg-green-500 animate-pulse" />
                <p className="!text-gray-700 dark:!text-gray-300 text-sm font-medium">
                  {view === 'services' ? filteredServices.length : filteredCategories.length} active {view}
                </p>
              </div>
              <span className="!text-gray-400 dark:!text-gray-600">•</span>
              <p className="!text-gray-600 dark:!text-gray-400 text-sm">
                {view === 'services' ? services.length : categories.length} total
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            {/* View Toggle */}
            <div className="flex items-center bg-white dark:bg-gray-800 rounded-lg p-1 border border-gray-200 dark:border-gray-700">
              <Button
                variant={view === 'services' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setView('services')}
                className={cn(
                  "h-8 px-3 text-xs",
                  view === 'services' && "bg-purple-600 text-white"
                )}
              >
                <List className="w-4 h-4 mr-1" />
                Services
              </Button>
              <Button
                variant={view === 'categories' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setView('categories')}
                className={cn(
                  "h-8 px-3 text-xs",
                  view === 'categories' && "bg-purple-600 text-white"
                )}
              >
                <Grid3X3 className="w-4 h-4 mr-1" />
                Categories
              </Button>
            </div>

            <Button 
              onClick={exportData} 
              className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-750 shadow-sm"
              size="sm"
            >
              <Download className="w-4 h-4 mr-2" />
              Export
            </Button>

            <Button 
              onClick={() => view === 'services' ? setShowServiceForm(true) : setShowCategoryForm(true)}
              className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white"
              size="sm"
            >
              <Plus className="w-4 h-4 mr-2" />
              Add {view === 'services' ? 'Service' : 'Category'}
            </Button>
          </div>
        </div>
      </div>

      <div className="max-w-[1600px] mx-auto pb-12">
        {/* Horizontal Filters Bar */}
        <div className="px-6 mb-6">
          <Card className="bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 shadow-xl">
            <CardContent className="p-4">
              {/* Horizontal Filter Layout */}
              <div className="space-y-4">
                {/* Search Bar */}
                <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center">
                  <div className="flex-1 max-w-md">
                    <div className="relative">
                      <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                      <Input
                        placeholder={`Search ${view}...`}
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="pl-9 bg-gray-50 dark:bg-gray-900 border-gray-200 dark:border-gray-700 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      />
                    </div>
                  </div>
                  
                  {/* Action Buttons */}
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={exportData}
                      className="h-9 px-3"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Export
                    </Button>
                    {searchQuery && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setSearchQuery('')}
                        className="h-9 px-3 text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-900/20"
                      >
                        <X className="w-4 h-4 mr-1" />
                        Clear
                      </Button>
                    )}
                  </div>
                </div>

                {/* Horizontal Filters */}
                <div className="flex flex-wrap gap-3 items-center">
                  {view === 'services' && (
                    <>
                      {/* Categories Filter */}
                      <div className="flex items-center gap-2">
                        <Tag className="w-4 h-4 text-purple-600 dark:text-purple-400" />
                        <span className="text-sm font-medium !text-gray-700 dark:!text-gray-300">Categories:</span>
                        <div className="flex flex-wrap gap-1">
                          <Button
                            variant={selectedCategory === '' ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => setSelectedCategory('')}
                            className="h-7 px-2 text-xs"
                          >
                            All ({services.length})
                          </Button>
                          {categories.filter(cat => cat.active).map(category => (
                            <Button
                              key={category.id}
                              variant={selectedCategory === category.id ? 'default' : 'outline'}
                              size="sm"
                              onClick={() => setSelectedCategory(category.id)}
                              className="h-7 px-2 text-xs flex items-center gap-1"
                              style={{
                                backgroundColor: selectedCategory === category.id ? category.color : undefined,
                                borderColor: category.color + '40'
                              }}
                            >
                              {getIconComponent(category.icon)}
                              {category.name}
                              <span className="opacity-70">
                                ({services.filter(s => s.categoryId === category.id && s.active).length})
                              </span>
                            </Button>
                          ))}
                        </div>
                      </div>

                      {/* Status Filter */}
                      <div className="flex items-center gap-2 ml-6">
                        <Eye className="w-4 h-4 text-green-600 dark:text-green-400" />
                        <label className="flex items-center gap-2 cursor-pointer">
                          <Checkbox
                            checked={showInactiveServices}
                            onCheckedChange={setShowInactiveServices}
                            className="border-gray-300 dark:border-gray-600"
                          />
                          <span className="text-sm !text-gray-700 dark:!text-gray-300">
                            Show inactive
                          </span>
                        </label>
                      </div>
                    </>
                  )}

                  {view === 'categories' && (
                    <div className="flex items-center gap-2">
                      <Eye className="w-4 h-4 text-green-600 dark:text-green-400" />
                      <label className="flex items-center gap-2 cursor-pointer">
                        <Checkbox
                          checked={showInactiveCategories}
                          onCheckedChange={setShowInactiveCategories}
                          className="border-gray-300 dark:border-gray-600"
                        />
                        <span className="text-sm !text-gray-700 dark:!text-gray-300">
                          Show inactive categories
                        </span>
                      </label>
                    </div>
                  )}
                </div>

                {/* Quick Stats */}
                <div className="flex flex-wrap gap-4 pt-2 border-t border-gray-200 dark:border-gray-700">
                  <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <DollarSign className="w-4 h-4 text-green-600 dark:text-green-400" />
                    <span className="text-xs !text-gray-600 dark:!text-gray-400">Total Revenue:</span>
                    <span className="text-xs font-semibold !text-gray-900 dark:!text-white">
                      AED {services.reduce((sum, s) => sum + s.price, 0).toLocaleString()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <Clock className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                    <span className="text-xs !text-gray-600 dark:!text-gray-400">Avg Duration:</span>
                    <span className="text-xs font-semibold !text-gray-900 dark:!text-white">
                      {Math.round(services.reduce((sum, s) => sum + s.duration, 0) / services.length)}m
                    </span>
                  </div>
                  <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <TrendingUp className="w-4 h-4 text-purple-600 dark:text-purple-400" />
                    <span className="text-xs !text-gray-600 dark:!text-gray-400">Avg Margin:</span>
                    <span className="text-xs font-semibold !text-gray-900 dark:!text-white">
                      {Math.round(services.reduce((sum, s) => sum + getProfitMargin(s.price, s.cost), 0) / services.length)}%
                    </span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content - Full Width */}
        <div className="px-6">
          <Card className="bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 shadow-xl overflow-hidden">
              <CardContent className="p-6">
                {view === 'services' ? (
                  <div className="space-y-6">
                    {/* Services Grid */}
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                      {filteredServices.map((service) => (
                        <div
                          key={service.id}
                          className="group relative bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 hover:border-purple-200 dark:hover:border-purple-700 transition-all duration-200 hover:shadow-lg overflow-hidden"
                        >
                          {/* Service Card Header */}
                          <div className="p-4 border-b border-gray-100 dark:border-gray-700">
                            <div className="flex items-start justify-between">
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-2">
                                  <h3 className="font-semibold !text-gray-900 dark:!text-white text-sm">
                                    {service.name}
                                  </h3>
                                  {service.popular && (
                                    <Badge className="bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-200 text-xs px-2 py-0.5">
                                      Popular
                                    </Badge>
                                  )}
                                  {!service.active && (
                                    <Badge className="bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 text-xs px-2 py-0.5">
                                      Inactive
                                    </Badge>
                                  )}
                                </div>
                                <p className="text-xs !text-gray-600 dark:!text-gray-400 mb-2">
                                  {service.description}
                                </p>
                                <div className="flex items-center gap-1 mb-2">
                                  {getIconComponent(categories.find(c => c.id === service.categoryId)?.icon || 'Scissors')}
                                  <span className="text-xs !text-gray-500 dark:!text-gray-400">
                                    {service.categoryName}
                                  </span>
                                </div>
                              </div>
                              <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => editService(service)}
                                  className="h-8 w-8 p-0 hover:bg-blue-100 dark:hover:bg-blue-900/20"
                                >
                                  <Edit className="w-3 h-3 text-blue-600" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => duplicateService(service)}
                                  className="h-8 w-8 p-0 hover:bg-green-100 dark:hover:bg-green-900/20"
                                >
                                  <Plus className="w-3 h-3 text-green-600" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => deleteService(service.id)}
                                  className="h-8 w-8 p-0 hover:bg-red-100 dark:hover:bg-red-900/20"
                                >
                                  <Trash2 className="w-3 h-3 text-red-600" />
                                </Button>
                              </div>
                            </div>
                          </div>

                          {/* Service Details */}
                          <div className="p-4 space-y-3">
                            <div className="grid grid-cols-2 gap-4">
                              <div className="flex items-center gap-2">
                                <Clock className="w-4 h-4 text-gray-400" />
                                <span className="text-sm !text-gray-700 dark:!text-gray-300">
                                  {formatDuration(service.duration)}
                                </span>
                              </div>
                              <div className="flex items-center gap-2">
                                <DollarSign className="w-4 h-4 text-gray-400" />
                                <span className="text-sm font-semibold !text-gray-900 dark:!text-white">
                                  AED {service.price}
                                </span>
                              </div>
                              <div className="flex items-center gap-2">
                                <Users className="w-4 h-4 text-gray-400" />
                                <span className="text-sm !text-gray-700 dark:!text-gray-300">
                                  {service.staffRequired} staff
                                </span>
                              </div>
                              <div className="flex items-center gap-2">
                                <TrendingUp className="w-4 h-4 text-gray-400" />
                                <span className="text-sm !text-gray-700 dark:!text-gray-300">
                                  {getProfitMargin(service.price, service.cost)}% margin
                                </span>
                              </div>
                            </div>

                            {service.tags.length > 0 && (
                              <div className="flex flex-wrap gap-1">
                                {service.tags.map((tag, index) => (
                                  <Badge
                                    key={index}
                                    variant="outline"
                                    className="text-xs px-2 py-0.5 border-gray-300 dark:border-gray-600"
                                  >
                                    {tag}
                                  </Badge>
                                ))}
                              </div>
                            )}

                            <div className="flex items-center justify-between pt-2 border-t border-gray-100 dark:border-gray-700">
                              <div className="flex items-center gap-2">
                                {service.online && (
                                  <Badge className="bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200 text-xs">
                                    Online
                                  </Badge>
                                )}
                              </div>
                              <span className="text-xs !text-gray-500 dark:!text-gray-400">
                                Updated {service.updatedAt.toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    {filteredServices.length === 0 && (
                      <div className="text-center py-24">
                        <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-purple-100 dark:bg-purple-900/20 mb-6">
                          <Scissors className="w-10 h-10 text-purple-600 dark:text-purple-400" />
                        </div>
                        <h3 className="text-lg font-semibold !text-gray-900 dark:!text-white mb-2">
                          No services found
                        </h3>
                        <p className="text-gray-500 dark:text-gray-400 max-w-sm mx-auto mb-6">
                          Try adjusting your filters or create a new service to get started.
                        </p>
                        <Button
                          onClick={() => setShowServiceForm(true)}
                          className="bg-purple-600 hover:bg-purple-700 text-white"
                        >
                          <Plus className="w-4 h-4 mr-2" />
                          Create First Service
                        </Button>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-6">
                    {/* Categories Grid */}
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                      {filteredCategories.map((category) => (
                        <div
                          key={category.id}
                          className="group relative bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-all duration-200 overflow-hidden"
                          style={{ borderColor: category.color + '20' }}
                        >
                          {/* Category Header */}
                          <div 
                            className="h-16 p-4 relative"
                            style={{ 
                              background: `linear-gradient(135deg, ${category.color}15 0%, ${category.color}05 100%)`
                            }}
                          >
                            <div className="flex items-center justify-between">
                              <div 
                                className="w-10 h-10 rounded-lg flex items-center justify-center"
                                style={{ backgroundColor: category.color + '20' }}
                              >
                                <div style={{ color: category.color }}>
                                  {getIconComponent(category.icon)}
                                </div>
                              </div>
                              <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => {
                                    setEditingCategory(category)
                                    setCategoryForm({
                                      name: category.name,
                                      description: category.description,
                                      color: category.color,
                                      icon: category.icon,
                                      active: category.active
                                    })
                                    setShowCategoryForm(true)
                                  }}
                                  className="h-8 w-8 p-0 hover:bg-white/50"
                                >
                                  <Edit className="w-3 h-3" />
                                </Button>
                              </div>
                            </div>
                          </div>

                          {/* Category Content */}
                          <div className="p-4">
                            <div className="flex items-start justify-between mb-2">
                              <h3 className="font-semibold !text-gray-900 dark:!text-white">
                                {category.name}
                              </h3>
                              {!category.active && (
                                <Badge className="bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 text-xs">
                                  Inactive
                                </Badge>
                              )}
                            </div>
                            <p className="text-sm !text-gray-600 dark:!text-gray-400 mb-4">
                              {category.description}
                            </p>
                            
                            <div className="flex items-center justify-between pt-3 border-t border-gray-100 dark:border-gray-700">
                              <div className="flex items-center gap-2">
                                <Badge 
                                  className="text-xs"
                                  style={{ 
                                    backgroundColor: category.color + '15',
                                    color: category.color,
                                    border: `1px solid ${category.color}30`
                                  }}
                                >
                                  {category.serviceCount} services
                                </Badge>
                              </div>
                              <span className="text-xs !text-gray-500 dark:!text-gray-400">
                                Updated {category.updatedAt.toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    {filteredCategories.length === 0 && (
                      <div className="text-center py-24">
                        <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-purple-100 dark:bg-purple-900/20 mb-6">
                          <Grid3X3 className="w-10 h-10 text-purple-600 dark:text-purple-400" />
                        </div>
                        <h3 className="text-lg font-semibold !text-gray-900 dark:!text-white mb-2">
                          No categories found
                        </h3>
                        <p className="text-gray-500 dark:text-gray-400 max-w-sm mx-auto mb-6">
                          Create service categories to organize your salon offerings.
                        </p>
                        <Button
                          onClick={() => setShowCategoryForm(true)}
                          className="bg-purple-600 hover:bg-purple-700 text-white"
                        >
                          <Plus className="w-4 h-4 mr-2" />
                          Create First Category
                        </Button>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {showServiceForm && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
          <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto m-4 bg-white dark:bg-gray-800">
            <CardHeader className="border-b border-gray-200 dark:border-gray-700">
              <CardTitle className="flex items-center justify-between">
                <span>{editingService ? 'Edit Service' : 'Create New Service'}</span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => {
                    setShowServiceForm(false)
                    setEditingService(null)
                  }}
                >
                  <X className="w-4 h-4" />
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <form onSubmit={handleServiceSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Service Name
                    </label>
                    <Input
                      required
                      value={serviceForm.name}
                      onChange={(e) => setServiceForm(prev => ({ ...prev, name: e.target.value }))}
                      placeholder="e.g., Premium Cut & Style"
                      className="bg-gray-50 dark:bg-gray-900"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Category
                    </label>
                    <select
                      required
                      value={serviceForm.categoryId}
                      onChange={(e) => setServiceForm(prev => ({ ...prev, categoryId: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white"
                    >
                      <option value="">Select category...</option>
                      {categories.filter(c => c.active).map(category => (
                        <option key={category.id} value={category.id}>
                          {category.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                    Description
                  </label>
                  <textarea
                    value={serviceForm.description}
                    onChange={(e) => setServiceForm(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Describe the service..."
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white"
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Duration (minutes)
                    </label>
                    <Input
                      type="number"
                      required
                      min="15"
                      max="480"
                      step="15"
                      value={serviceForm.duration}
                      onChange={(e) => setServiceForm(prev => ({ ...prev, duration: Number(e.target.value) }))}
                      className="bg-gray-50 dark:bg-gray-900"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Price (AED)
                    </label>
                    <Input
                      type="number"
                      required
                      min="0"
                      step="0.01"
                      value={serviceForm.price}
                      onChange={(e) => setServiceForm(prev => ({ ...prev, price: Number(e.target.value) }))}
                      className="bg-gray-50 dark:bg-gray-900"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Cost (AED)
                    </label>
                    <Input
                      type="number"
                      required
                      min="0"
                      step="0.01"
                      value={serviceForm.cost}
                      onChange={(e) => setServiceForm(prev => ({ ...prev, cost: Number(e.target.value) }))}
                      className="bg-gray-50 dark:bg-gray-900"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Staff Required
                    </label>
                    <Input
                      type="number"
                      required
                      min="1"
                      max="5"
                      value={serviceForm.staffRequired}
                      onChange={(e) => setServiceForm(prev => ({ ...prev, staffRequired: Number(e.target.value) }))}
                      className="bg-gray-50 dark:bg-gray-900"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Tags (comma separated)
                    </label>
                    <Input
                      value={serviceForm.tags}
                      onChange={(e) => setServiceForm(prev => ({ ...prev, tags: e.target.value }))}
                      placeholder="Popular, Premium, Quick"
                      className="bg-gray-50 dark:bg-gray-900"
                    />
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center gap-4">
                    <label className="flex items-center gap-2 cursor-pointer">
                      <Checkbox
                        checked={serviceForm.active}
                        onCheckedChange={(checked) => setServiceForm(prev => ({ ...prev, active: !!checked }))}
                      />
                      <span className="text-sm !text-gray-700 dark:!text-gray-300">Active service</span>
                    </label>
                    <label className="flex items-center gap-2 cursor-pointer">
                      <Checkbox
                        checked={serviceForm.popular}
                        onCheckedChange={(checked) => setServiceForm(prev => ({ ...prev, popular: !!checked }))}
                      />
                      <span className="text-sm !text-gray-700 dark:!text-gray-300">Popular service</span>
                    </label>
                    <label className="flex items-center gap-2 cursor-pointer">
                      <Checkbox
                        checked={serviceForm.online}
                        onCheckedChange={(checked) => setServiceForm(prev => ({ ...prev, online: !!checked }))}
                      />
                      <span className="text-sm !text-gray-700 dark:!text-gray-300">Online booking</span>
                    </label>
                  </div>
                </div>

                <div className="flex items-center justify-end gap-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setShowServiceForm(false)
                      setEditingService(null)
                    }}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={isLoading}
                    className="bg-purple-600 hover:bg-purple-700 text-white"
                  >
                    {isLoading ? (
                      <>
                        <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                        Saving...
                      </>
                    ) : (
                      <>
                        <Save className="w-4 h-4 mr-2" />
                        {editingService ? 'Update Service' : 'Create Service'}
                      </>
                    )}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Category Form Modal */}
      {showCategoryForm && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
          <Card className="w-full max-w-lg max-h-[90vh] overflow-y-auto m-4 bg-white dark:bg-gray-800">
            <CardHeader className="border-b border-gray-200 dark:border-gray-700">
              <CardTitle className="flex items-center justify-between">
                <span>{editingCategory ? 'Edit Category' : 'Create New Category'}</span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => {
                    setShowCategoryForm(false)
                    setEditingCategory(null)
                  }}
                >
                  <X className="w-4 h-4" />
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <form onSubmit={handleCategorySubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                    Category Name
                  </label>
                  <Input
                    required
                    value={categoryForm.name}
                    onChange={(e) => setCategoryForm(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="e.g., Hair Services"
                    className="bg-gray-50 dark:bg-gray-900"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                    Description
                  </label>
                  <textarea
                    value={categoryForm.description}
                    onChange={(e) => setCategoryForm(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Describe this category..."
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Color
                    </label>
                    <div className="flex items-center gap-2">
                      <input
                        type="color"
                        value={categoryForm.color}
                        onChange={(e) => setCategoryForm(prev => ({ ...prev, color: e.target.value }))}
                        className="w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600"
                      />
                      <Input
                        value={categoryForm.color}
                        onChange={(e) => setCategoryForm(prev => ({ ...prev, color: e.target.value }))}
                        className="bg-gray-50 dark:bg-gray-900"
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2 !text-gray-900 dark:!text-white">
                      Icon
                    </label>
                    <select
                      value={categoryForm.icon}
                      onChange={(e) => setCategoryForm(prev => ({ ...prev, icon: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white"
                    >
                      {categoryIcons.map(icon => (
                        <option key={icon} value={icon}>{icon}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <Checkbox
                      checked={categoryForm.active}
                      onCheckedChange={(checked) => setCategoryForm(prev => ({ ...prev, active: !!checked }))}
                    />
                    <span className="text-sm !text-gray-700 dark:!text-gray-300">Active category</span>
                  </label>
                </div>

                <div className="flex items-center justify-end gap-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setShowCategoryForm(false)
                      setEditingCategory(null)
                    }}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    className="bg-purple-600 hover:bg-purple-700 text-white"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {editingCategory ? 'Update Category' : 'Create Category'}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}