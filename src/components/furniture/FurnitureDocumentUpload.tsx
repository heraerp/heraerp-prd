'use client'

import React, { useState, useRef } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Upload, FileText, Image, File, X, Check, AlertCircle, Download, Eye, Trash2, Plus, Receipt, Sparkles, Loader2, FileUp, Camera
} from 'lucide-react'
import { cn } from '@/lib/utils'


interface DocumentFile { id: string name: string size: number type: string url: string uploaded_at: string transaction_id?: string analysis?: { vendor_name?: string amount?: number date?: string items?: string[] confidence?: number }
}

interface FurnitureDocumentUploadProps { organizationId: string onDocumentAnalyzed?: (analysis: any) => void isDarkMode?: boolean
}

export function FurnitureDocumentUpload({ organizationId, onDocumentAnalyzed, isDarkMode = true
}: FurnitureDocumentUploadProps) { const [files, setFiles] = useState<DocumentFile[]>([])

const [uploading, setUploading] = useState(false)

const [analyzing, setAnalyzing] = useState(false)

const [uploadProgress, setUploadProgress] = useState(0)

const [dragOver, setDragOver] = useState(false)

const [error, setError] = useState<string | null>(null)

const [success, setSuccess] = useState<string | null>(null)

const fileInputRef = useRef<HTMLInputElement>(null)

const formatFileSize = (bytes: number): string => { if (bytes === 0) return '0 Bytes' const k = 1024 const sizes = ['Bytes', 'KB', 'MB', 'GB'] const i = Math.floor(Math.log(bytes) / Math.log(k)) return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i] } const getFileIcon = (type: string) => { if (type.startsWith('image/')) return <Image className="w-4 h-4" /> if (type.includes('pdf')) return <FileText className="w-4 h-4 text-red-600" /> return <File className="w-4 h-4" /> } const validateFile = (file: File): string | null => { // Check file size (50MB limit) if (file.size > 50 * 1024 * 1024) { return 'File size must be less than 50MB' } // Check file type const acceptedTypes = ['pdf', 'jpg', 'jpeg', 'png', 'heic'] const extension = file.name.split('.').pop()?.toLowerCase() if (extension && !acceptedTypes.includes(extension)) { return `File type .${extension} is not supported. Accepted types: ${acceptedTypes.join(', ')}` } return null } const uploadFile = async (file: File): Promise<DocumentFile | null> => { const formData = new FormData() formData.append('file', file) formData.append('organizationId', organizationId) formData.append('documentType', 'furniture_invoice') try { const response = await fetch('/api/v1/furniture/documents/upload', { method: 'POST', body: formData })

const result = await response.json() if (result.success) { return result.data.file } else { throw new Error(result.message || 'Upload failed') } } catch (error) { console.error('Upload error:', error) throw error } } const analyzeDocument = async (file: DocumentFile) => { setAnalyzing(true) try { const response = await fetch('/api/v1/furniture/documents/analyze', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ fileId: file.id, fileName: file.name, organizationId }) })

const result = await response.json() if (result.success && result.data.analysis) { // Update file with analysis setFiles(prev => prev.map(f => (f.id === file.id ? { ...f, analysis: result.data.analysis } : f)) ) // Notify parent component if (onDocumentAnalyzed && result.data.journalEntry) { onDocumentAnalyzed({ analysis: result.data.analysis, journalEntry: result.data.journalEntry, suggestedMessage: result.data.suggestedMessage }) } setSuccess('Document analyzed successfully! Check the suggested transaction below.') } } catch (error) { setError('Failed to analyze document') } finally { setAnalyzing(false) } } const handleFileSelect = async (files: FileList) => { setError(null) setSuccess(null) setUploading(true) setUploadProgress(0) try { const newFiles: DocumentFile[] = [] const totalFiles = files.length for (let i = 0; i < totalFiles; i++) { const file = files[i] // Validate file const validationError = validateFile(file) if (validationError) { setError(validationError) continue } // Upload file try { const uploadedFile = await uploadFile(file) if (uploadedFile) { newFiles.push(uploadedFile) // Auto-analyze document after upload await analyzeDocument(uploadedFile) } setUploadProgress(((i + 1) / totalFiles) * 100) } catch (error) { console.error(`Failed to upload ${file.name}:`, error) setError(`Failed to upload ${file.name}`) } } if (newFiles.length > 0) { setFiles(prev => [...prev, ...newFiles]) } } finally { setUploading(false) setUploadProgress(0) } } const handleDrop = (e: React.DragEvent) => { e.preventDefault() setDragOver(false) if (e.dataTransfer.files.length > 0) { handleFileSelect(e.dataTransfer.files) } } const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => { if (e.target.files && e.target.files.length > 0) { handleFileSelect(e.target.files) } } const handleDeleteFile = async (fileId: string) => { try { const response = await fetch(`/api/v1/furniture/documents/${fileId}`, { method: 'DELETE' }) if (response.ok) { setFiles(prev => prev.filter(f => f.id !== fileId)) setSuccess('Document removed') } } catch (error) { setError('Failed to delete document') } } return ( <Card className={cn(isDarkMode ? 'bg-muted/50 border-border' : 'bg-background')}> <CardHeader className="pb-3"> <CardTitle className="text-sm font-medium flex items-center gap-2"> <Receipt className="h-4 w-4" /> Invoice & Receipt Upload </CardTitle> </CardHeader> <CardContent className="space-y-4"> {/* Upload Area */} <div className={cn( 'border-2 border-dashed rounded-lg p-4 text-center transition-colors', dragOver ? 'border-blue-500 bg-blue-500/10' : uploading ? 'border-border bg-muted-foreground/10/50' : 'border-border hover:border-gray-500' )} onDrop={handleDrop} onDragOver={e => { e.preventDefault() setDragOver(true) }} onDragLeave={() => setDragOver(false)} > {uploading ? ( <div className="space-y-2"> <Loader2 className="h-6 w-6 animate-spin mx-auto text-blue-500" /> <p className="text-sm">Uploading...</p> <Progress value={uploadProgress} className="bg-background w-full" /> </div> ) : analyzing ? ( <div className="bg-background space-y-2"> <Sparkles className="h-6 w-6 animate-pulse mx-auto text-yellow-500" /> <p className="text-sm">Analyzing document with AI...</p> </div> ) : ( <div className="bg-background space-y-2"> <div className="flex justify-center gap-2"> <Upload className="h-8 w-8 text-muted-foreground" /> <Camera className="h-8 w-8 text-muted-foreground" /> </div> <p className="text-sm text-muted-foreground">Drop invoices here or click to browse</p> <p className="text-xs text-muted-foreground">PDF, JPG, PNG accepted (Max 50MB)</p> <Button type="button" variant="outline" size="sm" onClick={() => fileInputRef.current?.click()} className="bg-background mt-2" > <FileUp className="h-4 w-4 mr-2" /> Choose Files </Button> <input ref={fileInputRef} type="file" multiple accept=".pdf,.jpg,.jpeg,.png,.heic,image/*" capture="environment" onChange={handleFileInputChange} className="bg-background hidden" /> </div> )} </div> {/* Status Messages */} {error && ( <Alert variant="destructive"> <AlertCircle className="h-4 w-4" /> <AlertDescription>{error}</AlertDescription> </Alert> )} {success && ( <Alert className="border-green-600/20 bg-green-500/10"> <Check className="h-4 w-4 text-green-500" /> <AlertDescription className="text-green-400">{success}</AlertDescription> </Alert> )} {/* Uploaded Files */} {files.length > 0 && ( <ScrollArea className="h-[200px]"> <div className="bg-background space-y-2"> {files.map(file => ( <div key={file.id} className={cn( 'flex items-center justify-between p-3 rounded-lg', isDarkMode ? 'bg-muted-foreground/10/50' : 'bg-muted' )} > <div className="flex items-center gap-3 flex-1 min-w-0"> {getFileIcon(file.type)} <div className="flex-1 min-w-0"> <p className="text-sm font-medium truncate">{file.name}</p> <div className="text-xs text-muted-foreground"> {formatFileSize(file.size)} {file.analysis && ( <span className="ml-2"> • {file.analysis.vendor_name} - ₹ {file.analysis.amount?.toLocaleString('en-IN')} </span> )} </div> </div> </div> <div className="flex items-center gap-1"> {file.analysis ? ( <Badge variant="secondary" className="text-xs bg-green-500/20"> <Check className="h-3 w-3 mr-1" /> Analyzed </Badge> ) : ( <Button size="sm" variant="ghost" onClick={() => analyzeDocument(file)} disabled={analyzing} > <Sparkles className="h-4 w-4" /> </Button> )} <Button size="sm" variant="ghost" onClick={() => window.open(file.url, '_blank')} > <Eye className="h-4 w-4" /> </Button> <Button size="sm" variant="ghost" onClick={() => handleDeleteFile(file.id)} className="bg-background text-red-500 hover:text-red-400" > <Trash2 className="h-4 w-4" /> </Button> </div> </div> ))} </div> </ScrollArea> )} {/* Help Text */} <div className="text-xs text-muted-foreground space-y-1"> <p>• Upload invoices or receipts for automatic processing</p> <p>• AI will extract vendor, amount, and items</p> <p>• Suggested journal entries will appear in chat</p> </div> </CardContent> </Card> )
}
