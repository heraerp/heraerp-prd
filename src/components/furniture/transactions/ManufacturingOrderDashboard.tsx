'use client'

import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow
} from '@/components/ui/table'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Factory, Package, Clock, CheckCircle, AlertCircle, ChevronRight, Wrench, TrendingUp, Calendar
} from 'lucide-react'
import { universalApi } from '@/lib/universal-api'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { formatDate } from '@/lib/date-utils' interface ManufacturingOrder { id: string transaction_code: string product_id: string product_name: string quantity_to_produce: number quantity_completed: number target_completion_date: string status: string progress_percent: number material_status: 'available' | 'partial' | 'shortage' sales_order_id?: string
}

interface ProductionStatus { planned: number in_progress: number quality_check: number completed: number total: number
} export function ManufacturingOrderDashboard() { const [orders, setOrders] = useState<ManufacturingOrder[]>([]) const [selectedOrder, setSelectedOrder] = useState<ManufacturingOrder | null>(null) const [loading, setLoading] = useState(true) const [error, setError] = useState('') const [activeTab, setActiveTab] = useState('all') const [productionStatus, setProductionStatus] = useState<ProductionStatus>({ planned: 0, in_progress: 0, quality_check: 0, completed: 0, total: 0 }) useEffect(() => { loadManufacturingOrders() }, []) const loadManufacturingOrders = async () => { try { setLoading(true) // Load manufacturing orders const ordersData = await universalApi.read({ table: 'universal_transactions', filter: { transaction_type: 'manufacturing_order' } }) const formattedOrders: ManufacturingOrder[] = [] const statusCounts: ProductionStatus = { planned: 0, in_progress: 0, quality_check: 0, completed: 0, total: 0 } for (const order of ordersData.data || []) { // Get product details const productData = await universalApi.read({ table: 'core_entities', filter: { id: order.reference_entity_id } }) const product = productData.data?.[0] const metadata = order.metadata || {} const status = metadata.status || 'planned' const quantityCompleted = metadata.quantity_completed || 0 const quantityToProduced = metadata.quantity_to_produce || 0 // Count by status statusCounts[status as keyof ProductionStatus]++ statusCounts.total++ formattedOrders.push({ id: order.id, transaction_code: order.transaction_code, product_id: order.reference_entity_id, product_name: product?.entity_name || 'Unknown Product', quantity_to_produce: quantityToProduced, quantity_completed: quantityCompleted, target_completion_date: metadata.target_completion_date, status: status, progress_percent: quantityToProduced > 0 ? (quantityCompleted / quantityToProduced) * 100 : 0, material_status: await checkMaterialAvailability(order.id), sales_order_id: metadata.sales_order_id }) } setOrders(formattedOrders) setProductionStatus(statusCounts) } catch (err) { console.error('Error loading manufacturing orders:', err) setError('Failed to load manufacturing orders') } finally { setLoading(false) } } const checkMaterialAvailability = async ( orderId: string ): Promise<'available' | 'partial' | 'shortage'> => { // In a real implementation, this would check inventory levels against BOM requirements // For demo purposes, we'll return a random status const statuses: ('available' | 'partial' | 'shortage')[] = ['available', 'partial', 'shortage'] return statuses[Math.floor(Math.random() * statuses.length)] } const getStatusBadgeColor = (status: string) => { switch (status) { case 'planned': return 'secondary' case 'in_progress': return 'default' case 'quality_check': return 'outline' case 'completed': return 'success' default: return 'secondary' } } const getMaterialStatusBadge = (status: string) => { switch (status) { case 'available': return <Badge variant="success">Materials Available</Badge> case 'partial': return <Badge variant="secondary">Partial Materials</Badge> case 'shortage': return <Badge variant="destructive">Material Shortage</Badge> default: return <Badge variant="outline">Unknown</Badge> } } const updateOrderStatus = async (orderId: string, newStatus: string) => { try { // In a real implementation, this would update the order status via API await universalApi.update({ table: 'universal_transactions', id: orderId, data: { metadata: { ...orders.find(o => o.id === orderId)?.status, status: newStatus } } }) // Refresh the list await loadManufacturingOrders() } catch (err) { console.error('Error updating order status:', err) } } const filteredOrders = orders.filter(order => { if (activeTab === 'all') return true return order.status === activeTab }) return ( <div className="bg-background space-y-6"> {/* Summary Cards */} <div className="grid grid-cols-4 gap-4"> <Card> <CardHeader className="pb-3"> <CardTitle className="text-sm font-medium">Total Orders</CardTitle> </CardHeader> <CardContent> <div className="bg-background text-2xl font-bold">{productionStatus.total}</div> <p className="text-xs text-muted-foreground mt-1"> <TrendingUp className="w-3 h-3 inline mr-1" /> Active production orders </p> </CardContent> </Card> <Card> <CardHeader className="pb-3"> <CardTitle className="text-sm font-medium">In Progress</CardTitle> </CardHeader> <CardContent> <div className="bg-background text-2xl font-bold text-primary">{productionStatus.in_progress}</div> <Progress value={(productionStatus.in_progress / productionStatus.total) * 100} className="bg-background mt-2" /> </CardContent> </Card> <Card> <CardHeader className="pb-3"> <CardTitle className="text-sm font-medium">Quality Check</CardTitle> </CardHeader> <CardContent> <div className="bg-background text-2xl font-bold text-orange-600"> {productionStatus.quality_check} </div> <p className="text-xs text-muted-foreground mt-1"> <AlertCircle className="w-3 h-3 inline mr-1" /> Awaiting inspection </p> </CardContent> </Card> <Card> <CardHeader className="pb-3"> <CardTitle className="text-sm font-medium">Completed</CardTitle> </CardHeader> <CardContent> <div className="bg-background text-2xl font-bold text-green-600">{productionStatus.completed}</div> <p className="text-xs text-muted-foreground mt-1"> <CheckCircle className="w-3 h-3 inline mr-1" /> Ready for delivery </p> </CardContent> </Card> </div> {/* Manufacturing Orders Table */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Factory className="w-5 h-5" /> Manufacturing Orders </CardTitle> </CardHeader> <CardContent> <Tabs value={activeTab} onValueChange={setActiveTab}> <TabsList className="mb-4"> <TabsTrigger value="all">All Orders</TabsTrigger> <TabsTrigger value="planned">Planned</TabsTrigger> <TabsTrigger value="in_progress">In Progress</TabsTrigger> <TabsTrigger value="quality_check">Quality Check</TabsTrigger> <TabsTrigger value="completed">Completed</TabsTrigger> </TabsList> <TabsContent value={activeTab}> {loading ? ( <div className="bg-background text-center py-8 text-muted-foreground"> Loading manufacturing orders... </div> ) : filteredOrders.length === 0 ? ( <div className="bg-background text-center py-8 text-muted-foreground"> No orders found in this status </div> ) : ( <Table> <TableHeader> <TableRow> <TableHead>Order Number</TableHead> <TableHead>Product</TableHead> <TableHead>Quantity</TableHead> <TableHead>Progress</TableHead> <TableHead>Target Date</TableHead> <TableHead>Material Status</TableHead> <TableHead>Status</TableHead> <TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {filteredOrders.map(order => ( <TableRow key={order.id}> <TableCell className="font-mono text-sm"> {order.transaction_code} </TableCell> <TableCell>{order.product_name}</TableCell> <TableCell> <div className="bg-background text-sm"> {order.quantity_completed} / {order.quantity_to_produce} </div> <Progress value={order.progress_percent} className="bg-background w-20 h-2 mt-1" /> </TableCell> <TableCell> <span className="text-sm font-medium"> {order.progress_percent.toFixed(0)}% </span> </TableCell> <TableCell> <div className="bg-background flex items-center gap-1"> <Calendar className="w-4 h-4 text-muted-foreground" /> <span className="text-sm"> {formatDate(new Date(order.target_completion_date), 'PP')} </span> </div> </TableCell> <TableCell>{getMaterialStatusBadge(order.material_status)}</TableCell> <TableCell> <Badge variant={getStatusBadgeColor(order.status)}> {order.status.replace('_', ' ')} </Badge> </TableCell> <TableCell> <div className="bg-background flex gap-1"> {order.status === 'planned' && ( <Button size="sm" variant="outline" onClick={() => updateOrderStatus(order.id, 'in_progress')} > Start </Button> )} {order.status === 'in_progress' && ( <Button size="sm" variant="outline" onClick={() => updateOrderStatus(order.id, 'quality_check')} > QC </Button> )} {order.status === 'quality_check' && ( <Button size="sm" variant="outline" onClick={() => updateOrderStatus(order.id, 'completed')} > Complete </Button> )} <Button size="sm" variant="ghost" onClick={() => setSelectedOrder(order)} > <ChevronRight className="w-4 h-4" /> </Button> </div> </TableCell> </TableRow> ))} </TableBody> </Table> )} </TabsContent> </Tabs> {error && ( <Alert variant="destructive" className="bg-background mt-4"> <AlertCircle className="h-4 w-4" /> <AlertDescription>{error}</AlertDescription> </Alert> )} </CardContent> </Card> {/* Selected Order Details */} {selectedOrder && ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Wrench className="w-5 h-5" /> Order Details: {selectedOrder.transaction_code} </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="bg-background grid grid-cols-2 gap-4"> <div> <p className="text-sm text-muted-foreground">Product</p> <p className="font-medium">{selectedOrder.product_name}</p> </div> <div> <p className="text-sm text-muted-foreground">Quantity</p> <p className="font-medium"> {selectedOrder.quantity_completed} / {selectedOrder.quantity_to_produce} </p> </div> <div> <p className="text-sm text-muted-foreground">Target Completion</p> <p className="font-medium"> {formatDate(new Date(selectedOrder.target_completion_date), 'PPP')} </p> </div> <div> <p className="text-sm text-muted-foreground">Sales Order</p> <p className="font-medium">{selectedOrder.sales_order_id || 'Stock Production'}</p> </div> </div> <div className="bg-background pt-4 border-t"> <h4 className="bg-background font-medium mb-2">Production Timeline</h4> <div className="space-y-2"> <div className="flex items-center gap-2"> <CheckCircle className="w-4 h-4 text-green-600" /> <span className="text-sm">Order Created</span> </div> {selectedOrder.status !== 'planned' && ( <div className="flex items-center gap-2"> <CheckCircle className="w-4 h-4 text-green-600" /> <span className="text-sm">Production Started</span> </div> )} {['quality_check', 'completed'].includes(selectedOrder.status) && ( <div className="flex items-center gap-2"> <CheckCircle className="w-4 h-4 text-green-600" /> <span className="text-sm">Quality Check</span> </div> )} {selectedOrder.status === 'completed' && ( <div className="flex items-center gap-2"> <CheckCircle className="w-4 h-4 text-green-600" /> <span className="text-sm">Production Completed</span> </div> )} </div> </div> </CardContent> </Card> )} </div> )
}
