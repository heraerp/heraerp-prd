'use client' import React, { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue
} from '@/components/ui/select'
import { Card } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Switch } from '@/components/ui/switch'
import { Plus, Package, X, Info, DollarSign, Ruler, Palette, Shield, BarChart, Tag, Image as ImageIcon, Upload, Save
} from 'lucide-react'
import { universalApi } from '@/lib/universal-api'
import { cn } from '@/lib/utils'
import { useToast } from '@/hooks/use-toast' interface NewProductModalProps { trigger?: React.ReactNode onProductCreated?: (productId: string) => void organizationId?: string organizationName?: string
} // Product categories
const productCategories = [ { value: 'seating', label: 'Seating', icon: '🪑' }, { value: 'tables', label: 'Tables', icon: '🏓' }, { value: 'storage', label: 'Storage', icon: '📦' }, { value: 'office', label: 'Office', icon: '💼' }, { value: 'beds', label: 'Beds', icon: '🛏️' }, { value: 'outdoor', label: 'Outdoor', icon: '🌳' }, { value: 'decor', label: 'Decor', icon: '🖼️' }, { value: 'lighting', label: 'Lighting', icon: '💡' }
] // Material options
const materials = [ 'wood', 'metal', 'fabric', 'leather', 'glass', 'plastic', 'marble', 'granite', 'veneer', 'composite'
] // Finish options
const finishes = [ 'matte', 'glossy', 'satin', 'polished', 'brushed', 'natural', 'painted', 'stained', 'lacquered', 'textured'
] export default function NewProductModal({ trigger, onProductCreated, organizationId: propOrgId, organizationName
}: NewProductModalProps) { const { toast } = useToast() const [isOpen, setIsOpen] = useState(false) const [isSubmitting, setIsSubmitting] = useState(false) const [activeTab, setActiveTab] = useState('basic') // Product form state const [productData, setProductData] = useState({ // Basic Information name: '', sku: '', category: '', subCategory: '', brand: '', description: '', // Pricing costPrice: 0, sellingPrice: 0, taxRate: 5, // GST discountPercent: 0, // Inventory stockQuantity: 0, minStockLevel: 5, reorderQuantity: 10, location: '', // Physical Properties material: '', finish: '', color: '', lengthCm: 0, widthCm: 0, heightCm: 0, weightKg: 0, // Additional Info warranty: '1 year', isActive: true, isFeatured: false, tags: [] as string[], notes: '' }) const [newTag, setNewTag] = useState('') const handleChange = (field: string, value: any) => { setProductData(prev => ({ ...prev, [field]: value })) } const handleAddTag = () => { if (newTag.trim() && !productData.tags.includes(newTag.trim())) { setProductData(prev => ({ ...prev, tags: [...prev.tags, newTag.trim()] })) setNewTag('') } } const handleRemoveTag = (tag: string) => { setProductData(prev => ({ ...prev, tags: prev.tags.filter(t => t !== tag) })) } const generateSKU = () => { const categoryPrefix = productData.category.slice(0, 3).toUpperCase() const timestamp = Date.now().toString().slice(-6) const sku = `FRN-${categoryPrefix}-${timestamp}` handleChange('sku', sku) } const calculateMargin = () => { if (productData.costPrice && productData.sellingPrice) { const margin = ((productData.sellingPrice - productData.costPrice) / productData.sellingPrice) * 100 return margin.toFixed(1) } return '0' } const handleSubmit = async () => { // Validation if (!productData.name.trim()) { toast({ title: 'Validation Error', description: 'Product name is required.', variant: 'destructive' }) return } if (!productData.sku.trim()) { toast({ title: 'Validation Error', description: 'SKU is required.', variant: 'destructive' }) return } if (!productData.category) { toast({ title: 'Validation Error', description: 'Please select a product category.', variant: 'destructive' }) return } if (!propOrgId) { toast({ title: 'Error', description: 'Organization context is required.', variant: 'destructive' }) return } try { setIsSubmitting(true) universalApi.setOrganizationId(propOrgId) // Create product entity const productResponse = await universalApi.createEntity({ entity_type: 'product', entity_name: productData.name, entity_code: productData.sku, smart_code: `HERA.FURNITURE.PRODUCT.${productData.category.toUpperCase()}.v1`, organization_id: propOrgId, metadata: { category: productData.category, sub_category: productData.subCategory, brand: productData.brand, status: productData.isActive ? 'active' : 'inactive', is_featured: productData.isFeatured } }) if (productResponse.success) { const productId = productResponse.data.id // Create dynamic fields const dynamicFields = [ // Description and basic info { field_name: 'description', field_value_text: productData.description }, { field_name: 'brand', field_value_text: productData.brand }, // Pricing { field_name: 'cost_price', field_value_number: productData.costPrice }, { field_name: 'selling_price', field_value_number: productData.sellingPrice }, { field_name: 'price', field_value_number: productData.sellingPrice }, // For compatibility { field_name: 'tax_rate', field_value_number: productData.taxRate }, { field_name: 'discount_percent', field_value_number: productData.discountPercent }, // Inventory { field_name: 'stock_quantity', field_value_number: productData.stockQuantity }, { field_name: 'min_stock_level', field_value_number: productData.minStockLevel }, { field_name: 'reorder_quantity', field_value_number: productData.reorderQuantity }, { field_name: 'location', field_value_text: productData.location }, // Physical Properties { field_name: 'material', field_value_text: productData.material }, { field_name: 'finish', field_value_text: productData.finish }, { field_name: 'color', field_value_text: productData.color }, { field_name: 'length_cm', field_value_number: productData.lengthCm }, { field_name: 'width_cm', field_value_number: productData.widthCm }, { field_name: 'height_cm', field_value_number: productData.heightCm }, { field_name: 'weight_kg', field_value_number: productData.weightKg }, // Additional Info { field_name: 'warranty', field_value_text: productData.warranty }, { field_name: 'category', field_value_text: productData.category }, { field_name: 'sub_category', field_value_text: productData.subCategory }, { field_name: 'tags', field_value_json: JSON.stringify(productData.tags) }, { field_name: 'notes', field_value_text: productData.notes }, { field_name: 'status', field_value_text: productData.isActive ? 'active' : 'inactive' }, { field_name: 'is_featured', field_value_boolean: productData.isFeatured } ] // Add all dynamic fields for (const field of dynamicFields) { if ( field.field_value_text !== '' || field.field_value_number !== undefined || field.field_value_boolean !== undefined || field.field_value_json !== undefined ) { await universalApi.setDynamicField( productId, field.field_name, field.field_value_text || field.field_value_number || field.field_value_boolean || field.field_value_json, { smart_code: 'HERA.FURNITURE.PRODUCT.DYNAMIC.v1', field_category: 'product_details' } ) } } // Create inventory tracking transaction if (productData.stockQuantity > 0) { await universalApi.createTransaction({ transaction_type: 'inventory_adjustment', transaction_code: `ADJ-${Date.now()}`, transaction_date: new Date().toISOString(), reference_entity_id: productId, total_amount: productData.stockQuantity * productData.costPrice, smart_code: 'HERA.FURNITURE.INVENTORY.INITIAL.v1', metadata: { adjustment_type: 'initial_stock', quantity: productData.stockQuantity, unit_cost: productData.costPrice, location: productData.location, notes: 'Initial stock entry' }, organization_id: propOrgId }) } // Reset form setProductData({ name: '', sku: '', category: '', subCategory: '', brand: '', description: '', costPrice: 0, sellingPrice: 0, taxRate: 5, discountPercent: 0, stockQuantity: 0, minStockLevel: 5, reorderQuantity: 10, location: '', material: '', finish: '', color: '', lengthCm: 0, widthCm: 0, heightCm: 0, weightKg: 0, warranty: '1 year', isActive: true, isFeatured: false, tags: [], notes: '' }) setActiveTab('basic') setIsOpen(false) toast({ title: '✅ Product Created', description: `${productData.name} (${productData.sku}) has been added to the catalog.`, duration: 4000 }) // Callback if (onProductCreated) { onProductCreated(productId) } } } catch (error) { console.error('Error creating product:', error) toast({ title: 'Error', description: 'Failed to create product. Please try again.', variant: 'destructive' }) } finally { setIsSubmitting(false) } } return ( <Dialog open={isOpen} onOpenChange={setIsOpen}> <DialogTrigger asChild> {trigger || ( <Button className="gap-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"> <Plus className="h-4 w-4" /> Add Product </Button> )} </DialogTrigger> <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto bg-background border-border"> <DialogHeader className="border-b border-gray-800 pb-4"> <DialogTitle className="text-xl font-semibold text-foreground flex items-center gap-3"> <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center"> <Package className="h-5 w-5 text-foreground" /> </div> Create New Product </DialogTitle> </DialogHeader> <Tabs value={activeTab} onValueChange={setActiveTab} className="bg-background mt-6"> <TabsList className="grid w-full grid-cols-4 bg-muted"> <TabsTrigger value="basic" className="data-[state=active]:bg-muted-foreground/10"> <Info className="h-4 w-4 mr-2" /> Basic Info </TabsTrigger> <TabsTrigger value="pricing" className="data-[state=active]:bg-muted-foreground/10"> <DollarSign className="h-4 w-4 mr-2" /> Pricing </TabsTrigger> <TabsTrigger value="inventory" className="data-[state=active]:bg-muted-foreground/10"> <BarChart className="h-4 w-4 mr-2" /> Inventory </TabsTrigger> <TabsTrigger value="specifications" className="data-[state=active]:bg-muted-foreground/10"> <Ruler className="h-4 w-4 mr-2" /> Specifications </TabsTrigger> </TabsList> {/* Basic Information */} <TabsContent value="basic" className="bg-background space-y-4 mt-4"> <div className="grid grid-cols-2 gap-4"> <div> <Label className="text-gray-300">Product Name *</Label> <Input value={productData.name} onChange={e => handleChange('name', e.target.value)} className="bg-muted border-border text-foreground" placeholder="e.g., Executive Office Chair" /> </div> <div> <Label className="text-gray-300">SKU *</Label> <div className="bg-background flex gap-2"> <Input value={productData.sku} onChange={e => handleChange('sku', e.target.value)} className="bg-muted border-border text-foreground" placeholder="e.g., FRN-OFF-001" /> <Button type="button" variant="outline" onClick={generateSKU} className="border-border hover:bg-muted-foreground/10" > Generate </Button> </div> </div> </div> <div className="grid grid-cols-2 gap-4"> <div> <Label className="text-gray-300">Category *</Label> <Select value={productData.category} onValueChange={value => handleChange('category', value)} > <SelectTrigger className="bg-muted border-border text-foreground"> <SelectValue placeholder="Select category" /> </SelectTrigger> <SelectContent> {productCategories.map(cat => ( <SelectItem key={cat.value} value={cat.value}> <span className="flex items-center gap-2"> <span>{cat.icon}</span> {cat.label} </span> </SelectItem> ))} </SelectContent> </Select> </div> <div> <Label className="text-gray-300">Sub-Category</Label> <Input value={productData.subCategory} onChange={e => handleChange('subCategory', e.target.value)} className="bg-muted border-border text-foreground" placeholder="e.g., Executive Chairs" /> </div> </div> <div> <Label className="text-gray-300">Brand</Label> <Input value={productData.brand} onChange={e => handleChange('brand', e.target.value)} className="bg-muted border-border text-foreground" placeholder="e.g., Kerala Furniture" /> </div> <div> <Label className="text-gray-300">Description</Label> <Textarea value={productData.description} onChange={e => handleChange('description', e.target.value)} className="bg-muted border-border text-foreground min-h-[100px]" placeholder="Detailed product description..." /> </div> <div className="flex items-center justify-between"> <div className="flex items-center space-x-2"> <Switch id="active" checked={productData.isActive} onCheckedChange={checked => handleChange('isActive', checked)} /> <Label htmlFor="active" className="bg-background text-gray-300"> Active </Label> </div> <div className="flex items-center space-x-2"> <Switch id="featured" checked={productData.isFeatured} onCheckedChange={checked => handleChange('isFeatured', checked)} /> <Label htmlFor="featured" className="bg-background text-gray-300"> Featured Product </Label> </div> </div> </TabsContent> {/* Pricing */} <TabsContent value="pricing" className="bg-background space-y-4 mt-4"> <div className="grid grid-cols-2 gap-4"> <div> <Label className="text-gray-300">Cost Price</Label> <div className="relative"> <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">₹</span> <Input type="number" value={productData.costPrice} onChange={e => handleChange('costPrice', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground pl-8" placeholder="0.00" step="0.01" /> </div> </div> <div> <Label className="text-gray-300">Selling Price *</Label> <div className="relative"> <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">₹</span> <Input type="number" value={productData.sellingPrice} onChange={e => handleChange('sellingPrice', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground pl-8" placeholder="0.00" step="0.01" /> </div> </div> </div> <div className="grid grid-cols-2 gap-4"> <div> <Label className="text-gray-300">Tax Rate (%)</Label> <Input type="number" value={productData.taxRate} onChange={e => handleChange('taxRate', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="5" step="0.1" min="0" max="100" /> </div> <div> <Label className="text-gray-300">Discount (%)</Label> <Input type="number" value={productData.discountPercent} onChange={e => handleChange('discountPercent', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="0" step="0.1" min="0" max="100" /> </div> </div> {/* Pricing Summary */} <Card className="p-4 bg-muted border-border space-y-3"> <h3 className="bg-background font-semibold text-foreground">Pricing Summary</h3> <div className="space-y-2 text-sm"> <div className="flex justify-between text-muted-foreground"> <span>Cost Price:</span> <span>₹{productData.costPrice.toFixed(2)}</span> </div> <div className="flex justify-between text-muted-foreground"> <span>Margin:</span> <span className={ parseFloat(calculateMargin()) > 0 ? 'text-green-400' : 'text-red-400' } > {calculateMargin()}% </span> </div> <div className="flex justify-between text-muted-foreground"> <span>Tax Amount:</span> <span> ₹{((productData.sellingPrice * productData.taxRate) / 100).toFixed(2)} </span> </div> <div className="flex justify-between text-muted-foreground"> <span>Discount:</span> <span> ₹{((productData.sellingPrice * productData.discountPercent) / 100).toFixed(2)} </span> </div> <div className="h-px bg-muted-foreground/10" /> <div className="flex justify-between font-semibold text-foreground"> <span>Final Price:</span> <span> ₹ {( productData.sellingPrice * (1 - productData.discountPercent / 100) * (1 + productData.taxRate / 100) ).toFixed(2)} </span> </div> </div> </Card> </TabsContent> {/* Inventory */} <TabsContent value="inventory" className="bg-background space-y-4 mt-4"> <div className="grid grid-cols-3 gap-4"> <div> <Label className="text-gray-300">Current Stock</Label> <Input type="number" value={productData.stockQuantity} onChange={e => handleChange('stockQuantity', parseInt(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="0" min="0" /> </div> <div> <Label className="text-gray-300">Min Stock Level</Label> <Input type="number" value={productData.minStockLevel} onChange={e => handleChange('minStockLevel', parseInt(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="5" min="0" /> </div> <div> <Label className="text-gray-300">Reorder Quantity</Label> <Input type="number" value={productData.reorderQuantity} onChange={e => handleChange('reorderQuantity', parseInt(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="10" min="0" /> </div> </div> <div> <Label className="text-gray-300">Storage Location</Label> <Input value={productData.location} onChange={e => handleChange('location', e.target.value)} className="bg-muted border-border text-foreground" placeholder="e.g., Warehouse A, Rack 12, Shelf 3" /> </div> <div> <Label className="text-gray-300">Warranty Period</Label> <Input value={productData.warranty} onChange={e => handleChange('warranty', e.target.value)} className="bg-muted border-border text-foreground" placeholder="e.g., 1 year" /> </div> {/* Stock Value Card */} <Card className="p-4 bg-muted border-border"> <h3 className="bg-background font-semibold text-foreground mb-3">Stock Valuation</h3> <div className="grid grid-cols-2 gap-4 text-sm"> <div className="bg-background text-muted-foreground"> <span className="block">Total Units:</span> <span className="text-xl font-semibold text-foreground"> {productData.stockQuantity} </span> </div> <div className="bg-background text-muted-foreground"> <span className="block">Total Value:</span> <span className="text-xl font-semibold text-foreground"> ₹{(productData.stockQuantity * productData.costPrice).toLocaleString()} </span> </div> </div> </Card> </TabsContent> {/* Specifications */} <TabsContent value="specifications" className="bg-background space-y-4 mt-4"> <div className="bg-background grid grid-cols-2 gap-4"> <div> <Label className="text-gray-300">Primary Material</Label> <Select value={productData.material} onValueChange={value => handleChange('material', value)} > <SelectTrigger className="bg-muted border-border text-foreground"> <SelectValue placeholder="Select material" /> </SelectTrigger> <SelectContent> {materials.map(mat => ( <SelectItem key={mat} value={mat}> <span className="capitalize">{mat}</span> </SelectItem> ))} </SelectContent> </Select> </div> <div> <Label className="text-gray-300">Finish</Label> <Select value={productData.finish} onValueChange={value => handleChange('finish', value)} > <SelectTrigger className="bg-muted border-border text-foreground"> <SelectValue placeholder="Select finish" /> </SelectTrigger> <SelectContent> {finishes.map(fin => ( <SelectItem key={fin} value={fin}> <span className="capitalize">{fin}</span> </SelectItem> ))} </SelectContent> </Select> </div> </div> <div> <Label className="text-gray-300">Primary Color</Label> <Input value={productData.color} onChange={e => handleChange('color', e.target.value)} className="bg-muted border-border text-foreground" placeholder="e.g., Walnut Brown" /> </div> <div> <Label className="text-gray-300 mb-2 block">Dimensions (cm)</Label> <div className="bg-background grid grid-cols-3 gap-4"> <div> <Label className="text-muted-foreground text-sm">Length</Label> <Input type="number" value={productData.lengthCm} onChange={e => handleChange('lengthCm', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="0" step="0.1" /> </div> <div> <Label className="text-muted-foreground text-sm">Width</Label> <Input type="number" value={productData.widthCm} onChange={e => handleChange('widthCm', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="0" step="0.1" /> </div> <div> <Label className="text-muted-foreground text-sm">Height</Label> <Input type="number" value={productData.heightCm} onChange={e => handleChange('heightCm', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="0" step="0.1" /> </div> </div> </div> <div> <Label className="text-gray-300">Weight (kg)</Label> <Input type="number" value={productData.weightKg} onChange={e => handleChange('weightKg', parseFloat(e.target.value) || 0)} className="bg-muted border-border text-foreground" placeholder="0" step="0.1" /> </div> <div> <Label className="text-gray-300">Tags</Label> <div className="bg-background flex gap-2 mb-2"> <Input value={newTag} onChange={e => setNewTag(e.target.value)} onKeyPress={e => e.key === 'Enter' && (e.preventDefault(), handleAddTag())} className="bg-muted border-border text-foreground" placeholder="Add a tag..." /> <Button type="button" variant="outline" onClick={handleAddTag} className="border-border hover:bg-muted-foreground/10" > <Plus className="h-4 w-4" /> </Button> </div> <div className="flex flex-wrap gap-2"> {productData.tags.map(tag => ( <span key={tag} className="inline-flex items-center gap-1 px-2 py-1 bg-muted-foreground/10 text-gray-300 rounded-full text-sm" > {tag} <button type="button" onClick={() => handleRemoveTag(tag)} className="bg-background hover:text-foreground" > <X className="bg-background h-3 w-3" /> </button> </span> ))} </div> </div> <div> <Label className="text-gray-300">Internal Notes</Label> <Textarea value={productData.notes} onChange={e => handleChange('notes', e.target.value)} className="bg-muted border-border text-foreground" placeholder="Any internal notes about this product..." rows={3} /> </div> </TabsContent> </Tabs> {/* Action Buttons */} <div className="flex justify-end gap-3 mt-6 pt-4 border-t border-gray-800"> <Button variant="outline" onClick={() => setIsOpen(false)} className="border-border hover:bg-muted-foreground/10" > Cancel </Button> <Button onClick={handleSubmit} disabled={isSubmitting} className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700" > {isSubmitting ? ( <> <div className="bg-background w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" /> Creating... </> ) : ( <> <Save className="h-4 w-4 mr-2" /> Create Product </> )} </Button> </div> </DialogContent> </Dialog> )
}
