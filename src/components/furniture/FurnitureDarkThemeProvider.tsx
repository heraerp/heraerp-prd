'use client' import React, { useEffect } from 'react' interface FurnitureDarkThemeProviderProps { children: React.ReactNode
} export function FurnitureDarkThemeProvider({ children }: FurnitureDarkThemeProviderProps) { useEffect(() => { // Force dark mode for furniture module const root = window.document.documentElement // Remove any existing theme classes root.classList.remove('light') // Always add dark class root.classList.add('dark') // Override any stored theme preference for furniture pages const originalTheme = localStorage.getItem('hera-theme') // Store original theme to restore when leaving furniture module if (originalTheme) { sessionStorage.setItem('furniture-original-theme', originalTheme) } // Force dark theme in localStorage while in furniture module localStorage.setItem('hera-theme', 'dark') // Cleanup function to restore original theme when leaving furniture module return () => { const savedOriginalTheme = sessionStorage.getItem('furniture-original-theme') if (savedOriginalTheme) { localStorage.setItem('hera-theme', savedOriginalTheme) sessionStorage.removeItem('furniture-original-theme') } } }, []) // Also handle any system theme changes and force dark mode useEffect(() => { const handleSystemThemeChange = () => { const root = window.document.documentElement root.classList.remove('light') root.classList.add('dark') } const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)') mediaQuery.addEventListener('change', handleSystemThemeChange) return () => { mediaQuery.removeEventListener('change', handleSystemThemeChange) } }, []) return <>{children}</>
}