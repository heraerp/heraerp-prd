'use client'

export default function AnalyticsChatV2Page() {
  return (
    <div className="min-h-screen p-8">
      <h1 className="text-2xl font-bold">Analytics Chat V2</h1>
      <p className="mt-4">This page is temporarily under maintenance.</p>
    </div>
  )
}

/*

import React, { useState, useRef, useEffect, useCallback } from 'react'
import './analytics.css'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { ChatHistory } from './components/ChatHistory'
import { QuickActions } from './components/QuickActions'
import { TodaysMetrics } from './components/TodaysMetrics'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Brain, 
  Send, 
  Loader2, 
  BarChart2, 
  TrendingUp, 
  AlertCircle, 
  ChevronDown, 
  ArrowUp, 
  History, 
  Trash2, 
  Search, 
  Calendar, 
  MessageSquare, 
  X,
  LineChart,
  PieChart,
  Download,
  Filter,
  Sparkles,
  Target,
  DollarSign,
  Users,
  ShoppingBag,
  Package,
  FileText,
  Settings,
  Zap,
  Info,
  Clock,
  Shield,
  Database,
  Moon,
  Sun
} from 'lucide-react'
import { cn } from '@/lib/utils'
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog'
import { Progress } from '@/components/ui/progress'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'

// Enhanced types
interface AnalyticsResult {
  type: 'chart' | 'metric' | 'table' | 'insight' | 'forecast'
  data: any
  visualization?: 'line' | 'bar' | 'pie' | 'area' | 'scatter'
  title?: string
  description?: string
}

interface Message {
  id: string
  role: 'user' | 'assistant' | 'error' | 'system'
  content: string
  data?: any
  timestamp: Date
  analytics?: AnalyticsResult[]
  suggestions?: string[]
  confidence?: number
}

interface QuerySuggestion {
  text: string
  category: string
  icon: React.ElementType
  description?: string
}

// Quick Action Cards like salon manager
interface QuickMetric {
  icon: React.ComponentType<{ className?: string }>
  label: string
  value: string | number
  trend?: number
  color: string
}

const QUICK_METRICS: QuickMetric[] = [
  {
    icon: DollarSign,
    label: 'Today\'s Revenue',
    value: '$3,450',
    trend: 12,
    color: 'from-green-600 to-green-400'
  },
  {
    icon: Users,
    label: 'Active Customers',
    value: 246,
    trend: 8,
    color: 'from-blue-600 to-blue-400'
  },
  {
    icon: ShoppingBag,
    label: 'Total Orders',
    value: 52,
    trend: -3,
    color: 'from-purple-600 to-purple-400'
  },
  {
    icon: TrendingUp,
    label: 'Growth Rate',
    value: '15.2%',
    trend: 5,
    color: 'from-orange-600 to-orange-400'
  }
]

// Query suggestions organized by category with gradients
const QUERY_SUGGESTIONS: Record<string, QuerySuggestion[]> = {
  revenue: [
    { text: "Show revenue trend last 3 months", category: "Revenue", icon: TrendingUp, description: "Monthly revenue breakdown" },
    { text: "Compare revenue by service type", category: "Revenue", icon: BarChart2, description: "Service-wise revenue analysis" },
    { text: "Forecast next quarter revenue", category: "Revenue", icon: Target, description: "AI-powered revenue prediction" },
    { text: "Top revenue generating days", category: "Revenue", icon: Calendar, description: "Best performing days" }
  ],
  customers: [
    { text: "Show customer growth trend", category: "Customers", icon: Users, description: "New vs returning customers" },
    { text: "List top 10 customers by value", category: "Customers", icon: DollarSign, description: "High-value customer analysis" },
    { text: "Customer retention rate", category: "Customers", icon: Target, description: "Loyalty metrics" },
    { text: "Average customer lifetime value", category: "Customers", icon: TrendingUp, description: "CLV calculation" }
  ],
  operations: [
    { text: "Service utilization by type", category: "Operations", icon: PieChart, description: "Popular services breakdown" },
    { text: "Staff performance metrics", category: "Operations", icon: Users, description: "Employee productivity" },
    { text: "Peak business hours analysis", category: "Operations", icon: Clock, description: "Busy time identification" },
    { text: "Inventory turnover rate", category: "Operations", icon: Package, description: "Stock efficiency" }
  ],
  financial: [
    { text: "Profit margin by service", category: "Financial", icon: DollarSign, description: "Profitability analysis" },
    { text: "Expense breakdown by category", category: "Financial", icon: PieChart, description: "Cost structure" },
    { text: "Cash flow forecast", category: "Financial", icon: LineChart, description: "Liquidity projection" },
    { text: "Compare budget vs actual", category: "Financial", icon: BarChart2, description: "Variance analysis" }
  ]
}

// Enhanced visualization component with gradients
const DataVisualization = ({ result }: { result: AnalyticsResult }) => {
  if (result.type === 'metric') {
    return (
      <div className="relative overflow-hidden bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 rounded-xl p-6 border border-purple-200 dark:border-purple-800">
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full blur-3xl" />
        <div className="relative flex items-start justify-between">
          <div>
            <p className="text-sm font-medium text-purple-600 dark:text-purple-400">{result.title}</p>
            <p className="text-3xl font-bold mt-1 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              {result.data.value}
            </p>
            {result.data.change && (
              <p className={cn(
                "text-sm mt-2 flex items-center gap-1 font-medium",
                result.data.change > 0 ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"
              )}>
                {result.data.change > 0 ? <TrendingUp className="w-3 h-3" /> : <ChevronDown className="w-3 h-3" />}
                {Math.abs(result.data.change)}% vs last period
              </p>
            )}
          </div>
          {result.data.icon && (
            <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center shadow-lg">
              <result.data.icon className="w-6 h-6 text-white" />
            </div>
          )}
        </div>
      </div>
    )
  }
  
  if (result.type === 'chart') {
    // Enhanced chart visualization
    return (
      <div className="bg-gradient-to-br from-purple-50/50 to-pink-50/50 dark:from-purple-950/20 dark:to-pink-950/20 rounded-xl p-6 border border-purple-200 dark:border-purple-800">
        <h4 className="font-semibold mb-4 flex items-center gap-2">
          <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center">
            <LineChart className="w-4 w-4 text-white" />
          </div>
          {result.title}
        </h4>
        <div className="h-64 bg-white dark:bg-gray-900 rounded-lg border border-purple-100 dark:border-purple-900 flex items-center justify-center">
          <div className="text-center">
            <div className="w-16 h-16 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900 dark:to-pink-900 flex items-center justify-center mx-auto mb-3">
              <LineChart className="w-8 h-8 text-purple-600 dark:text-purple-400" />
            </div>
            <p className="text-sm text-muted-foreground">Interactive chart visualization</p>
            <p className="text-xs text-muted-foreground mt-1">Data rendering in progress...</p>
          </div>
        </div>
        {result.description && (
          <p className="text-sm text-muted-foreground mt-4 flex items-start gap-2">
            <Info className="w-4 h-4 text-purple-600 dark:text-purple-400 mt-0.5" />
            {result.description}
          </p>
        )}
      </div>
    )
  }
  
  if (result.type === 'table' && result.data?.rows) {
    return (
      <div className="bg-white dark:bg-gray-900 rounded-xl overflow-hidden border border-purple-200 dark:border-purple-800 shadow-sm">
        {result.title && (
          <div className="px-6 py-4 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950 dark:to-pink-950 border-b border-purple-100 dark:border-purple-900">
            <h4 className="font-semibold flex items-center gap-2">
              <FileText className="w-4 h-4 text-purple-600 dark:text-purple-400" />
              {result.title}
            </h4>
          </div>
        )}
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b border-purple-100 dark:border-purple-900 bg-purple-50/50 dark:bg-purple-950/50">
                {result.data.columns.map((col: string) => (
                  <th key={col} className="px-4 py-3 text-left font-medium text-purple-900 dark:text-purple-100">
                    {col}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {result.data.rows.slice(0, 10).map((row: any[], idx: number) => (
                <tr key={idx} className="border-b border-purple-50 dark:border-purple-950 hover:bg-purple-50/50 dark:hover:bg-purple-950/50 transition-colors">
                  {row.map((cell, cellIdx) => (
                    <td key={cellIdx} className="px-4 py-3">
                      {typeof cell === 'number' ? (
                        <span className="font-medium">{cell.toLocaleString()}</span>
                      ) : cell}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {result.data.rows.length > 10 && (
          <div className="px-6 py-3 bg-purple-50/50 dark:bg-purple-950/50 border-t border-purple-100 dark:border-purple-900">
            <p className="text-xs text-muted-foreground flex items-center gap-2">
              <Info className="w-3 h-3" />
              Showing 10 of {result.data.rows.length} rows
            </p>
          </div>
        )}
      </div>
    )
  }
  
  if (result.type === 'insight') {
    return (
      <div className="relative overflow-hidden bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-950/30 dark:to-cyan-950/30 border border-blue-200 dark:border-blue-800 rounded-xl p-4">
        <div className="absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-blue-400/20 to-cyan-400/20 rounded-full blur-2xl" />
        <div className="relative flex items-start gap-3">
          <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-blue-600 to-cyan-600 flex items-center justify-center flex-shrink-0">
            <Info className="w-5 h-5 text-white" />
          </div>
          <div>
            {result.title && <h4 className="font-semibold mb-1 text-blue-900 dark:text-blue-100">{result.title}</h4>}
            <p className="text-sm text-blue-800 dark:text-blue-200">{result.data}</p>
          </div>
        </div>
      </div>
    )
  }
  
  return null
}

export default function EnhancedAnalyticsChat() {
  // State management
  const organizationId = '550e8400-e29b-41d4-a716-446655440000' // Testing default
  const [currentSessionId, setCurrentSessionId] = useState<string | null>('session-1')
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [isSidebarOpen, setIsSidebarOpen] = useState(true)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: `Welcome to HERA Analytics Brain v2! I'm your enhanced AI analytics assistant with advanced capabilities:

🎯 **What's New:**
• Real-time data visualizations
• Predictive analytics & forecasting
• Comparative analysis tools
• Export capabilities
• Smart query suggestions

💡 **Try these enhanced queries:**
• "Show me a revenue trend chart with forecast"
• "Compare this month vs last month by service"
• "What are my top opportunities for growth?"
• "Analyze customer behavior patterns"

I'm here to provide powerful business insights and help you make data-driven decisions.`,
      timestamp: new Date(),
      suggestions: ['Show revenue trend', 'Customer analysis', 'Forecast next quarter', 'Top services']
    }
  ])
  
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)
  const [showScrollTop, setShowScrollTop] = useState(false)
  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true)
  const [activeCategory, setActiveCategory] = useState<string>('all')
  const [timeFrame, setTimeFrame] = useState<string>('30days')
  const [exportFormat, setExportFormat] = useState<'csv' | 'pdf' | 'json'>('csv')
  
  // Mock chat sessions for demo
  const [chatSessions] = useState([
    {
      id: 'session-1',
      title: 'Revenue Analysis Q4',
      timestamp: new Date(2024, 0, 15),
      messageCount: 12,
      lastMessage: 'Showing quarterly revenue trends...',
      isStarred: true
    },
    {
      id: 'session-2',
      title: 'Customer Segmentation',
      timestamp: new Date(2024, 0, 14),
      messageCount: 8,
      lastMessage: 'Top customer segments by value...',
      isStarred: false
    },
    {
      id: 'session-3',
      title: 'Sales Forecast 2024',
      timestamp: new Date(2024, 0, 13),
      messageCount: 15,
      lastMessage: 'Projected sales for next quarter...',
      isStarred: true
    }
  ])
  
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  
  // Toggle dark mode
  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
    if (!isDarkMode) {
      document.documentElement.classList.add('dark')
      document.documentElement.setAttribute('data-theme', 'dark')
      document.body.style.backgroundColor = '#1a1a1a'
    } else {
      document.documentElement.classList.remove('dark')
      document.documentElement.setAttribute('data-theme', 'light')
      document.body.style.backgroundColor = '#ffffff'
    }
  }

  // Enhanced submit handler with better response processing
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || loading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInput('')
    setLoading(true)

    try {
      const response = await fetch('/api/v1/analytics/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: input,
          organizationId,
          useAnalyticsBrain: true,
          context: {
            timeFrame,
            category: activeCategory
          }
        }),
      })

      const data = await response.json()
      
      // Create enhanced response with visualizations
      const analyticsResults: AnalyticsResult[] = []
      
      // Process different types of results
      if (data.result && Array.isArray(data.result)) {
        data.result.forEach((result: any) => {
          if (result.type === 'forecast') {
            analyticsResults.push({
              type: 'metric',
              title: 'Revenue Forecast',
              data: {
                value: `$${result.forecast_amount?.toLocaleString() || 0}`,
                change: result.growth_rate,
                icon: TrendingUp
              }
            })
            
            if (result.confidence) {
              analyticsResults.push({
                type: 'metric',
                title: 'Forecast Confidence',
                data: {
                  value: `${result.confidence}%`,
                  icon: Target
                }
              })
            }
          } else if (result.type === 'revenue_analysis') {
            analyticsResults.push({
              type: 'metric',
              title: 'Total Revenue',
              data: {
                value: `$${result.total_revenue?.toLocaleString() || 0}`,
                icon: DollarSign
              }
            })
            
            if (result.breakdown && result.breakdown.length > 0) {
              analyticsResults.push({
                type: 'chart',
                title: 'Revenue by Service',
                visualization: 'bar',
                data: result.breakdown
              })
            }
          } else if (result.type === 'customer_analysis') {
            analyticsResults.push({
              type: 'metric',
              title: 'Total Customers',
              data: {
                value: result.count || 0,
                icon: Users
              }
            })
            
            if (result.data && result.data.length > 0) {
              analyticsResults.push({
                type: 'table',
                title: 'Customer Details',
                data: {
                  columns: ['Name', 'Email', 'Status'],
                  rows: result.data.slice(0, 10).map((c: any) => [
                    c.entity_name || c.name,
                    c.email || '—',
                    c.vip_status ? 'VIP' : 'Regular'
                  ])
                }
              })
            }
          }
        })
      }
      
      // Add insights if available
      if (data.insights && data.insights.length > 0) {
        data.insights.forEach((insight: string) => {
          analyticsResults.push({
            type: 'insight',
            data: insight
          })
        })
      }

      const assistantMessage: Message = {
        id: Date.now().toString() + '-response',
        role: data.error ? 'error' : 'assistant',
        content: data.message || data.response || 'Analysis complete.',
        data: data.result,
        analytics: analyticsResults,
        suggestions: data.nextActions,
        confidence: data.confidence,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, assistantMessage])
      
    } catch (error) {
      const errorMessage: Message = {
        id: Date.now().toString() + '-error',
        role: 'error',
        content: `Error: ${error instanceof Error ? error.message : 'Connection failed'}`,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setLoading(false)
    }
  }
  
  // Quick query handler
  const handleQuickQuery = (suggestion: QuerySuggestion) => {
    setInput(suggestion.text)
    inputRef.current?.focus()
  }
  
  // Export functionality
  const handleExport = () => {
    // Implement export logic based on selected format
    console.log(`Exporting in ${exportFormat} format...`)
  }

  return (
    <TooltipProvider>
      <div className={cn("min-h-screen", isDarkMode && "dark")} style={{ backgroundColor: isDarkMode ? '#1a1a1a' : '#ffffff' }}>
        <div className="flex h-screen bg-gray-50 dark:bg-gray-950">
          {/* Sidebar */}
          {isSidebarOpen && (
            <div className="w-[280px] bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 flex flex-col">
              <div className="p-4 border-b border-gray-200 dark:border-gray-800">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center shadow-lg">
                    <Brain className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <h2 className={cn(
                      "font-semibold",
                      isDarkMode ? "text-gray-100" : "text-gray-900"
                    )}>Analytics Brain</h2>
                    <p className={cn(
                      "text-xs",
                      isDarkMode ? "text-gray-400" : "text-gray-600"
                    )}>Enterprise Intelligence</p>
                  </div>
                </div>
              </div>
              
              <ScrollArea className="flex-1 p-4">
                <div className="space-y-4">
                  <ChatHistory
                    sessions={chatSessions}
                    currentSessionId={currentSessionId}
                    onSelectSession={setCurrentSessionId}
                    onDeleteSession={(id) => console.log('Delete session:', id)}
                    onNewSession={() => console.log('New session')}
                  />
                  
                  <QuickActions />
                  
                  <TodaysMetrics />
                </div>
              </ScrollArea>
            </div>
          )}
          
          {/* Main Content */}
          <div className="flex-1 flex flex-col">
        {/* Header with Gradient Background */}
        <div className="relative bg-gradient-to-br from-purple-600 via-purple-500 to-pink-500 dark:from-purple-900 dark:via-purple-800 dark:to-pink-800 px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="w-14 h-14 rounded-2xl bg-white/20 backdrop-blur-lg border border-white/30 flex items-center justify-center shadow-lg">
                <Brain className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-white flex items-center gap-2">
                  HERA Analytics Brain
                  <Badge className="bg-white/20 text-white border-white/30 backdrop-blur">v2.0</Badge>
                </h1>
                <p className="text-white/90 flex items-center gap-2 mt-1">
                  <Sparkles className="h-4 w-4" />
                  Advanced AI-Powered Business Intelligence
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Select value={timeFrame} onValueChange={setTimeFrame}>
                <SelectTrigger className="w-[140px] bg-white/20 border-white/30 text-white [&>svg]:text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="7days">Last 7 days</SelectItem>
                  <SelectItem value="30days">Last 30 days</SelectItem>
                  <SelectItem value="90days">Last 90 days</SelectItem>
                  <SelectItem value="12months">Last 12 months</SelectItem>
                  <SelectItem value="custom">Custom range</SelectItem>
                </SelectContent>
              </Select>
              
              <Button 
                variant="outline" 
                size="icon" 
                onClick={toggleDarkMode}
                className="bg-white/20 border-white/30 text-white hover:bg-white/30"
              >
                {isDarkMode ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
              </Button>
              
              <Button 
                variant="outline" 
                size="icon"
                className="bg-white/20 border-white/30 text-white hover:bg-white/30"
              >
                <Settings className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
        
        {/* Main Chat Area */}
        <div className="flex-1 p-6 overflow-hidden">
          {/* Quick Metrics Cards */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          {QUICK_METRICS.map((metric, idx) => {
            const Icon = metric.icon
            return (
              <Card 
                key={idx}
                className="relative overflow-hidden hover:shadow-lg transition-all cursor-pointer transform hover:scale-105"
                onClick={() => handleQuickQuery({ 
                  text: `Analyze ${metric.label.toLowerCase()} in detail`, 
                  category: 'metrics', 
                  icon: metric.icon,
                  description: `Detailed analysis of ${metric.label}`
                })}
              >
                <div className={cn("absolute inset-0 opacity-10 bg-gradient-to-br", metric.color)} />
                <CardContent className="p-4 relative">
                  <div className="flex items-start justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium text-muted-foreground">{metric.label}</p>
                      <p className="text-2xl font-bold">{metric.value}</p>
                      {metric.trend !== undefined && (
                        <div className={cn(
                          "text-xs flex items-center gap-1",
                          metric.trend > 0 ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"
                        )}>
                          {metric.trend > 0 ? <TrendingUp className="h-3 w-3" /> : <ChevronDown className="h-3 w-3" />}
                          <span>{Math.abs(metric.trend)}% from last period</span>
                        </div>
                      )}
                    </div>
                    <div className={cn("w-10 h-10 rounded-xl bg-gradient-to-br flex items-center justify-center", metric.color)}>
                      <Icon className="h-5 w-5 text-white" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
        
        {/* Chat Interface */}
        <div className="flex gap-6 h-full">
          {/* Query Suggestions */}
          <div className="w-[260px] space-y-4 hidden xl:block">
            <Card className={cn(
              "shadow-sm",
              isDarkMode ? "bg-[#292929] border-[#3a3a3a]" : "bg-white border-gray-200"
            )}>
              <CardHeader className={cn(
                "pb-3",
                isDarkMode ? "bg-gradient-to-r from-purple-950 to-pink-950 border-b border-[#3a3a3a]" : "bg-gradient-to-r from-purple-50 to-pink-50 border-b border-gray-200"
              )}>
                <CardTitle className="text-base flex items-center gap-2">
                  <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center">
                    <Sparkles className="h-4 w-4 text-white" />
                  </div>
                  Smart Queries
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <Tabs value={activeCategory} onValueChange={setActiveCategory}>
                  <TabsList className={cn(
                    "grid grid-cols-2 w-full rounded-none",
                    isDarkMode ? "bg-muted/50" : "bg-gray-100"
                  )}>
                    <TabsTrigger value="all" className="text-xs">All Queries</TabsTrigger>
                    <TabsTrigger value="custom" className="text-xs">Favorites</TabsTrigger>
                  </TabsList>
                  <TabsContent value="all" className="p-4 pt-2 space-y-4">
                    {Object.entries(QUERY_SUGGESTIONS).map(([category, suggestions]) => (
                      <div key={category} className="space-y-2">
                        <h4 className={cn(
                          "text-xs font-semibold uppercase tracking-wider flex items-center gap-2",
                          isDarkMode ? "text-purple-400" : "text-purple-600"
                        )}>
                          <div className="w-1 h-3 bg-gradient-to-b from-purple-600 to-pink-600 rounded-full" />
                          {category}
                        </h4>
                        <div className="space-y-1">
                          {suggestions.slice(0, 2).map((suggestion, idx) => (
                            <Tooltip key={idx}>
                              <TooltipTrigger asChild>
                                <Button
                                  variant="ghost"
                                  className={cn(
                                    "w-full justify-start text-xs h-auto py-2.5 px-3 transition-colors",
                                    isDarkMode ? "hover:bg-[#3a3a3a] text-gray-300" : "hover:bg-gray-100 text-gray-700"
                                  )}
                                  onClick={() => handleQuickQuery(suggestion)}
                                >
                                  <div className={cn(
                                    "w-6 h-6 rounded-md bg-gradient-to-br flex items-center justify-center mr-2 flex-shrink-0",
                                    isDarkMode ? "from-purple-900 to-pink-900" : "from-purple-100 to-pink-100"
                                  )}>
                                    <suggestion.icon className={cn(
                                      "h-3 w-3",
                                      isDarkMode ? "text-purple-400" : "text-purple-600"
                                    )} />
                                  </div>
                                  <span className="truncate">{suggestion.text}</span>
                                </Button>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>{suggestion.description}</p>
                              </TooltipContent>
                            </Tooltip>
                          ))}
                        </div>
                      </div>
                    ))}
                  </TabsContent>
                  <TabsContent value="custom" className="p-4">
                    <div className="text-center py-8">
                      <div className={cn(
                        "w-12 h-12 rounded-full bg-gradient-to-br flex items-center justify-center mx-auto mb-3",
                        isDarkMode ? "from-purple-900 to-pink-900" : "from-purple-100 to-pink-100"
                      )}>
                        <Target className={cn(
                          "h-6 w-6",
                          isDarkMode ? "text-purple-400" : "text-purple-600"
                        )} />
                      </div>
                      <p className={cn(
                        "text-xs",
                        isDarkMode ? "text-gray-400" : "text-gray-600"
                      )}>
                        Save your frequently used queries here
                      </p>
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
            
            {/* Quick Stats */}
            <Card className={cn(
              "shadow-sm",
              isDarkMode ? "bg-[#292929] border-[#3a3a3a]" : "bg-white border-gray-200"
            )}>
              <CardHeader className={cn(
                "pb-3",
                isDarkMode ? "bg-gradient-to-r from-purple-950 to-pink-950 border-b border-[#3a3a3a]" : "bg-gradient-to-r from-purple-50 to-pink-50 border-b border-gray-200"
              )}>
                <CardTitle className="text-base flex items-center gap-2">
                  <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-600 to-cyan-600 flex items-center justify-center">
                    <BarChart2 className="h-4 w-4 text-white" />
                  </div>
                  Quick Stats
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 pt-4">
                <div className={cn(
                  "flex items-center justify-between p-2 rounded-lg transition-colors",
                  isDarkMode ? "hover:bg-[#3a3a3a]" : "hover:bg-gray-100"
                )}>
                  <div className="flex items-center gap-2">
                    <MessageSquare className={cn(
                      "h-4 w-4",
                      isDarkMode ? "text-purple-400" : "text-purple-600"
                    )} />
                    <span className={cn(
                      "text-sm",
                      isDarkMode ? "text-gray-300" : "text-gray-700"
                    )}>Queries Today</span>
                  </div>
                  <Badge className={cn(
                    isDarkMode ? "bg-purple-900 text-purple-300" : "bg-purple-100 text-purple-700"
                  )}>12</Badge>
                </div>
                <div className={cn(
                  "flex items-center justify-between p-2 rounded-lg transition-colors",
                  isDarkMode ? "hover:bg-[#3a3a3a]" : "hover:bg-gray-100"
                )}>
                  <div className="flex items-center gap-2">
                    <Zap className={cn(
                      "h-4 w-4",
                      isDarkMode ? "text-orange-400" : "text-orange-600"
                    )} />
                    <span className={cn(
                      "text-sm",
                      isDarkMode ? "text-gray-300" : "text-gray-700"
                    )}>Insights Found</span>
                  </div>
                  <Badge className={cn(
                    isDarkMode ? "bg-orange-900 text-orange-300" : "bg-orange-100 text-orange-700"
                  )}>8</Badge>
                </div>
                <div className={cn(
                  "flex items-center justify-between p-2 rounded-lg transition-colors",
                  isDarkMode ? "hover:bg-[#3a3a3a]" : "hover:bg-gray-100"
                )}>
                  <div className="flex items-center gap-2">
                    <Shield className={cn(
                      "h-4 w-4",
                      isDarkMode ? "text-green-400" : "text-green-600"
                    )} />
                    <span className={cn(
                      "text-sm",
                      isDarkMode ? "text-gray-300" : "text-gray-700"
                    )}>Data Accuracy</span>
                  </div>
                  <Badge className={cn(
                    isDarkMode ? "bg-green-900 text-green-300" : "bg-green-100 text-green-700"
                  )}>98%</Badge>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* Chat Messages */}
          <Card className="flex-1 flex flex-col border-purple-200 dark:border-purple-800 shadow-lg">
            <CardHeader className="border-b border-purple-100 dark:border-purple-900 px-6 py-4 bg-gradient-to-r from-purple-50/50 to-pink-50/50 dark:from-purple-950/50 dark:to-pink-950/50">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-2">
                    <div className="relative">
                      <div className="w-3 h-3 rounded-full bg-green-500 animate-pulse" />
                      <div className="absolute inset-0 w-3 h-3 rounded-full bg-green-500 animate-ping" />
                    </div>
                    <span className="text-sm font-medium">AI Analytics Engine Active</span>
                  </div>
                  <Separator orientation="vertical" className="h-4" />
                  <Badge className="bg-gradient-to-r from-purple-100 to-pink-100 text-purple-700 dark:from-purple-900 dark:to-pink-900 dark:text-purple-300 border-purple-200 dark:border-purple-800">
                    <Sparkles className="h-3 w-3 mr-1" />
                    Enterprise Plus
                  </Badge>
                </div>
                
                <div className="flex items-center gap-2">
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={handleExport}
                    className="hover:bg-purple-100 dark:hover:bg-purple-900"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Export
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    className="hover:bg-purple-100 dark:hover:bg-purple-900"
                  >
                    <History className="h-4 w-4 mr-2" />
                    History
                  </Button>
                </div>
              </div>
            </CardHeader>
            
            <ScrollArea className="flex-1 px-6 py-4" ref={scrollAreaRef}>
              <div className="space-y-6">
                {messages.map((message, index) => (
                  <div
                    key={message.id}
                    className={cn(
                      'flex gap-3 animate-in fade-in slide-in-from-bottom-2 duration-300',
                      message.role === 'user' && 'justify-end'
                    )}
                  >
                    {message.role !== 'user' && (
                      <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center flex-shrink-0 shadow-lg">
                        {message.role === 'error' ? (
                          <AlertCircle className="h-5 w-5 text-white" />
                        ) : (
                          <Brain className="h-5 w-5 text-white" />
                        )}
                      </div>
                    )}
                    
                    <div className={cn(
                      'flex-1 space-y-3',
                      message.role === 'user' && 'max-w-[80%]'
                    )}>
                      <div
                        className={cn(
                          'rounded-xl px-5 py-4 shadow-sm',
                          message.role === 'user' 
                            ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white' 
                            : message.role === 'error'
                            ? 'bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-950 dark:to-pink-950 text-red-700 dark:text-red-300 border border-red-200 dark:border-red-800'
                            : 'bg-white dark:bg-gray-900 border border-purple-100 dark:border-purple-900'
                        )}
                      >
                        <p className="text-sm whitespace-pre-wrap leading-relaxed">{message.content}</p>
                        {message.confidence && (
                          <div className="flex items-center gap-2 mt-3 pt-3 border-t border-white/20">
                            <div className="flex-1 bg-white/20 rounded-full h-2 overflow-hidden">
                              <div 
                                className="h-full bg-white/70 rounded-full transition-all duration-500 ease-out"
                                style={{ width: `${message.confidence}%` }}
                              />
                            </div>
                            <span className="text-xs opacity-90">{message.confidence}% confidence</span>
                          </div>
                        )}
                      </div>
                      
                      {/* Analytics Results */}
                      {message.analytics && message.analytics.length > 0 && (
                        <div className="space-y-3">
                          {message.analytics.map((result, idx) => (
                            <DataVisualization key={idx} result={result} />
                          ))}
                        </div>
                      )}
                      
                      {/* Suggestions */}
                      {message.suggestions && message.suggestions.length > 0 && (
                        <div className="space-y-2">
                          <span className="text-xs font-medium text-purple-600 dark:text-purple-400 flex items-center gap-2">
                            <Sparkles className="w-3 h-3" />
                            Suggested next actions:
                          </span>
                          <div className="flex flex-wrap gap-2">
                            {message.suggestions.map((suggestion, idx) => (
                              <Button
                                key={idx}
                                variant="outline"
                                size="sm"
                                className="text-xs h-8 border-purple-200 hover:border-purple-400 hover:bg-purple-50 dark:border-purple-800 dark:hover:border-purple-600 dark:hover:bg-purple-950 transition-all"
                                onClick={() => {
                                  setInput(suggestion)
                                  inputRef.current?.focus()
                                }}
                              >
                                <Zap className="w-3 h-3 mr-1 text-purple-600 dark:text-purple-400" />
                                {suggestion}
                              </Button>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      <div className="text-xs text-muted-foreground">
                        {message.timestamp.toLocaleTimeString()}
                      </div>
                    </div>
                  </div>
                ))}
                
                {loading && (
                  <div className="flex gap-3">
                    <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center shadow-lg animate-pulse">
                      <Brain className="h-5 w-5 text-white" />
                    </div>
                    <div className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950 dark:to-pink-950 rounded-xl px-5 py-4 border border-purple-200 dark:border-purple-800">
                      <div className="flex items-center gap-3">
                        <Loader2 className="h-4 w-4 animate-spin text-purple-600 dark:text-purple-400" />
                        <p className="text-sm font-medium text-purple-700 dark:text-purple-300">Analyzing your data...</p>
                      </div>
                      <div className="flex gap-1.5 mt-3">
                        <div className="w-2 h-2 bg-gradient-to-br from-purple-600 to-pink-600 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                        <div className="w-2 h-2 bg-gradient-to-br from-purple-600 to-pink-600 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                        <div className="w-2 h-2 bg-gradient-to-br from-purple-600 to-pink-600 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                      </div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            <form onSubmit={handleSubmit} className="p-4 border-t border-purple-100 dark:border-purple-900 bg-gradient-to-r from-purple-50/50 to-pink-50/50 dark:from-purple-950/50 dark:to-pink-950/50">
              <div className="flex gap-2">
                <div className="relative flex-1">
                  <Input
                    ref={inputRef}
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Ask me anything about your business data..."
                    className="pr-12 h-12 border-purple-200 dark:border-purple-800 focus:border-purple-400 dark:focus:border-purple-600 bg-white dark:bg-gray-900"
                    disabled={loading}
                  />
                  <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 hover:bg-purple-100 dark:hover:bg-purple-900"
                          disabled={loading}
                        >
                          <Zap className="h-4 w-4 text-purple-600 dark:text-purple-400" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>AI-powered analysis</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                </div>
                <Button 
                  type="submit" 
                  disabled={loading || !input.trim()}
                  className="h-12 px-6 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg"
                >
                  {loading ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <>
                      <Send className="h-4 w-4 mr-2" />
                      Send
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Card>
          
          {/* Footer */}
          <div className="mt-4 p-4 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm rounded-lg border border-gray-200 dark:border-gray-800">
            <div className="flex items-center justify-between text-sm">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-green-600 to-emerald-600 flex items-center justify-center">
                  <Shield className="h-4 w-4 text-white" />
                </div>
                <span className="font-medium text-green-700 dark:text-green-300">Enterprise Security</span>
              </div>
              <Separator orientation="vertical" className="h-6 bg-purple-200 dark:bg-purple-800" />
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-600 to-cyan-600 flex items-center justify-center">
                  <Database className="h-4 w-4 text-white" />
                </div>
                <span className="font-medium text-blue-700 dark:text-blue-300">Universal Architecture</span>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Badge className="bg-gradient-to-r from-purple-100 to-pink-100 text-purple-700 dark:from-purple-900 dark:to-pink-900 dark:text-purple-300 border-purple-200 dark:border-purple-800">
                <Brain className="h-3 w-3 mr-1" />
                Powered by HERA Intelligence
              </Badge>
            </div>
          </div>
        </div>
        </div>
      </div>
    </TooltipProvider>
  )
}

*/