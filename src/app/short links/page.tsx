'use client'

/**
 * Short Links CRUD Page
 * Generated by HERA Enterprise Generator
 * 
 * Module: MCA
 * Entity: SHORT_LINK
 * Smart Code: HERA.CRM.MCA.ENTITY.SHORT_LINK.V1
 * Description: Click tracking and UTM parameter management
 */

import React, { useState, useCallback, useEffect } from 'react'
import { MobilePageLayout } from '@/components/mobile/MobilePageLayout'
import { MobileFilters, type FilterField } from '@/components/mobile/MobileFilters'
import { MobileDataTable, type TableColumn, type TableRecord } from '@/components/mobile/MobileDataTable'
import { MobileCard } from '@/components/mobile/MobileCard'
import { MobileChart } from '@/components/mobile/MobileCharts'
import { useHERAAuth } from '@/components/auth/HERAAuthProvider'
import { useUniversalEntity } from '@/hooks/useUniversalEntity'
import { 
  AlertCircle,
  CheckCircle,
  Clock,
  Download,
  Edit,
  Eye,
  Filter,
  Link,
  MoreVertical,
  Plus,
  Save,
  Search,
  Trash2,
  TrendingUp,
  Upload,
  X
} from 'lucide-react'

/**
 * Short Link Entity Interface
 * Extends TableRecord for HERA compliance
 */
interface Short Link extends TableRecord {
  id: string
  entity_id?: string
  entity_name: string
  smart_code: string
  status?: string
  
  // Dynamic fields (stored in core_dynamic_data)
  alias?: string
  destination?: string
  campaign_id?: string
  utm_params?: string
  clicks?: string
  unique_clicks?: string
  status?: string
  
  // System fields
  created_at?: string
  updated_at?: string
  created_by?: string
  updated_by?: string
  
  // Business rule fields
  
  
}

/**
 * HERA Short Link Smart Codes
 * Auto-generated from preset configuration
 */
const SHORT_LINK_SMART_CODES = {
  ENTITY: 'HERA.CRM.MCA.ENTITY.SHORT_LINK.V1',
  FIELD_ALIAS: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.ALIAS.V1',
  FIELD_DESTINATION: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.DESTINATION.V1',
  FIELD_CAMPAIGN_ID: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.CAMPAIGN_ID.V1',
  FIELD_UTM_PARAMS: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.UTM_PARAMS.V1',
  FIELD_CLICKS: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.CLICKS.V1',
  FIELD_UNIQUE_CLICKS: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.UNIQUE_CLICKS.V1',
  FIELD_STATUS: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.STATUS.V1',
  
  // Event smart codes for audit trail
  EVENT_CREATED: 'HERA.CRM.MCA.EVENT.SHORT_LINK.V1.CREATED.V1',
  EVENT_UPDATED: 'HERA.CRM.MCA.EVENT.SHORT_LINK.V1.UPDATED.V1',
  EVENT_DELETED: 'HERA.CRM.MCA.EVENT.SHORT_LINK.V1.DELETED.V1'
} as const

/**
 * Short Links Main Page Component
 * Enterprise-grade CRUD with quality gates and business rules
 */
export default function Short LinksPage() {
  const { currentOrganization, isAuthenticated, user } = useHERAAuth()
  const [selectedShort Links, setSelectedShort Links] = useState<(string | number)[]>([])
  const [showAddModal, setShowAddModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [currentShort Link, setCurrentShort Link] = useState<Short Link | null>(null)
  const [short_linkToDelete, setShort LinkToDelete] = useState<Short Link | null>(null)
  const [filters, setFilters] = useState({
    search: '',
    status: '',
    // Dynamic filter fields
    alias: '',
    destination: '',
    campaign_id: ''
  })

  // HERA Universal Entity Integration
  const short_linkData = useUniversalEntity({
    entity_type: 'SHORT_LINK',
    organizationId: currentOrganization?.id,
    filters: {
      include_dynamic: true,
      include_relationships: undefined,
      status: 'active'
    },
    dynamicFields: [
      { name: 'alias', type: 'text', smart_code: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.ALIAS.V1', required: false },
      { name: 'destination', type: 'text', smart_code: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.DESTINATION.V1', required: false },
      { name: 'campaign_id', type: 'text', smart_code: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.CAMPAIGN_ID.V1', required: false },
      { name: 'utm_params', type: 'text', smart_code: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.UTM_PARAMS.V1', required: false },
      { name: 'clicks', type: 'text', smart_code: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.CLICKS.V1', required: false },
      { name: 'unique_clicks', type: 'text', smart_code: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.UNIQUE_CLICKS.V1', required: false },
      { name: 'status', type: 'text', smart_code: 'HERA.CRM.MCA.DYN.SHORT_LINK.V1.STATUS.V1', required: false }
    ]
  })

  // Transform entities with business rule extensions
  const short_links: Short Link[] = short_linkData.entities?.map((entity: any) => {
    return {
      id: entity.id,
      entity_id: entity.id,
      entity_name: entity.entity_name || '',
      smart_code: entity.smart_code || '',
      status: entity.status || 'active',
      
      // Map dynamic fields with type safety
      alias: entity.dynamic_data?.find((d: any) => d.field_name === 'alias')?.field_value_text || '',
      destination: entity.dynamic_data?.find((d: any) => d.field_name === 'destination')?.field_value_text || '',
      campaign_id: entity.dynamic_data?.find((d: any) => d.field_name === 'campaign_id')?.field_value_text || '',
      utm_params: entity.dynamic_data?.find((d: any) => d.field_name === 'utm_params')?.field_value_text || '',
      clicks: entity.dynamic_data?.find((d: any) => d.field_name === 'clicks')?.field_value_text || '',
      unique_clicks: entity.dynamic_data?.find((d: any) => d.field_name === 'unique_clicks')?.field_value_text || '',
      status: entity.dynamic_data?.find((d: any) => d.field_name === 'status')?.field_value_text || '',
      
      // System fields
      created_at: entity.created_at,
      updated_at: entity.updated_at,
      created_by: entity.created_by,
      updated_by: entity.updated_by
      
      
    }
  }) || []

  // Enhanced KPI calculations with preset metrics
  const kpis = [
    {
      title: 'Total Short Links',
      value: short_links.length.toString(),
      change: '+5.2%',
      trend: 'up' as const,
      icon: Link
    },
    {
      title: 'Active Short Links',
      value: short_links.filter(item => item.status === 'active').length.toString(),
      change: '+2.1%',
      trend: 'up' as const,
      icon: CheckCircle
    },
    {
      title: 'This Month',
      value: short_links.filter(item => {
        if (!item.created_at) return false
        const created = new Date(item.created_at)
        const now = new Date()
        return created.getMonth() === now.getMonth() && created.getFullYear() === now.getFullYear()
      }).length.toString(),
      change: '+8.3%',
      trend: 'up' as const,
      icon: TrendingUp
    }
  ]

  // Enhanced table columns with business rule columns
  const columns: TableColumn[] = [
    { key: 'entity_name', label: 'Short Link Name', sortable: true },
    { key: 'alias', label: 'Alias', sortable: true },
    { key: 'destination', label: 'Destination', sortable: true },
    { key: 'campaign_id', label: 'Campaign id', sortable: true },
    { key: 'utm_params', label: 'Utm params', sortable: true },
    { key: 'clicks', label: 'Clicks', sortable: true },
    { key: 'created_at', label: 'Created', sortable: true },
    { key: 'actions', label: 'Actions', sortable: false }
  ]

  // Enhanced filter fields with business rule filters
  const filterFields: FilterField[] = [
    { key: 'search', label: 'Search Short Links', type: 'search' },
    { key: 'status', label: 'Status', type: 'select', options: [
      { value: '', label: 'All Status' },
      { value: 'active', label: 'Active' },
      { value: 'inactive', label: 'Inactive' }
    ]},
    { key: 'alias', label: 'Alias', type: 'select', options: [
        { value: '', label: 'All Aliass' },
        ...Array.from(new Set(short_links.map(item => item.alias).filter(Boolean))).map(val => ({ value: val!, label: val! }))
      ]},
    { key: 'destination', label: 'Destination', type: 'select', options: [
        { value: '', label: 'All Destinations' },
        ...Array.from(new Set(short_links.map(item => item.destination).filter(Boolean))).map(val => ({ value: val!, label: val! }))
      ]}
  ]

  // Enterprise CRUD Operations with Events
  const handleAddShort Link = async (short_linkData: any) => {
    try {
      const result = await short_linkData.create({
        entity_type: 'SHORT_LINK',
        entity_name: short_linkData.entity_name,
        smart_code: SHORT_LINK_SMART_CODES.ENTITY,
        organization_id: currentOrganization?.id
      }, short_linkData)

      // Emit creation event for audit trail
      await short_linkData.emitEvent(SHORT_LINK_SMART_CODES.EVENT_CREATED, {
        entity_id: result.id,
        user_id: user?.id,
        timestamp: new Date().toISOString(),
        data: short_linkData
      })

      setShowAddModal(false)
      console.log('✅ Short Link created successfully')
    } catch (error) {
      console.error('❌ Error adding short_link:', error)
    }
  }

  const handleEditShort Link = async (short_linkData: any) => {
    if (!currentShort Link) return
    
    try {
      await short_linkData.update(currentShort Link.entity_id!, {
        entity_name: short_linkData.entity_name
      }, short_linkData)

      // Emit update event
      await short_linkData.emitEvent(SHORT_LINK_SMART_CODES.EVENT_UPDATED, {
        entity_id: currentShort Link.entity_id!,
        user_id: user?.id,
        timestamp: new Date().toISOString(),
        changes: short_linkData
      })

      setShowEditModal(false)
      setCurrentShort Link(null)
      console.log('✅ Short Link updated successfully')
    } catch (error) {
      console.error('❌ Error updating short_link:', error)
    }
  }

  const handleDeleteShort Link = async () => {
    if (!short_linkToDelete) return
    
    try {
      await short_linkData.delete(short_linkToDelete.entity_id!)

      // Emit deletion event
      await short_linkData.emitEvent(SHORT_LINK_SMART_CODES.EVENT_DELETED, {
        entity_id: short_linkToDelete.entity_id!,
        user_id: user?.id,
        timestamp: new Date().toISOString(),
        entity_name: short_linkToDelete.entity_name
      })

      setShowDeleteModal(false)
      setShort LinkToDelete(null)
      console.log('✅ Short Link deleted successfully')
    } catch (error) {
      console.error('❌ Error deleting short_link:', error)
    }
  }

  
  

  // Enterprise security checks
  if (!isAuthenticated) {
    return (
      <div className="p-4 text-center">
        <AlertCircle className="h-8 w-8 text-red-500 mx-auto mb-2" />
        <p>Please log in to access Short Links.</p>
      </div>
    )
  }

  if (short_linkData.contextLoading) {
    return (
      <div className="p-4 text-center">
        <div className="animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-2"></div>
        <p>Loading Short Links...</p>
      </div>
    )
  }

  if (!currentOrganization) {
    return (
      <div className="p-4 text-center">
        <AlertCircle className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
        <p>No organization context found. Please select an organization.</p>
      </div>
    )
  }

  return (
    <MobilePageLayout
      title="Short Links"
      subtitle={`${short_links.length} total short_links`}
      primaryColor="#00bcf2"
      accentColor="#0078d4"
      showBackButton={false}
    >
      {/* Enterprise KPI Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        {kpis.map((kpi, index) => (
          <MobileCard key={index} className="p-4 hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 font-medium">{kpi.title}</p>
                <p className="text-2xl font-bold" style={{ color: '#00bcf2' }}>{kpi.value}</p>
                <p className={`text-xs font-medium ${kpi.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>
                  {kpi.change}
                </p>
              </div>
              <kpi.icon className="h-8 w-8 text-gray-400" />
            </div>
          </MobileCard>
        ))}
      </div>

      {/* Enhanced Filters */}
      <MobileFilters
        fields={filterFields}
        values={filters}
        onChange={setFilters}
        className="mb-6"
      />

      {/* Enterprise Data Table */}
      <MobileDataTable
        data={short_links}
        columns={columns}
        selectedRows={selectedShort Links}
        onRowSelect={setSelectedShort Links}
        onRowClick={(short_link) => {
          setCurrentShort Link(short_link)
          setShowEditModal(true)
        }}
        showBulkActions={selectedShort Links.length > 0}
        bulkActions={[
          {
            label: 'Delete Selected',
            action: async () => {
              // Bulk delete with events
              for (const id of selectedShort Links) {
                await short_linkData.delete(id.toString())
              }
              setSelectedShort Links([])
            },
            variant: 'destructive'
          }
        ]}
        mobileCardRender={(short_link) => (
          <MobileCard key={short_link.id} className="p-4 hover:shadow-md transition-shadow">
            <div className="flex justify-between items-start mb-3">
              <div>
                <h3 className="font-semibold text-lg">{short_link.entity_name}</h3>
                
                
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => {
                    setCurrentShort Link(short_link)
                    setShowEditModal(true)
                  }}
                  className="p-1 text-blue-600 hover:bg-blue-50 rounded"
                >
                  <Edit className="h-4 w-4" />
                </button>
                <button
                  onClick={() => {
                    setShort LinkToDelete(short_link)
                    setShowDeleteModal(true)
                  }}
                  className="p-1 text-red-600 hover:bg-red-50 rounded"
                >
                  <Trash2 className="h-4 w-4" />
                </button>
              </div>
            </div>
            
            {/* Dynamic fields display */}
            <div className="text-sm text-gray-600 mb-1">
              <span className="font-medium">Alias:</span>{' '}
              {short_link.alias || 'N/A'}
            </div>
            <div className="text-sm text-gray-600 mb-1">
              <span className="font-medium">Destination:</span>{' '}
              {short_link.destination || 'N/A'}
            </div>
            <div className="text-sm text-gray-600 mb-1">
              <span className="font-medium">Campaign Id:</span>{' '}
              {short_link.campaign_id || 'N/A'}
            </div>
            <div className="text-sm text-gray-600 mb-1">
              <span className="font-medium">Utm Params:</span>{' '}
              {short_link.utm_params || 'N/A'}
            </div>
            
            <div className="text-xs text-gray-400 mt-2 pt-2 border-t">
              Created: {short_link.created_at ? new Date(short_link.created_at).toLocaleDateString() : 'N/A'}
            </div>
          </MobileCard>
        )}
      />

      {/* Floating Action Button */}
      <button
        onClick={() => setShowAddModal(true)}
        className="fixed bottom-6 right-6 text-white rounded-full p-4 shadow-lg transition-colors z-50 hover:shadow-xl"
        style={{ backgroundColor: '#00bcf2' }}
      >
        <Plus className="h-6 w-6" />
      </button>

      {/* Enterprise Modals */}
      {showAddModal && (
        <Short LinkModal
          title="Add New Short Link"
          isOpen={showAddModal}
          onClose={() => setShowAddModal(false)}
          onSave={handleAddShort Link}
          dynamicFields={short_linkData.dynamicFieldsConfig || []}
          businessRules={{"click_tracking":true,"utm_attribution":true,"real_time_analytics":true,"audit_trail":true}}
        />
      )}

      {showEditModal && currentShort Link && (
        <Short LinkModal
          title="Edit Short Link"
          isOpen={showEditModal}
          onClose={() => {
            setShowEditModal(false)
            setCurrentShort Link(null)
          }}
          onSave={handleEditShort Link}
          initialData={currentShort Link}
          dynamicFields={short_linkData.dynamicFieldsConfig || []}
          businessRules={{"click_tracking":true,"utm_attribution":true,"real_time_analytics":true,"audit_trail":true}}
        />
      )}

      {showDeleteModal && short_linkToDelete && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <div className="flex items-center mb-4">
              <AlertCircle className="h-6 w-6 text-red-500 mr-2" />
              <h3 className="text-lg font-semibold">Delete Short Link</h3>
            </div>
            <p className="text-gray-600 mb-6">
              Are you sure you want to delete "{short_linkToDelete.entity_name}"? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => {
                  setShowDeleteModal(false)
                  setShort LinkToDelete(null)
                }}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteShort Link}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 flex items-center"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </MobilePageLayout>
  )
}

/**
 * Enterprise Short Link Modal Component
 * Enhanced with business rules and validation
 */
interface Short LinkModalProps {
  title: string
  isOpen: boolean
  onClose: () => void
  onSave: (data: any) => void
  initialData?: Short Link
  dynamicFields: any[]
  businessRules: any
}

function Short LinkModal({ 
  title, 
  isOpen, 
  onClose, 
  onSave, 
  initialData, 
  dynamicFields,
  businessRules 
}: Short LinkModalProps) {
  const [formData, setFormData] = useState(() => {
    const initial: any = { 
      entity_name: initialData?.entity_name || '' 
    }
    
    dynamicFields.forEach(field => {
      initial[field.name] = initialData?.[field.name as keyof Short Link] || (field.type === 'number' ? 0 : '')
    })
    
    return initial
  })

  const [errors, setErrors] = useState<Record<string, string>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)

  const validateForm = () => {
    const newErrors: Record<string, string> = {}
    
    // Validate required fields
    dynamicFields.forEach(field => {
      if (field.required && !formData[field.name]) {
        newErrors[field.name] = `${field.label || field.name} is required`
      }
    })
    
    // Entity name validation
    if (!formData.entity_name?.trim()) {
      newErrors.entity_name = 'Short Link name is required'
    }
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return
    
    setIsSubmitting(true)
    try {
      await onSave(formData)
    } catch (error) {
      console.error('Form submission error:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-semibold">{title}</h3>
            <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
              <X className="h-6 w-6" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            {/* Entity Name Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Short Link Name *
              </label>
              <input
                type="text"
                value={formData.entity_name}
                onChange={(e) => setFormData({ ...formData, entity_name: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.entity_name ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                required
                disabled={isSubmitting}
              />
              {errors.entity_name && (
                <p className="mt-1 text-sm text-red-600">{errors.entity_name}</p>
              )}
            </div>

            {/* Dynamic Fields with Enhanced Validation */}
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Alias 
              </label>
              <input
                type="text"
                value={formData.alias}
                onChange={(e) => setFormData({ ...formData, alias: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.alias ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                
                disabled={isSubmitting}
              />
              {errors.alias && (
                <p className="mt-1 text-sm text-red-600">{errors.alias}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Destination 
              </label>
              <input
                type="text"
                value={formData.destination}
                onChange={(e) => setFormData({ ...formData, destination: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.destination ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                
                disabled={isSubmitting}
              />
              {errors.destination && (
                <p className="mt-1 text-sm text-red-600">{errors.destination}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Campaign Id 
              </label>
              <input
                type="text"
                value={formData.campaign_id}
                onChange={(e) => setFormData({ ...formData, campaign_id: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.campaign_id ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                
                disabled={isSubmitting}
              />
              {errors.campaign_id && (
                <p className="mt-1 text-sm text-red-600">{errors.campaign_id}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Utm Params 
              </label>
              <input
                type="text"
                value={formData.utm_params}
                onChange={(e) => setFormData({ ...formData, utm_params: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.utm_params ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                
                disabled={isSubmitting}
              />
              {errors.utm_params && (
                <p className="mt-1 text-sm text-red-600">{errors.utm_params}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Clicks 
              </label>
              <input
                type="text"
                value={formData.clicks}
                onChange={(e) => setFormData({ ...formData, clicks: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.clicks ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                
                disabled={isSubmitting}
              />
              {errors.clicks && (
                <p className="mt-1 text-sm text-red-600">{errors.clicks}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Unique Clicks 
              </label>
              <input
                type="text"
                value={formData.unique_clicks}
                onChange={(e) => setFormData({ ...formData, unique_clicks: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.unique_clicks ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                
                disabled={isSubmitting}
              />
              {errors.unique_clicks && (
                <p className="mt-1 text-sm text-red-600">{errors.unique_clicks}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status 
              </label>
              <input
                type="text"
                value={formData.status}
                onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${errors.status ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`}
                
                disabled={isSubmitting}
              />
              {errors.status && (
                <p className="mt-1 text-sm text-red-600">{errors.status}</p>
              )}
            </div>

            {/* Business Rules Info */}
            

            {/* Form Actions */}
            <div className="flex justify-end space-x-3 pt-4 border-t">
              <button
                type="button"
                onClick={onClose}
                disabled={isSubmitting}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 text-white rounded-md hover:opacity-90 flex items-center disabled:opacity-50"
                style={{ backgroundColor: '#00bcf2' }}
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    Save
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}