'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Package, TrendingUp, TrendingDown, DollarSign, 
  Calendar, Clock, AlertCircle, CheckCircle,
  Building, Car, Laptop, Factory, Wrench,
  Search, Filter, Plus, Upload, Download,
  Eye, Edit, X, ChevronRight, MapPin,
  BarChart3, PieChart, Activity, Settings,
  Bot, Sparkles, Zap, Brain, RefreshCw,
  Shield, Star, AlertTriangle, Target,
  Timer, Award, Truck, Calculator,
  FileText, Clipboard, Camera, QrCode
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Textarea } from '@/components/ui/textarea'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Progress } from '@/components/ui/progress'
import { motion } from 'framer-motion'
import { universalApi } from '@/lib/universal-api'

interface FixedAsset {
  id: string
  asset_number: string
  asset_name: string
  category: 'building' | 'vehicle' | 'equipment' | 'technology' | 'furniture' | 'other'
  description: string
  location: string
  department: string
  purchase_date: Date
  purchase_price: number
  current_value: number
  depreciation_method: 'straight_line' | 'declining_balance' | 'sum_of_years' | 'units_of_production'
  useful_life_years: number
  salvage_value: number
  accumulated_depreciation: number
  monthly_depreciation: number
  status: 'active' | 'disposed' | 'under_maintenance' | 'retired'
  condition: 'excellent' | 'good' | 'fair' | 'poor'
  last_maintenance_date: Date
  next_maintenance_due: Date
  replacement_cost: number
  ai_insights: AIInsight[]
}

interface AIInsight {
  type: 'depreciation_forecast' | 'maintenance_prediction' | 'replacement_recommendation' | 'cost_optimization' | 'compliance_alert'
  message: string
  confidence: number
  priority: 'low' | 'medium' | 'high' | 'urgent'
  financial_impact?: number
  recommended_action?: string
  timeline?: string
}

interface MaintenanceRecord {
  id: string
  asset_id: string
  date: Date
  type: 'scheduled' | 'repair' | 'upgrade' | 'inspection'
  description: string
  cost: number
  vendor: string
  next_service_date?: Date
  downtime_hours: number
}

interface DepreciationSchedule {
  year: number
  opening_value: number
  depreciation_amount: number
  accumulated_depreciation: number
  closing_value: number
}

export default function FixedAssetsPage() {

  // CRUD Operations - Auto-generated by Universal CRUD Fixer
  const loadData = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/v1/${modulePath}?action=list&organization_id=${organizationId}`);
      const result = await response.json();
      
      if (result.success) {
        setData(result.data);
      } else {
        console.error('Failed to load data:', result.error);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async (formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'create',
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Create error:', error);
      throw error;
    }
  };

  const handleUpdate = async (id: string, formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id,
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Update error:', error);
      throw error;
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}?id=${id}&organization_id=${organizationId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Delete error:', error);
      throw error;
    }
  };

  // Auto-load data on component mount
  useEffect(() => {
    if (organizationId) {
      loadData();
    }
  }, [organizationId]);

  const router = useRouter()
  const [activeTab, setActiveTab] = useState('assets')
  const [assets, setAssets] = useState<FixedAsset[]>([])
  const [maintenance, setMaintenance] = useState<MaintenanceRecord[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterCategory, setFilterCategory] = useState('all')
  const [filterStatus, setFilterStatus] = useState('all')
  const [showAIAssistant, setShowAIAssistant] = useState(false)
  const [aiPrompt, setAiPrompt] = useState('')
  const [selectedAsset, setSelectedAsset] = useState<FixedAsset | null>(null)

  // Mock data with AI insights
  const mockAssets: FixedAsset[] = [
    {
      id: 'FA001',
      asset_number: 'BLDG-001',
      asset_name: 'Main Office Building',
      category: 'building',
      description: '10,000 sq ft office building with parking',
      location: 'New York, NY',
      department: 'Corporate',
      purchase_date: new Date('2018-01-15'),
      purchase_price: 2500000,
      current_value: 2100000,
      depreciation_method: 'straight_line',
      useful_life_years: 40,
      salvage_value: 500000,
      accumulated_depreciation: 400000,
      monthly_depreciation: 4167,
      status: 'active',
      condition: 'good',
      last_maintenance_date: new Date('2024-08-15'),
      next_maintenance_due: new Date('2025-02-15'),
      replacement_cost: 3200000,
      ai_insights: [
        {
          type: 'depreciation_forecast',
          message: 'Building will depreciate to 75% of current value by 2027. Consider energy efficiency upgrades to maintain value.',
          confidence: 89,
          priority: 'medium',
          financial_impact: 350000,
          recommended_action: 'Schedule energy audit and HVAC upgrades',
          timeline: '6 months'
        },
        {
          type: 'maintenance_prediction',
          message: 'HVAC system showing early wear patterns. Preventive maintenance recommended within 90 days.',
          confidence: 82,
          priority: 'high',
          financial_impact: 45000,
          recommended_action: 'Schedule HVAC inspection and filter replacement',
          timeline: '90 days'
        }
      ]
    },
    {
      id: 'FA002',
      asset_number: 'VEH-001',
      asset_name: 'Delivery Truck Fleet (5 units)',
      category: 'vehicle',
      description: 'Ford Transit delivery trucks for logistics',
      location: 'Warehouse A',
      department: 'Operations',
      purchase_date: new Date('2022-03-20'),
      purchase_price: 250000,
      current_value: 175000,
      depreciation_method: 'declining_balance',
      useful_life_years: 8,
      salvage_value: 25000,
      accumulated_depreciation: 75000,
      monthly_depreciation: 2800,
      status: 'active',
      condition: 'good',
      last_maintenance_date: new Date('2024-11-01'),
      next_maintenance_due: new Date('2025-02-01'),
      replacement_cost: 320000,
      ai_insights: [
        {
          type: 'replacement_recommendation',
          message: 'Fleet utilization at 87% - optimal time to expand. Electric alternatives could reduce operating costs by 35%.',
          confidence: 91,
          priority: 'medium',
          financial_impact: 28000,
          recommended_action: 'Evaluate electric vehicle options and government incentives',
          timeline: '12 months'
        },
        {
          type: 'cost_optimization',
          message: 'Maintenance costs trending 23% above industry average. Consider switching to certified fleet service.',
          confidence: 86,
          priority: 'medium',
          financial_impact: 12000,
          recommended_action: 'Request quotes from certified fleet maintenance providers',
          timeline: '30 days'
        }
      ]
    },
    {
      id: 'FA003',
      asset_number: 'TECH-001',
      asset_name: 'Server Infrastructure',
      category: 'technology',
      description: 'Dell PowerEdge servers and network equipment',
      location: 'Data Center',
      department: 'IT',
      purchase_date: new Date('2021-06-10'),
      purchase_price: 150000,
      current_value: 75000,
      depreciation_method: 'straight_line',
      useful_life_years: 5,
      salvage_value: 15000,
      accumulated_depreciation: 75000,
      monthly_depreciation: 2250,
      status: 'active',
      condition: 'fair',
      last_maintenance_date: new Date('2024-10-15'),
      next_maintenance_due: new Date('2025-01-15'),
      replacement_cost: 200000,
      ai_insights: [
        {
          type: 'replacement_recommendation',
          message: 'URGENT: Servers at 68% of useful life with declining performance. Cloud migration could reduce costs by 40%.',
          confidence: 94,
          priority: 'urgent',
          financial_impact: 80000,
          recommended_action: 'Immediate cloud migration assessment and timeline planning',
          timeline: 'Immediate'
        },
        {
          type: 'compliance_alert',
          message: 'Hardware approaching end-of-support. Security compliance risk identified for SOC 2 certification.',
          confidence: 96,
          priority: 'high',
          recommended_action: 'Schedule compliance review and upgrade planning',
          timeline: '60 days'
        }
      ]
    },
    {
      id: 'FA004',
      asset_number: 'EQP-001',
      asset_name: 'Manufacturing Equipment',
      category: 'equipment',
      description: 'CNC machines and assembly line equipment',
      location: 'Factory Floor',
      department: 'Manufacturing',
      purchase_date: new Date('2019-09-01'),
      purchase_price: 800000,
      current_value: 480000,
      depreciation_method: 'units_of_production',
      useful_life_years: 15,
      salvage_value: 80000,
      accumulated_depreciation: 320000,
      monthly_depreciation: 4000,
      status: 'active',
      condition: 'good',
      last_maintenance_date: new Date('2024-11-20'),
      next_maintenance_due: new Date('2025-05-20'),
      replacement_cost: 1200000,
      ai_insights: [
        {
          type: 'maintenance_prediction',
          message: 'Predictive analytics indicate optimal maintenance window in Q2 2025 to avoid peak production period.',
          confidence: 88,
          priority: 'medium',
          financial_impact: 25000,
          recommended_action: 'Schedule major maintenance for Q2 2025 during planned downtime',
          timeline: '6 months'
        },
        {
          type: 'cost_optimization',
          message: 'Equipment efficiency at 91% - above industry average. Continue current maintenance program.',
          confidence: 93,
          priority: 'low',
          recommended_action: 'Maintain current preventive maintenance schedule',
          timeline: 'Ongoing'
        }
      ]
    }
  ]

  const mockMaintenance: MaintenanceRecord[] = [
    {
      id: 'MAINT001',
      asset_id: 'FA001',
      date: new Date('2024-08-15'),
      type: 'scheduled',
      description: 'HVAC filter replacement and system inspection',
      cost: 2500,
      vendor: 'HVAC Pro Services',
      next_service_date: new Date('2025-02-15'),
      downtime_hours: 4
    },
    {
      id: 'MAINT002',
      asset_id: 'FA002',
      date: new Date('2024-11-01'),
      type: 'scheduled',
      description: 'Fleet maintenance - oil change and safety inspection',
      cost: 1200,
      vendor: 'Fleet Solutions Inc',
      next_service_date: new Date('2025-02-01'),
      downtime_hours: 16
    },
    {
      id: 'MAINT003',
      asset_id: 'FA003',
      date: new Date('2024-10-15'),
      type: 'repair',
      description: 'Server cooling system repair and firmware update',
      cost: 5500,
      vendor: 'Dell Enterprise Services',
      downtime_hours: 8
    }
  ]

  useEffect(() => {
    loadSampleData()
  }, [])

  const loadSampleData = async () => {
    setLoading(true)
    try {
      setAssets(mockAssets)
      setMaintenance(mockMaintenance)
    } catch (error) {
      console.error('Error loading fixed assets data:', error)
    } finally {
      setLoading(false)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-700'
      case 'under_maintenance':
        return 'bg-yellow-100 text-yellow-700'
      case 'disposed':
      case 'retired':
        return 'bg-gray-100 text-gray-700'
      default:
        return 'bg-blue-100 text-blue-700'
    }
  }

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case 'excellent':
        return 'bg-green-100 text-green-700'
      case 'good':
        return 'bg-blue-100 text-blue-700'
      case 'fair':
        return 'bg-yellow-100 text-yellow-700'
      case 'poor':
        return 'bg-red-100 text-red-700'
      default:
        return 'bg-gray-100 text-gray-700'
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent':
        return 'bg-red-500 text-white'
      case 'high':
        return 'bg-orange-100 text-orange-700'
      case 'medium':
        return 'bg-yellow-100 text-yellow-700'
      case 'low':
        return 'bg-green-100 text-green-700'
      default:
        return 'bg-gray-100 text-gray-700'
    }
  }

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'building':
        return <Building className="w-5 h-5" />
      case 'vehicle':
        return <Car className="w-5 h-5" />
      case 'technology':
        return <Laptop className="w-5 h-5" />
      case 'equipment':
        return <Factory className="w-5 h-5" />
      default:
        return <Package className="w-5 h-5" />
    }
  }

  const calculateAssetMetrics = () => {
    const totalAssetValue = assets.reduce((sum, asset) => sum + asset.current_value, 0)
    const totalDepreciation = assets.reduce((sum, asset) => sum + asset.accumulated_depreciation, 0)
    const monthlyDepreciation = assets.reduce((sum, asset) => sum + asset.monthly_depreciation, 0)
    const maintenanceDue = assets.filter(asset => 
      new Date(asset.next_maintenance_due) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
    ).length

    return { totalAssetValue, totalDepreciation, monthlyDepreciation, maintenanceDue }
  }

  const generateDepreciationForecast = (asset: FixedAsset): DepreciationSchedule[] => {
    const forecast: DepreciationSchedule[] = []
    const currentYear = new Date().getFullYear()
    let currentValue = asset.current_value
    
    for (let i = 0; i < 5; i++) {
      const year = currentYear + i
      const depreciation = asset.monthly_depreciation * 12
      const openingValue = currentValue
      const closingValue = Math.max(openingValue - depreciation, asset.salvage_value)
      
      forecast.push({
        year,
        opening_value: openingValue,
        depreciation_amount: depreciation,
        accumulated_depreciation: asset.accumulated_depreciation + (depreciation * (i + 1)),
        closing_value: closingValue
      })
      
      currentValue = closingValue
    }
    
    return forecast
  }

  const generateAIInsights = () => {
    const totalPotentialSavings = assets.reduce((sum, asset) => 
      sum + (asset.ai_insights.reduce((aSum, insight) => 
        aSum + (insight.financial_impact || 0), 0)), 0)
    
    const urgentReplacements = assets.filter(asset => 
      asset.ai_insights.some(insight => 
        insight.type === 'replacement_recommendation' && insight.priority === 'urgent'
      )).length

    const maintenanceAlerts = assets.filter(asset =>
      asset.ai_insights.some(insight => 
        insight.type === 'maintenance_prediction' && ['high', 'urgent'].includes(insight.priority)
      )).length

    return [
      {
        title: 'Critical Asset Replacement',
        message: `${urgentReplacements} assets require immediate attention. Server infrastructure at 68% useful life with security risks.`,
        type: 'urgent',
        confidence: 94,
        action: 'Schedule immediate replacement assessment',
        financial_impact: 200000
      },
      {
        title: 'Maintenance Optimization',
        message: `${maintenanceAlerts} assets have predictive maintenance alerts. Proactive maintenance could save ${formatCurrency(45000)} annually.`,
        type: 'optimization',
        confidence: 89,
        action: 'Implement predictive maintenance program',
        financial_impact: 45000
      },
      {
        title: 'Depreciation Optimization',
        message: `Portfolio-wide depreciation forecast shows ${formatCurrency(totalPotentialSavings)} in optimization opportunities.`,
        type: 'forecast',
        confidence: 87,
        action: 'Review depreciation methods and asset utilization',
        financial_impact: totalPotentialSavings
      },
      {
        title: 'Compliance & Risk Management',
        message: 'Technology assets approaching end-of-support. SOC 2 compliance at risk without immediate action.',
        type: 'compliance',
        confidence: 96,
        action: 'Schedule compliance audit and upgrade planning',
        financial_impact: 50000
      }
    ]
  }

  const metrics = calculateAssetMetrics()
  const aiInsights = generateAIInsights()

  
  // Form Handling - Auto-generated by Universal CRUD Fixer
  const [formData, setFormData] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      if (selectedItem?.id) {
        await handleUpdate(selectedItem.id, formData);
      } else {
        await handleCreate(formData);
      }
      
      setFormData({});
      setSelectedItem(null);
      setShowDialog(false);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      <div className="container mx-auto p-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Fixed Assets Management
              </h1>
              <p className="mt-2 text-gray-600">
                AI-powered asset lifecycle management with predictive insights
              </p>
            </div>
            <div className="flex items-center gap-4">
              <Dialog open={showAIAssistant} onOpenChange={setShowAIAssistant}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="border-purple-200 hover:bg-purple-50">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Asset Intelligence
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-3xl">
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      AI Asset Management Assistant
                    </DialogTitle>
                    <DialogDescription>
                      Get AI-powered insights for asset optimization, maintenance planning, and replacement strategies
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 mt-4">
                    <Textarea
                      placeholder="Examples:
• Which assets should I prioritize for replacement?
• Predict maintenance costs for next quarter
• Optimize depreciation methods for tax benefits
• Assess compliance risks across technology assets
• Forecast asset values for insurance purposes"
                      value={aiPrompt}
                      onChange={(e) => setAiPrompt(e.target.value)}
                      className="min-h-[120px]"
                    />
                    <Button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white">
                      <Brain className="w-4 h-4 mr-2" />
                      Get AI Asset Analysis
                    </Button>
                    
                    {/* Live AI Insights Preview */}
                    <div className="border-t pt-4">
                      <h4 className="font-semibold mb-3 flex items-center gap-2">
                        <Sparkles className="w-4 h-4 text-purple-600" />
                        Live AI Asset Intelligence
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {aiInsights.slice(0, 4).map((insight, index) => (
                          <div key={index} className="p-3 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-100">
                            <div className="flex items-start justify-between mb-2">
                              <div className="flex items-center gap-2">
                                {insight.type === 'urgent' && <AlertTriangle className="w-3 h-3 text-red-600" />}
                                {insight.type === 'optimization' && <Target className="w-3 h-3 text-green-600" />}
                                {insight.type === 'forecast' && <TrendingUp className="w-3 h-3 text-blue-600" />}
                                {insight.type === 'compliance' && <Shield className="w-3 h-3 text-orange-600" />}
                                <p className="font-medium text-sm text-purple-900">{insight.title}</p>
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {insight.confidence}%
                              </Badge>
                            </div>
                            <p className="text-xs text-purple-700 mb-2">{insight.message}</p>
                            <div className="flex items-center justify-between">
                              <p className="text-xs text-purple-600 font-medium">{insight.action}</p>
                              {insight.financial_impact && (
                                <p className="text-xs font-medium text-green-600">
                                  {formatCurrency(insight.financial_impact)}
                                </p>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg">
                <Plus className="w-4 h-4 mr-2" />
                Add Asset
              </Button>
            </div>
          </div>
        </div>

        {/* AI Insights Banner */}
        <Alert className="mb-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
          <Brain className="h-4 w-4 text-purple-600" />
          <AlertTitle>AI Asset Intelligence Active</AlertTitle>
          <AlertDescription>
            <div className="flex items-center justify-between">
              <span>
                AI identified 1 critical replacement, {metrics.maintenanceDue} maintenance alerts, and {formatCurrency(475000)} in optimization opportunities 
                across your {assets.length}-asset portfolio.
              </span>
              <Button size="sm" variant="outline" className="border-purple-300" onClick={() => setShowAIAssistant(true)}>
                <Sparkles className="w-4 h-4 mr-1" />
                View Full Analysis
              </Button>
            </div>
          </AlertDescription>
        </Alert>

        {/* Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Asset Value</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {formatCurrency(metrics.totalAssetValue)}
                  </p>
                  <p className="text-xs text-blue-600 mt-1">Current book value</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <DollarSign className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Depreciation</p>
                  <p className="text-2xl font-bold text-orange-600">
                    {formatCurrency(metrics.totalDepreciation)}
                  </p>
                  <p className="text-xs text-orange-600 mt-1">Accumulated</p>
                </div>
                <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                  <TrendingDown className="w-6 h-6 text-orange-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Monthly Depreciation</p>
                  <p className="text-2xl font-bold text-purple-600">
                    {formatCurrency(metrics.monthlyDepreciation)}
                  </p>
                  <p className="text-xs text-purple-600 mt-1">Current rate</p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <Calculator className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Maintenance Due</p>
                  <p className="text-2xl font-bold text-yellow-600">
                    {metrics.maintenanceDue}
                  </p>
                  <p className="text-xs text-yellow-600 mt-1">Next 30 days</p>
                </div>
                <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <Wrench className="w-6 h-6 text-yellow-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid grid-cols-6 w-full max-w-4xl">
            <TabsTrigger value="assets">Assets</TabsTrigger>
            <TabsTrigger value="depreciation">Depreciation</TabsTrigger>
            <TabsTrigger value="maintenance">Maintenance</TabsTrigger>
            <TabsTrigger value="ai-insights">AI Insights</TabsTrigger>
            <TabsTrigger value="compliance">Compliance</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
          </TabsList>

          {/* Assets Tab */}
          <TabsContent value="assets" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        placeholder="Search assets..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <Select value={filterCategory} onValueChange={setFilterCategory}>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Categories</SelectItem>
                      <SelectItem value="building">Buildings</SelectItem>
                      <SelectItem value="vehicle">Vehicles</SelectItem>
                      <SelectItem value="technology">Technology</SelectItem>
                      <SelectItem value="equipment">Equipment</SelectItem>
                      <SelectItem value="furniture">Furniture</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="active">Active</SelectItem>
                      <SelectItem value="under_maintenance">Under Maintenance</SelectItem>
                      <SelectItem value="retired">Retired</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline" className="border-purple-200">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Sort
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Assets List */}
            <div className="space-y-4">
              {assets.map((asset) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white border rounded-lg p-6 hover:shadow-lg transition-shadow"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        {getCategoryIcon(asset.category)}
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">{asset.asset_name}</h3>
                        <p className="text-sm text-gray-600">{asset.asset_number} • {asset.description}</p>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={getStatusColor(asset.status)}>
                            {asset.status.toUpperCase().replace('_', ' ')}
                          </Badge>
                          <Badge className={getConditionColor(asset.condition)}>
                            {asset.condition.toUpperCase()}
                          </Badge>
                          <span className="text-xs text-gray-500">
                            <MapPin className="w-3 h-3 inline mr-1" />
                            {asset.location}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-2xl font-bold text-gray-900">
                        {formatCurrency(asset.current_value)}
                      </p>
                      <p className="text-sm text-gray-600">Current Value</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-4 text-sm">
                    <div>
                      <span className="text-gray-500">Purchase Price:</span>
                      <p className="font-medium">{formatCurrency(asset.purchase_price)}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Monthly Depreciation:</span>
                      <p className="font-medium text-orange-600">{formatCurrency(asset.monthly_depreciation)}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Useful Life:</span>
                      <p className="font-medium">{asset.useful_life_years} years</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Next Maintenance:</span>
                      <p className="font-medium">{asset.next_maintenance_due.toLocaleDateString()}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Replacement Cost:</span>
                      <p className="font-medium text-blue-600">{formatCurrency(asset.replacement_cost)}</p>
                    </div>
                  </div>

                  {/* Progress Bar for Depreciation */}
                  <div className="mb-4">
                    <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
                      <span>Asset Lifecycle</span>
                      <span>
                        {Math.round((asset.accumulated_depreciation / (asset.purchase_price - asset.salvage_value)) * 100)}% depreciated
                      </span>
                    </div>
                    <Progress 
                      value={(asset.accumulated_depreciation / (asset.purchase_price - asset.salvage_value)) * 100} 
                      className="h-2"
                    />
                  </div>

                  {/* AI Insights */}
                  {asset.ai_insights.length > 0 && (
                    <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-4 border border-purple-100">
                      <div className="flex items-center gap-2 mb-3">
                        <Brain className="w-4 h-4 text-purple-600" />
                        <span className="text-sm font-medium text-purple-900">AI Asset Intelligence</span>
                      </div>
                      <div className="space-y-3">
                        {asset.ai_insights.map((insight, index) => (
                          <div key={index} className="flex items-start gap-3">
                            <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                              {insight.type === 'depreciation_forecast' && <TrendingDown className="w-3 h-3 text-purple-600" />}
                              {insight.type === 'maintenance_prediction' && <Wrench className="w-3 h-3 text-blue-600" />}
                              {insight.type === 'replacement_recommendation' && <RefreshCw className="w-3 h-3 text-orange-600" />}
                              {insight.type === 'cost_optimization' && <Target className="w-3 h-3 text-green-600" />}
                              {insight.type === 'compliance_alert' && <Shield className="w-3 h-3 text-red-600" />}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-start justify-between mb-1">
                                <p className="text-sm text-purple-800">{insight.message}</p>
                                <Badge className={`text-xs ${getPriorityColor(insight.priority)}`}>
                                  {insight.priority.toUpperCase()}
                                </Badge>
                              </div>
                              <div className="flex items-center justify-between">
                                <p className="text-xs text-purple-600">{insight.recommended_action}</p>
                                {insight.financial_impact && (
                                  <p className="text-xs font-medium text-green-600">
                                    Impact: {formatCurrency(insight.financial_impact)}
                                  </p>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="flex items-center justify-between mt-4 pt-4 border-t">
                    <div className="flex items-center gap-4 text-sm text-gray-600">
                      <span>Purchased: {asset.purchase_date.toLocaleDateString()}</span>
                      <span>•</span>
                      <span>Department: {asset.department}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="ghost" size="sm" onClick={() => setSelectedAsset(asset)}>
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <ChevronRight className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </TabsContent>

          {/* Depreciation Tab */}
          <TabsContent value="depreciation" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calculator className="w-5 h-5" />
                  Depreciation Forecast & Analysis
                </CardTitle>
                <CardDescription>AI-powered depreciation projections and optimization recommendations</CardDescription>
              </CardHeader>
              <CardContent>
                {selectedAsset ? (
                  <div>
                    <h3 className="text-lg font-semibold mb-4">{selectedAsset.asset_name} - 5 Year Forecast</h3>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Year</TableHead>
                          <TableHead>Opening Value</TableHead>
                          <TableHead>Depreciation</TableHead>
                          <TableHead>Accumulated</TableHead>
                          <TableHead>Closing Value</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {generateDepreciationForecast(selectedAsset).map((row, index) => (
                          <TableRow key={index}>
                            <TableCell>{row.year}</TableCell>
                            <TableCell>{formatCurrency(row.opening_value)}</TableCell>
                            <TableCell>{formatCurrency(row.depreciation_amount)}</TableCell>
                            <TableCell>{formatCurrency(row.accumulated_depreciation)}</TableCell>
                            <TableCell>{formatCurrency(row.closing_value)}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Calculator className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600 mb-4">Select an asset to view depreciation forecast</p>
                    <p className="text-sm text-gray-500">Click on any asset from the Assets tab to see detailed depreciation analysis</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Maintenance Tab */}
          <TabsContent value="maintenance" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Wrench className="w-5 h-5" />
                  Maintenance Schedule & History
                </CardTitle>
                <CardDescription>Predictive maintenance with AI-powered scheduling</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {maintenance.map((record) => (
                    <div key={record.id} className="border rounded-lg p-4">
                      <div className="flex items-start justify-between mb-3">
                        <div>
                          <h4 className="font-semibold">
                            {assets.find(a => a.id === record.asset_id)?.asset_name}
                          </h4>
                          <p className="text-sm text-gray-600">{record.description}</p>
                        </div>
                        <Badge className={getStatusColor(record.type)}>
                          {record.type.toUpperCase()}
                        </Badge>
                      </div>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <span className="text-gray-500">Date:</span>
                          <p className="font-medium">{record.date.toLocaleDateString()}</p>
                        </div>
                        <div>
                          <span className="text-gray-500">Cost:</span>
                          <p className="font-medium">{formatCurrency(record.cost)}</p>
                        </div>
                        <div>
                          <span className="text-gray-500">Vendor:</span>
                          <p className="font-medium">{record.vendor}</p>
                        </div>
                        <div>
                          <span className="text-gray-500">Downtime:</span>
                          <p className="font-medium">{record.downtime_hours}h</p>
                        </div>
                      </div>
                      {record.next_service_date && (
                        <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                          <p className="text-sm text-blue-700">
                            <Clock className="w-4 h-4 inline mr-1" />
                            Next service due: {record.next_service_date.toLocaleDateString()}
                          </p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Insights Tab */}
          <TabsContent value="ai-insights" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {aiInsights.map((insight, index) => (
                <Card key={index} className="border-purple-200 hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        insight.type === 'urgent' ? 'bg-red-100' :
                        insight.type === 'optimization' ? 'bg-green-100' :
                        insight.type === 'forecast' ? 'bg-blue-100' :
                        'bg-orange-100'
                      }`}>
                        {insight.type === 'urgent' && <AlertTriangle className="w-4 h-4 text-red-600" />}
                        {insight.type === 'optimization' && <Target className="w-4 h-4 text-green-600" />}
                        {insight.type === 'forecast' && <TrendingUp className="w-4 h-4 text-blue-600" />}
                        {insight.type === 'compliance' && <Shield className="w-4 h-4 text-orange-600" />}
                      </div>
                      {insight.title}
                    </CardTitle>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline">{insight.confidence}% confidence</Badge>
                      {insight.financial_impact && (
                        <Badge className="bg-green-100 text-green-700">
                          {formatCurrency(insight.financial_impact)} impact
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-700 mb-4">{insight.message}</p>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-900 mb-1">Recommended Action:</p>
                      <p className="text-sm text-gray-600">{insight.action}</p>
                    </div>
                    <Button className="w-full mt-4" variant="outline">
                      <Zap className="w-4 h-4 mr-2" />
                      Implement Strategy
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Compliance Tab */}
          <TabsContent value="compliance" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="w-5 h-5" />
                  Compliance & Risk Management
                </CardTitle>
                <CardDescription>Asset compliance monitoring and risk assessment</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card className="border-green-200">
                    <CardContent className="p-4">
                      <div className="flex items-center gap-3">
                        <CheckCircle className="w-8 h-8 text-green-600" />
                        <div>
                          <p className="font-semibold text-green-900">Compliant Assets</p>
                          <p className="text-2xl font-bold text-green-600">
                            {assets.filter(a => a.condition !== 'poor').length}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="border-yellow-200">
                    <CardContent className="p-4">
                      <div className="flex items-center gap-3">
                        <AlertTriangle className="w-8 h-8 text-yellow-600" />
                        <div>
                          <p className="font-semibold text-yellow-900">Needs Review</p>
                          <p className="text-2xl font-bold text-yellow-600">
                            {assets.filter(a => a.ai_insights.some(i => i.type === 'compliance_alert')).length}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="border-red-200">
                    <CardContent className="p-4">
                      <div className="flex items-center gap-3">
                        <X className="w-8 h-8 text-red-600" />
                        <div>
                          <p className="font-semibold text-red-900">Non-Compliant</p>
                          <p className="text-2xl font-bold text-red-600">
                            {assets.filter(a => a.condition === 'poor').length}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Reports Tab */}
          <TabsContent value="reports" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="w-5 h-5" />
                    Asset Valuation Report
                  </CardTitle>
                  <CardDescription>Current and projected asset values</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Current Portfolio Value</span>
                      <span className="font-medium">{formatCurrency(metrics.totalAssetValue)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Annual Depreciation</span>
                      <span className="font-medium text-red-600">{formatCurrency(metrics.monthlyDepreciation * 12)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Replacement Cost</span>
                      <span className="font-medium text-blue-600">
                        {formatCurrency(assets.reduce((sum, a) => sum + a.replacement_cost, 0))}
                      </span>
                    </div>
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    <FileText className="w-4 h-4 mr-2" />
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="w-5 h-5" />
                    Asset Category Analysis
                  </CardTitle>
                  <CardDescription>Portfolio breakdown by category</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-48 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center mb-4">
                    <p className="text-gray-500">Asset distribution chart</p>
                  </div>
                  <Button className="w-full" variant="outline">
                    <Activity className="w-4 h-4 mr-2" />
                    View Analysis
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}