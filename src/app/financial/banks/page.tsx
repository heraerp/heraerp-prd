'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Landmark, TrendingUp, TrendingDown, DollarSign, 
  Calendar, Clock, AlertCircle, CheckCircle,
  CreditCard, Banknote, ArrowUpRight, ArrowDownLeft,
  Search, Filter, Plus, Upload, Download,
  Eye, Edit, X, ChevronRight, Globe,
  BarChart3, PieChart, Activity, Settings,
  Bot, Sparkles, Zap, Brain, RefreshCw,
  Shield, Star, AlertTriangle, Target,
  Timer, Award, Truck, Calculator,
  FileText, Clipboard, Camera, QrCode,
  Building2, Users, Phone, Mail, MapPin
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Textarea } from '@/components/ui/textarea'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Progress } from '@/components/ui/progress'
import { motion } from 'framer-motion'
import { universalApi } from '@/lib/universal-api'

interface BankAccount {
  id: string
  account_number: string
  account_name: string
  bank_name: string
  bank_code: string
  account_type: 'checking' | 'savings' | 'money_market' | 'cd' | 'credit_line' | 'foreign_currency'
  currency: string
  current_balance: number
  available_balance: number
  last_reconciled: Date
  interest_rate: number
  monthly_fee: number
  minimum_balance: number
  overdraft_limit: number
  status: 'active' | 'inactive' | 'frozen' | 'closed'
  primary_contact: string
  relationship_manager: string
  swift_code?: string
  iban?: string
  routing_number?: string
  ai_insights: AIInsight[]
}

interface BankTransaction {
  id: string
  account_id: string
  transaction_date: Date
  description: string
  reference_number: string
  debit_amount: number
  credit_amount: number
  running_balance: number
  transaction_type: 'deposit' | 'withdrawal' | 'transfer' | 'fee' | 'interest' | 'wire' | 'ach'
  status: 'posted' | 'pending' | 'reversed' | 'failed'
  counterparty: string
  category: string
  reconciled: boolean
  fraud_score: number
  ai_insights: AIInsight[]
}

interface AIInsight {
  type: 'cash_flow_forecast' | 'fee_optimization' | 'fraud_detection' | 'relationship_optimization' | 'currency_risk' | 'liquidity_management'
  message: string
  confidence: number
  priority: 'low' | 'medium' | 'high' | 'urgent'
  financial_impact?: number
  recommended_action?: string
  timeline?: string
}

interface CashFlowForecast {
  date: Date
  opening_balance: number
  projected_inflows: number
  projected_outflows: number
  net_flow: number
  closing_balance: number
  confidence_level: number
}

export default function BankingPage() {

  // CRUD Operations - Auto-generated by Universal CRUD Fixer
  const loadData = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/v1/${modulePath}?action=list&organization_id=${organizationId}`);
      const result = await response.json();
      
      if (result.success) {
        setData(result.data);
      } else {
        console.error('Failed to load data:', result.error);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async (formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'create',
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Create error:', error);
      throw error;
    }
  };

  const handleUpdate = async (id: string, formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id,
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Update error:', error);
      throw error;
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}?id=${id}&organization_id=${organizationId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Delete error:', error);
      throw error;
    }
  };

  // Auto-load data on component mount
  useEffect(() => {
    if (organizationId) {
      loadData();
    }
  }, [organizationId]);

  const router = useRouter()
  const [activeTab, setActiveTab] = useState('accounts')
  const [accounts, setAccounts] = useState<BankAccount[]>([])
  const [transactions, setTransactions] = useState<BankTransaction[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterAccount, setFilterAccount] = useState('all')
  const [filterType, setFilterType] = useState('all')
  const [showAIAssistant, setShowAIAssistant] = useState(false)
  const [aiPrompt, setAiPrompt] = useState('')
  const [selectedAccount, setSelectedAccount] = useState<BankAccount | null>(null)

  // Mock data with AI insights
  const mockAccounts: BankAccount[] = [
    {
      id: 'BANK001',
      account_number: '****1234',
      account_name: 'Primary Operating Account',
      bank_name: 'Chase Business Banking',
      bank_code: 'CHAS',
      account_type: 'checking',
      currency: 'USD',
      current_balance: 485000,
      available_balance: 475000,
      last_reconciled: new Date('2024-12-14'),
      interest_rate: 0.5,
      monthly_fee: 25,
      minimum_balance: 10000,
      overdraft_limit: 50000,
      status: 'active',
      primary_contact: 'Sarah Johnson',
      relationship_manager: 'Mike Chen',
      routing_number: '021000021',
      ai_insights: [
        {
          type: 'cash_flow_forecast',
          message: 'Based on historical patterns, account will experience $125K outflow next week. Maintain minimum $200K buffer.',
          confidence: 91,
          priority: 'medium',
          financial_impact: 125000,
          recommended_action: 'Schedule accounts receivable collections and review large payments',
          timeline: '7 days'
        },
        {
          type: 'fee_optimization',
          message: 'Average daily balance qualifies for premium tier. Upgrade could save $300/month in fees.',
          confidence: 88,
          priority: 'medium',
          financial_impact: 3600,
          recommended_action: 'Contact relationship manager to discuss account tier upgrade',
          timeline: '30 days'
        }
      ]
    },
    {
      id: 'BANK002',
      account_number: '****5678',
      account_name: 'High-Yield Savings',
      bank_name: 'Goldman Sachs Bank',
      bank_code: 'GSAM',
      account_type: 'savings',
      currency: 'USD',
      current_balance: 750000,
      available_balance: 750000,
      last_reconciled: new Date('2024-12-14'),
      interest_rate: 4.25,
      monthly_fee: 0,
      minimum_balance: 100000,
      overdraft_limit: 0,
      status: 'active',
      primary_contact: 'Jennifer Lee',
      relationship_manager: 'David Park',
      ai_insights: [
        {
          type: 'liquidity_management',
          message: 'Cash reserves at 45% of total liquidity. Consider laddered CDs for $200K to optimize returns.',
          confidence: 89,
          priority: 'low',
          financial_impact: 8500,
          recommended_action: 'Evaluate 6-12 month CD ladder strategy with current rates',
          timeline: '60 days'
        }
      ]
    },
    {
      id: 'BANK003',
      account_number: '****9012',
      account_name: 'Euro Operations Account',
      bank_name: 'Deutsche Bank',
      bank_code: 'DEUT',
      account_type: 'foreign_currency',
      currency: 'EUR',
      current_balance: 125000,
      available_balance: 120000,
      last_reconciled: new Date('2024-12-13'),
      interest_rate: 2.1,
      monthly_fee: 75,
      minimum_balance: 25000,
      overdraft_limit: 15000,
      status: 'active',
      primary_contact: 'Klaus Mueller',
      relationship_manager: 'Anna Schmidt',
      swift_code: 'DEUTDEFF',
      iban: 'DE89370400440532013000',
      ai_insights: [
        {
          type: 'currency_risk',
          message: 'EUR/USD volatility at 6-month high. Consider hedging â‚¬75K exposure for Q1 2025 operations.',
          confidence: 85,
          priority: 'high',
          financial_impact: 12000,
          recommended_action: 'Implement forward contract or currency hedge for operational expenses',
          timeline: '14 days'
        },
        {
          type: 'relationship_optimization',
          message: 'Deutsche Bank offering 1.5% rate improvement for expanded relationship. Evaluate treasury services.',
          confidence: 82,
          priority: 'medium',
          recommended_action: 'Schedule meeting to discuss expanded banking services',
          timeline: '45 days'
        }
      ]
    },
    {
      id: 'BANK004',
      account_number: '****3456',
      account_name: 'Credit Line Facility',
      bank_name: 'Bank of America',
      bank_code: 'BOFA',
      account_type: 'credit_line',
      currency: 'USD',
      current_balance: -125000,
      available_balance: 375000,
      last_reconciled: new Date('2024-12-14'),
      interest_rate: 6.75,
      monthly_fee: 100,
      minimum_balance: 0,
      overdraft_limit: 500000,
      status: 'active',
      primary_contact: 'Robert Kim',
      relationship_manager: 'Lisa Zhang',
      ai_insights: [
        {
          type: 'liquidity_management',
          message: 'Credit utilization at 25%. Strong cash flow allows paydown to save $700/month in interest.',
          confidence: 93,
          priority: 'medium',
          financial_impact: 8400,
          recommended_action: 'Schedule $100K paydown from excess operating cash',
          timeline: '15 days'
        }
      ]
    }
  ]

  const mockTransactions: BankTransaction[] = [
    {
      id: 'TXN001',
      account_id: 'BANK001',
      transaction_date: new Date('2024-12-15'),
      description: 'ACH Credit - Customer Payment',
      reference_number: 'ACH24121501',
      debit_amount: 0,
      credit_amount: 45000,
      running_balance: 530000,
      transaction_type: 'ach',
      status: 'posted',
      counterparty: 'ACME Corporation',
      category: 'Revenue',
      reconciled: false,
      fraud_score: 8,
      ai_insights: [
        {
          type: 'cash_flow_forecast',
          message: 'Large payment from ACME Corp - 23% above average. Possible early payment discount captured.',
          confidence: 87,
          priority: 'low'
        }
      ]
    },
    {
      id: 'TXN002',
      account_id: 'BANK001',
      transaction_date: new Date('2024-12-15'),
      description: 'Wire Transfer - Vendor Payment',
      reference_number: 'WIRE24121502',
      debit_amount: 75000,
      credit_amount: 0,
      running_balance: 455000,
      transaction_type: 'wire',
      status: 'posted',
      counterparty: 'TechPro Solutions',
      category: 'Vendor Payment',
      reconciled: true,
      fraud_score: 12,
      ai_insights: []
    },
    {
      id: 'TXN003',
      account_id: 'BANK003',
      transaction_date: new Date('2024-12-14'),
      description: 'SWIFT Wire - International Payment',
      reference_number: 'SWIFT24121403',
      debit_amount: 25000,
      credit_amount: 0,
      running_balance: 100000,
      transaction_type: 'wire',
      status: 'posted',
      counterparty: 'European Supplier GmbH',
      category: 'International Payment',
      reconciled: false,
      fraud_score: 15,
      ai_insights: [
        {
          type: 'currency_risk',
          message: 'EUR payment timing optimal - saved â‚¬1,200 vs. last week exchange rates.',
          confidence: 94,
          priority: 'low'
        }
      ]
    },
    {
      id: 'TXN004',
      account_id: 'BANK001',
      transaction_date: new Date('2024-12-13'),
      description: 'Suspicious ACH Debit - FLAGGED',
      reference_number: 'ACH24121304',
      debit_amount: 15000,
      credit_amount: 0,
      running_balance: 470000,
      transaction_type: 'ach',
      status: 'pending',
      counterparty: 'Unknown Entity LLC',
      category: 'Suspicious',
      reconciled: false,
      fraud_score: 89,
      ai_insights: [
        {
          type: 'fraud_detection',
          message: 'HIGH RISK: Unusual counterparty with no transaction history. Review immediately.',
          confidence: 96,
          priority: 'urgent',
          recommended_action: 'Contact bank immediately to stop/reverse transaction',
          timeline: 'Immediate'
        }
      ]
    }
  ]

  useEffect(() => {
    loadSampleData()
  }, [])

  const loadSampleData = async () => {
    setLoading(true)
    try {
      setAccounts(mockAccounts)
      setTransactions(mockTransactions)
    } catch (error) {
      console.error('Error loading banking data:', error)
    } finally {
      setLoading(false)
    }
  }

  const formatCurrency = (amount: number, currency = 'USD') => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency
    }).format(Math.abs(amount))
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
      case 'posted':
        return 'bg-green-100 text-green-700'
      case 'pending':
        return 'bg-yellow-100 text-yellow-700'
      case 'frozen':
      case 'failed':
      case 'reversed':
        return 'bg-red-100 text-red-700'
      case 'inactive':
      case 'closed':
        return 'bg-gray-100 text-gray-700'
      default:
        return 'bg-blue-100 text-blue-700'
    }
  }

  const getFraudScoreColor = (score: number) => {
    if (score <= 20) return 'text-green-600'
    if (score <= 50) return 'text-yellow-600'
    if (score <= 75) return 'text-orange-600'
    return 'text-red-600'
  }

  const getAccountTypeIcon = (type: string) => {
    switch (type) {
      case 'checking':
        return <CreditCard className="w-5 h-5" />
      case 'savings':
        return <Banknote className="w-5 h-5" />
      case 'money_market':
        return <TrendingUp className="w-5 h-5" />
      case 'credit_line':
        return <Calculator className="w-5 h-5" />
      case 'foreign_currency':
        return <Globe className="w-5 h-5" />
      default:
        return <Landmark className="w-5 h-5" />
    }
  }

  const calculateBankingMetrics = () => {
    const totalCashUSD = accounts
      .filter(acc => acc.currency === 'USD' && acc.account_type !== 'credit_line')
      .reduce((sum, acc) => sum + acc.current_balance, 0)

    const totalCredit = accounts
      .filter(acc => acc.account_type === 'credit_line')
      .reduce((sum, acc) => sum + Math.abs(acc.current_balance), 0)

    const monthlyFees = accounts.reduce((sum, acc) => sum + acc.monthly_fee, 0)

    const unreconciled = transactions.filter(txn => !txn.reconciled).length

    const fraudAlerts = transactions.filter(txn => txn.fraud_score > 70).length

    return { totalCashUSD, totalCredit, monthlyFees, unreconciled, fraudAlerts }
  }

  const generateCashFlowForecast = (): CashFlowForecast[] => {
    const forecast: CashFlowForecast[] = []
    const startDate = new Date()
    let currentBalance = accounts.find(acc => acc.id === 'BANK001')?.current_balance || 0

    for (let i = 0; i < 30; i++) {
      const date = new Date(startDate)
      date.setDate(date.getDate() + i)

      // Simulate inflows and outflows based on business patterns
      const projectedInflows = Math.random() * 50000 + 25000
      const projectedOutflows = Math.random() * 45000 + 30000
      const netFlow = projectedInflows - projectedOutflows

      const forecast_item: CashFlowForecast = {
        date,
        opening_balance: currentBalance,
        projected_inflows: projectedInflows,
        projected_outflows: projectedOutflows,
        net_flow: netFlow,
        closing_balance: currentBalance + netFlow,
        confidence_level: Math.random() * 20 + 75 // 75-95% confidence
      }

      forecast.push(forecast_item)
      currentBalance = forecast_item.closing_balance
    }

    return forecast
  }

  const generateAIBankingInsights = () => {
    const metrics = calculateBankingMetrics()
    
    return [
      {
        title: 'Fraud Detection Alert',
        message: `${metrics.fraudAlerts} high-risk transactions detected. Potential fraud loss: $15,000. Immediate action required.`,
        type: 'fraud_alert',
        confidence: 96,
        action: 'Review suspicious transactions and contact banks immediately',
        financial_impact: 15000
      },
      {
        title: 'Cash Flow Optimization',
        message: 'AI forecasting shows optimal cash positioning. Move $200K to high-yield accounts for additional $8,500 annual income.',
        type: 'optimization',
        confidence: 89,
        action: 'Rebalance cash across accounts based on liquidity needs',
        financial_impact: 8500
      },
      {
        title: 'Banking Fee Optimization',
        message: `Current monthly fees: $${metrics.monthlyFees}. Account tier upgrades could save $3,600 annually.`,
        type: 'fee_optimization',
        confidence: 88,
        action: 'Review account tiers and negotiate better terms with relationship managers',
        financial_impact: 3600
      },
      {
        title: 'Currency Risk Management',
        message: 'EUR exposure at $125K with 6-month high volatility. Consider hedging to protect against 8% potential loss.',
        type: 'currency_risk',
        confidence: 85,
        action: 'Implement currency hedging strategy for international operations',
        financial_impact: 12000
      },
      {
        title: 'Credit Facility Optimization',
        message: 'Credit line at 25% utilization. Early paydown saves $8,400 annually in interest costs.',
        type: 'credit_optimization',
        confidence: 93,
        action: 'Schedule credit line paydown using excess operating cash',
        financial_impact: 8400
      }
    ]
  }

  const metrics = calculateBankingMetrics()
  const aiInsights = generateAIBankingInsights()
  const cashFlowForecast = generateCashFlowForecast()

  
  // Form Handling - Auto-generated by Universal CRUD Fixer
  const [formData, setFormData] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      if (selectedItem?.id) {
        await handleUpdate(selectedItem.id, formData);
      } else {
        await handleCreate(formData);
      }
      
      setFormData({});
      setSelectedItem(null);
      setShowDialog(false);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      <div className="container mx-auto p-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Banking & Cash Management
              </h1>
              <p className="mt-2 text-gray-600">
                AI-powered banking optimization with fraud detection and cash flow forecasting
              </p>
            </div>
            <div className="flex items-center gap-4">
              <Dialog open={showAIAssistant} onOpenChange={setShowAIAssistant}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="border-purple-200 hover:bg-purple-50">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Banking Assistant
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-3xl">
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      AI Banking Intelligence
                    </DialogTitle>
                    <DialogDescription>
                      Get AI-powered insights for cash management, fraud detection, and banking optimization
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 mt-4">
                    <Textarea
                      placeholder="Examples:
â€¢ Optimize cash flow across all bank accounts
â€¢ Detect unusual transaction patterns and fraud risks
â€¢ Forecast liquidity needs for next quarter
â€¢ Compare banking fees and suggest cost savings
â€¢ Analyze currency exposure and hedging strategies
â€¢ Evaluate credit facility utilization and optimization"
                      value={aiPrompt}
                      onChange={(e) => setAiPrompt(e.target.value)}
                      className="min-h-[120px]"
                    />
                    <Button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white">
                      <Brain className="w-4 h-4 mr-2" />
                      Get AI Banking Analysis
                    </Button>
                    
                    {/* Live AI Insights Preview */}
                    <div className="border-t pt-4">
                      <h4 className="font-semibold mb-3 flex items-center gap-2">
                        <Sparkles className="w-4 h-4 text-purple-600" />
                        Live Banking Intelligence
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {aiInsights.slice(0, 4).map((insight, index) => (
                          <div key={index} className="p-3 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-100">
                            <div className="flex items-start justify-between mb-2">
                              <div className="flex items-center gap-2">
                                {insight.type === 'fraud_alert' && <AlertTriangle className="w-3 h-3 text-red-600" />}
                                {insight.type === 'optimization' && <Target className="w-3 h-3 text-green-600" />}
                                {insight.type === 'fee_optimization' && <DollarSign className="w-3 h-3 text-blue-600" />}
                                {insight.type === 'currency_risk' && <Globe className="w-3 h-3 text-orange-600" />}
                                {insight.type === 'credit_optimization' && <Calculator className="w-3 h-3 text-purple-600" />}
                                <p className="font-medium text-sm text-purple-900">{insight.title}</p>
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {insight.confidence}%
                              </Badge>
                            </div>
                            <p className="text-xs text-purple-700 mb-2">{insight.message}</p>
                            <div className="flex items-center justify-between">
                              <p className="text-xs text-purple-600 font-medium">{insight.action}</p>
                              {insight.financial_impact && (
                                <p className="text-xs font-medium text-green-600">
                                  {formatCurrency(insight.financial_impact)}
                                </p>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg">
                <Plus className="w-4 h-4 mr-2" />
                Add Account
              </Button>
            </div>
          </div>
        </div>

        {/* AI Insights Banner */}
        <Alert className="mb-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
          <Brain className="h-4 w-4 text-purple-600" />
          <AlertTitle>AI Banking Intelligence Active</AlertTitle>
          <AlertDescription>
            <div className="flex items-center justify-between">
              <span>
                AI detected {metrics.fraudAlerts} fraud alerts, identified ${(200 * 0.00425 * 12).toFixed(0)} in optimization opportunities, 
                and {metrics.unreconciled} unreconciled transactions requiring attention across {accounts.length} bank accounts.
              </span>
              <Button size="sm" variant="outline" className="border-purple-300" onClick={() => setShowAIAssistant(true)}>
                <Sparkles className="w-4 h-4 mr-1" />
                View Analysis
              </Button>
            </div>
          </AlertDescription>
        </Alert>

        {/* High-Priority Fraud Alert */}
        {metrics.fraudAlerts > 0 && (
          <Alert className="mb-6 bg-gradient-to-br from-red-50 to-orange-50 border-red-300">
            <Shield className="h-4 w-4 text-red-600" />
            <AlertTitle className="text-red-800">URGENT: Fraud Detection Alert</AlertTitle>
            <AlertDescription className="text-red-700">
              <div className="flex items-center justify-between">
                <span>
                  {metrics.fraudAlerts} high-risk transactions flagged. Potential fraud loss: $15,000. 
                  Suspicious ACH debit from "Unknown Entity LLC" requires immediate attention.
                </span>
                <Button size="sm" variant="outline" className="border-red-400 text-red-700 hover:bg-red-100">
                  <AlertTriangle className="w-4 h-4 mr-1" />
                  Review Now
                </Button>
              </div>
            </AlertDescription>
          </Alert>
        )}

        {/* Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Cash (USD)</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {formatCurrency(metrics.totalCashUSD)}
                  </p>
                  <p className="text-xs text-blue-600 mt-1">Available liquidity</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <DollarSign className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Credit Utilized</p>
                  <p className="text-2xl font-bold text-orange-600">
                    {formatCurrency(metrics.totalCredit)}
                  </p>
                  <p className="text-xs text-orange-600 mt-1">25% of facility</p>
                </div>
                <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                  <Calculator className="w-6 h-6 text-orange-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Monthly Fees</p>
                  <p className="text-2xl font-bold text-purple-600">
                    {formatCurrency(metrics.monthlyFees)}
                  </p>
                  <p className="text-xs text-purple-600 mt-1">Optimization available</p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <Landmark className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Unreconciled</p>
                  <p className="text-2xl font-bold text-yellow-600">
                    {metrics.unreconciled}
                  </p>
                  <p className="text-xs text-yellow-600 mt-1">Transactions</p>
                </div>
                <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <CheckCircle className="w-6 h-6 text-yellow-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Fraud Alerts</p>
                  <p className="text-2xl font-bold text-red-600">
                    {metrics.fraudAlerts}
                  </p>
                  <p className="text-xs text-red-600 mt-1">High priority</p>
                </div>
                <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                  <Shield className="w-6 h-6 text-red-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid grid-cols-6 w-full max-w-4xl">
            <TabsTrigger value="accounts">Accounts</TabsTrigger>
            <TabsTrigger value="transactions">Transactions</TabsTrigger>
            <TabsTrigger value="reconciliation">Reconciliation</TabsTrigger>
            <TabsTrigger value="cash-flow">Cash Flow</TabsTrigger>
            <TabsTrigger value="ai-insights">AI Insights</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
          </TabsList>

          {/* Accounts Tab */}
          <TabsContent value="accounts" className="space-y-6">
            <div className="space-y-4">
              {accounts.map((account) => (
                <motion.div
                  key={account.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white border rounded-lg p-6 hover:shadow-lg transition-shadow"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        {getAccountTypeIcon(account.account_type)}
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">{account.account_name}</h3>
                        <p className="text-sm text-gray-600">
                          {account.bank_name} â€¢ {account.account_number} â€¢ {account.currency}
                        </p>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={getStatusColor(account.status)}>
                            {account.status.toUpperCase()}
                          </Badge>
                          <span className="text-xs text-gray-500">
                            <Building2 className="w-3 h-3 inline mr-1" />
                            {account.relationship_manager}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className={`text-2xl font-bold ${account.current_balance < 0 ? 'text-red-600' : 'text-gray-900'}`}>
                        {account.current_balance < 0 ? '-' : ''}{formatCurrency(account.current_balance, account.currency)}
                      </p>
                      <p className="text-sm text-gray-600">Current Balance</p>
                      {account.available_balance !== account.current_balance && (
                        <p className="text-sm text-blue-600">
                          Available: {formatCurrency(account.available_balance, account.currency)}
                        </p>
                      )}
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-4 text-sm">
                    <div>
                      <span className="text-gray-500">Interest Rate:</span>
                      <p className="font-medium">{account.interest_rate}%</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Monthly Fee:</span>
                      <p className="font-medium">{formatCurrency(account.monthly_fee)}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Min Balance:</span>
                      <p className="font-medium">{formatCurrency(account.minimum_balance)}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Last Reconciled:</span>
                      <p className="font-medium">{account.last_reconciled.toLocaleDateString()}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Contact:</span>
                      <p className="font-medium">{account.primary_contact}</p>
                    </div>
                  </div>

                  {/* Credit Line Progress */}
                  {account.account_type === 'credit_line' && (
                    <div className="mb-4">
                      <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
                        <span>Credit Utilization</span>
                        <span>
                          {Math.round((Math.abs(account.current_balance) / account.overdraft_limit) * 100)}% used
                        </span>
                      </div>
                      <Progress 
                        value={(Math.abs(account.current_balance) / account.overdraft_limit) * 100} 
                        className="h-2"
                      />
                    </div>
                  )}

                  {/* AI Insights */}
                  {account.ai_insights.length > 0 && (
                    <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-4 border border-purple-100">
                      <div className="flex items-center gap-2 mb-3">
                        <Brain className="w-4 h-4 text-purple-600" />
                        <span className="text-sm font-medium text-purple-900">AI Banking Intelligence</span>
                      </div>
                      <div className="space-y-3">
                        {account.ai_insights.map((insight, index) => (
                          <div key={index} className="flex items-start gap-3">
                            <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                              {insight.type === 'cash_flow_forecast' && <TrendingUp className="w-3 h-3 text-blue-600" />}
                              {insight.type === 'fee_optimization' && <DollarSign className="w-3 h-3 text-green-600" />}
                              {insight.type === 'currency_risk' && <Globe className="w-3 h-3 text-orange-600" />}
                              {insight.type === 'liquidity_management' && <Target className="w-3 h-3 text-purple-600" />}
                              {insight.type === 'relationship_optimization' && <Users className="w-3 h-3 text-blue-600" />}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-start justify-between mb-1">
                                <p className="text-sm text-purple-800">{insight.message}</p>
                                <Badge className={`text-xs ml-2 ${
                                  insight.priority === 'urgent' ? 'bg-red-100 text-red-700' :
                                  insight.priority === 'high' ? 'bg-orange-100 text-orange-700' :
                                  insight.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                                  'bg-green-100 text-green-700'
                                }`}>
                                  {insight.priority.toUpperCase()}
                                </Badge>
                              </div>
                              <div className="flex items-center justify-between">
                                <p className="text-xs text-purple-600">{insight.recommended_action}</p>
                                {insight.financial_impact && (
                                  <p className="text-xs font-medium text-green-600">
                                    {formatCurrency(insight.financial_impact)}
                                  </p>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="flex items-center justify-between mt-4 pt-4 border-t">
                    <div className="flex items-center gap-4 text-sm text-gray-600">
                      {account.swift_code && <span>SWIFT: {account.swift_code}</span>}
                      {account.routing_number && <span>Routing: {account.routing_number}</span>}
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="ghost" size="sm" onClick={() => setSelectedAccount(account)}>
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <ChevronRight className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </TabsContent>

          {/* Transactions Tab */}
          <TabsContent value="transactions" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        placeholder="Search transactions..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <Select value={filterAccount} onValueChange={setFilterAccount}>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by account" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Accounts</SelectItem>
                      {accounts.map(account => (
                        <SelectItem key={account.id} value={account.id}>
                          {account.account_name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Button variant="outline" className="border-purple-200">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Fraud Scan
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Transactions List */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  Recent Transactions
                  <Badge variant="outline">
                    <Shield className="w-3 h-3 mr-1" />
                    AI Fraud Detection
                  </Badge>
                </CardTitle>
                <CardDescription>Real-time transaction monitoring with AI fraud analysis</CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Date</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead>Account</TableHead>
                      <TableHead className="text-right">Debit</TableHead>
                      <TableHead className="text-right">Credit</TableHead>
                      <TableHead className="text-right">Balance</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Risk</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {transactions.map((transaction) => (
                      <TableRow key={transaction.id} className={transaction.fraud_score > 70 ? 'bg-red-50' : ''}>
                        <TableCell>{transaction.transaction_date.toLocaleDateString()}</TableCell>
                        <TableCell>
                          <div>
                            <p className="font-medium">{transaction.description}</p>
                            <p className="text-xs text-gray-500">
                              {transaction.reference_number} â€¢ {transaction.counterparty}
                            </p>
                          </div>
                        </TableCell>
                        <TableCell>
                          {accounts.find(acc => acc.id === transaction.account_id)?.account_name}
                        </TableCell>
                        <TableCell className="text-right text-red-600">
                          {transaction.debit_amount > 0 ? formatCurrency(transaction.debit_amount) : '-'}
                        </TableCell>
                        <TableCell className="text-right text-green-600">
                          {transaction.credit_amount > 0 ? formatCurrency(transaction.credit_amount) : '-'}
                        </TableCell>
                        <TableCell className="text-right font-medium">
                          {formatCurrency(transaction.running_balance)}
                        </TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(transaction.status)}>
                            {transaction.status.toUpperCase()}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <span className={`text-sm font-medium ${getFraudScoreColor(transaction.fraud_score)}`}>
                              {transaction.fraud_score}%
                            </span>
                            {transaction.fraud_score > 70 && (
                              <AlertTriangle className="w-4 h-4 text-red-600" />
                            )}
                            {!transaction.reconciled && (
                              <Clock className="w-4 h-4 text-yellow-600" />
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Cash Flow Tab */}
          <TabsContent value="cash-flow" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="w-5 h-5" />
                  AI Cash Flow Forecast
                </CardTitle>
                <CardDescription>30-day predictive cash flow analysis with 85-95% confidence</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-64 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center mb-6">
                  <div className="text-center">
                    <TrendingUp className="w-12 h-12 text-purple-600 mx-auto mb-2" />
                    <p className="text-gray-600 font-medium">AI Cash Flow Forecast Chart</p>
                    <p className="text-sm text-gray-500">30-day projection with confidence intervals</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <Card>
                    <CardContent className="p-4">
                      <div className="text-center">
                        <p className="text-sm text-gray-600">7-Day Forecast</p>
                        <p className="text-xl font-bold text-green-600">+{formatCurrency(45000)}</p>
                        <p className="text-xs text-gray-500">91% confidence</p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardContent className="p-4">
                      <div className="text-center">
                        <p className="text-sm text-gray-600">30-Day Forecast</p>
                        <p className="text-xl font-bold text-blue-600">+{formatCurrency(125000)}</p>
                        <p className="text-xs text-gray-500">87% confidence</p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardContent className="p-4">
                      <div className="text-center">
                        <p className="text-sm text-gray-600">Minimum Buffer</p>
                        <p className="text-xl font-bold text-orange-600">{formatCurrency(200000)}</p>
                        <p className="text-xs text-gray-500">AI recommended</p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardContent className="p-4">
                      <div className="text-center">
                        <p className="text-sm text-gray-600">Excess Cash</p>
                        <p className="text-xl font-bold text-purple-600">{formatCurrency(285000)}</p>
                        <p className="text-xs text-gray-500">Investment opportunity</p>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Insights Tab */}
          <TabsContent value="ai-insights" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {aiInsights.map((insight, index) => (
                <Card key={index} className="border-purple-200 hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        insight.type === 'fraud_alert' ? 'bg-red-100' :
                        insight.type === 'optimization' ? 'bg-green-100' :
                        insight.type === 'fee_optimization' ? 'bg-blue-100' :
                        insight.type === 'currency_risk' ? 'bg-orange-100' :
                        'bg-purple-100'
                      }`}>
                        {insight.type === 'fraud_alert' && <Shield className="w-4 h-4 text-red-600" />}
                        {insight.type === 'optimization' && <Target className="w-4 h-4 text-green-600" />}
                        {insight.type === 'fee_optimization' && <DollarSign className="w-4 h-4 text-blue-600" />}
                        {insight.type === 'currency_risk' && <Globe className="w-4 h-4 text-orange-600" />}
                        {insight.type === 'credit_optimization' && <Calculator className="w-4 h-4 text-purple-600" />}
                      </div>
                      {insight.title}
                    </CardTitle>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline">{insight.confidence}% confidence</Badge>
                      {insight.financial_impact && (
                        <Badge className="bg-green-100 text-green-700">
                          {formatCurrency(insight.financial_impact)} impact
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-700 mb-4">{insight.message}</p>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-900 mb-1">Recommended Action:</p>
                      <p className="text-sm text-gray-600">{insight.action}</p>
                    </div>
                    <Button className="w-full mt-4" variant="outline">
                      <Zap className="w-4 h-4 mr-2" />
                      Implement Strategy
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Reconciliation Tab */}
          <TabsContent value="reconciliation" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="w-5 h-5" />
                  Bank Reconciliation Center
                </CardTitle>
                <CardDescription>AI-assisted reconciliation with automated matching</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card className="border-green-200">
                    <CardContent className="p-4">
                      <div className="text-center">
                        <CheckCircle className="w-12 h-12 text-green-600 mx-auto mb-2" />
                        <p className="font-semibold text-green-900">Reconciled</p>
                        <p className="text-2xl font-bold text-green-600">
                          {transactions.filter(t => t.reconciled).length}
                        </p>
                        <p className="text-xs text-green-600">transactions</p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="border-yellow-200">
                    <CardContent className="p-4">
                      <div className="text-center">
                        <Clock className="w-12 h-12 text-yellow-600 mx-auto mb-2" />
                        <p className="font-semibold text-yellow-900">Pending</p>
                        <p className="text-2xl font-bold text-yellow-600">
                          {transactions.filter(t => !t.reconciled).length}
                        </p>
                        <p className="text-xs text-yellow-600">transactions</p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="border-red-200">
                    <CardContent className="p-4">
                      <div className="text-center">
                        <AlertTriangle className="w-12 h-12 text-red-600 mx-auto mb-2" />
                        <p className="font-semibold text-red-900">Exceptions</p>
                        <p className="text-2xl font-bold text-red-600">
                          {transactions.filter(t => t.fraud_score > 70).length}
                        </p>
                        <p className="text-xs text-red-600">flagged items</p>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Reports Tab */}
          <TabsContent value="reports" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="w-5 h-5" />
                    Cash Position Report
                  </CardTitle>
                  <CardDescription>Daily cash position across all accounts</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Operating Cash</span>
                      <span className="font-medium">{formatCurrency(485000)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Investment Cash</span>
                      <span className="font-medium">{formatCurrency(750000)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Foreign Currency</span>
                      <span className="font-medium">â‚¬125,000</span>
                    </div>
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    <FileText className="w-4 h-4 mr-2" />
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="w-5 h-5" />
                    Banking Relationship Analysis
                  </CardTitle>
                  <CardDescription>Account distribution and relationship optimization</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-32 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center mb-4">
                    <p className="text-gray-500 text-sm">Banking relationship chart</p>
                  </div>
                  <Button className="w-full" variant="outline">
                    <Activity className="w-4 h-4 mr-2" />
                    View Analysis
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}