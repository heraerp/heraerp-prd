'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Receipt, Users, DollarSign, TrendingUp, 
  Calendar, Clock, AlertCircle, CheckCircle,
  TrendingDown, Upload, Download, Target,
  Search, Filter, Plus, Send, Eye, Edit,
  X, Check, ChevronRight, Building2, Mail,
  Phone, MapPin, Globe, CreditCard, Banknote,
  Timer, AlertTriangle, BarChart3, PieChart,
  Bot, Sparkles, Zap, Brain, RefreshCw,
  FileCheck, Hourglass, Star, Shield,
  ArrowUpDown, MessageCircle, Activity,
  TrendingRightIcon, UserCheck, Award
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Progress } from '@/components/ui/progress'
import { motion } from 'framer-motion'
import { universalApi } from '@/lib/universal-api'

interface Customer {
  id: string
  customer_code: string
  customer_name: string
  contact_person: string
  email: string
  phone: string
  address: string
  payment_terms: string
  credit_limit: number
  current_balance: number
  credit_score: number
  payment_history: 'excellent' | 'good' | 'fair' | 'poor'
  status: 'active' | 'inactive' | 'blocked'
  industry: string
  last_payment_date: Date
  days_since_last_payment: number
}

interface Invoice {
  id: string
  invoice_number: string
  customer_id: string
  customer_name: string
  invoice_date: Date
  due_date: Date
  total_amount: number
  paid_amount: number
  outstanding_amount: number
  status: 'draft' | 'sent' | 'viewed' | 'partial' | 'paid' | 'overdue' | 'cancelled'
  days_outstanding: number
  collection_priority: 'low' | 'medium' | 'high' | 'urgent'
  items: InvoiceItem[]
  ai_insights: AIInsight[]
}

interface InvoiceItem {
  description: string
  quantity: number
  unit_price: number
  amount: number
  tax_amount: number
}

interface AIInsight {
  type: 'collection' | 'payment_prediction' | 'risk_assessment' | 'recommendation'
  message: string
  confidence: number
  action?: string
}

interface CollectionActivity {
  id: string
  customer_id: string
  invoice_id: string
  activity_type: 'email' | 'call' | 'letter' | 'meeting' | 'payment_plan'
  description: string
  date: Date
  result: 'successful' | 'pending' | 'no_response'
  next_action_date?: Date
}

export default function AccountsReceivablePage() {

  // CRUD Operations - Auto-generated by Universal CRUD Fixer
  const loadData = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/v1/${modulePath}?action=list&organization_id=${organizationId}`);
      const result = await response.json();
      
      if (result.success) {
        setData(result.data);
      } else {
        console.error('Failed to load data:', result.error);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async (formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'create',
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Create error:', error);
      throw error;
    }
  };

  const handleUpdate = async (id: string, formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id,
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Update error:', error);
      throw error;
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}?id=${id}&organization_id=${organizationId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Delete error:', error);
      throw error;
    }
  };

  // Auto-load data on component mount
  useEffect(() => {
    if (organizationId) {
      loadData();
    }
  }, [organizationId]);

  const router = useRouter()
  const [activeTab, setActiveTab] = useState('invoices')
  const [customers, setCustomers] = useState<Customer[]>([])
  const [invoices, setInvoices] = useState<Invoice[]>([])
  const [activities, setActivities] = useState<CollectionActivity[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all')
  const [selectedInvoices, setSelectedInvoices] = useState<string[]>([])
  const [showAIAssistant, setShowAIAssistant] = useState(false)
  const [aiPrompt, setAiPrompt] = useState('')
  const [showCollectionDialog, setShowCollectionDialog] = useState(false)
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)

  // Mock data with AI insights
  const mockCustomers: Customer[] = [
    {
      id: 'C001',
      customer_code: 'ACME-001',
      customer_name: 'ACME Corporation',
      contact_person: 'Jane Smith',
      email: 'jane@acmecorp.com',
      phone: '(555) 123-4567',
      address: '123 Business Blvd, Suite 200, New York, NY 10001',
      payment_terms: 'Net 30',
      credit_limit: 100000,
      current_balance: 25000,
      credit_score: 825,
      payment_history: 'excellent',
      status: 'active',
      industry: 'Manufacturing',
      last_payment_date: new Date('2024-12-05'),
      days_since_last_payment: 10
    },
    {
      id: 'C002',
      customer_code: 'TECH-001',
      customer_name: 'TechStart Solutions',
      contact_person: 'Mike Johnson',
      email: 'mike@techstart.com',
      phone: '(555) 987-6543',
      address: '456 Innovation Ave, San Francisco, CA 94105',
      payment_terms: 'Net 15',
      credit_limit: 50000,
      current_balance: 42000,
      credit_score: 650,
      payment_history: 'fair',
      status: 'active',
      industry: 'Technology',
      last_payment_date: new Date('2024-11-20'),
      days_since_last_payment: 25
    },
    {
      id: 'C003',
      customer_code: 'RETAIL-001',
      customer_name: 'Global Retail Inc',
      contact_person: 'Sarah Wilson',
      email: 'sarah@globalretail.com',
      phone: '(555) 555-0123',
      address: '789 Commerce St, Chicago, IL 60601',
      payment_terms: 'Net 45',
      credit_limit: 150000,
      current_balance: 85000,
      credit_score: 720,
      payment_history: 'good',
      status: 'active',
      industry: 'Retail',
      last_payment_date: new Date('2024-12-01'),
      days_since_last_payment: 14
    }
  ]

  const mockInvoices: Invoice[] = [
    {
      id: 'INV001',
      invoice_number: 'INV-2024-1001',
      customer_id: 'C001',
      customer_name: 'ACME Corporation',
      invoice_date: new Date('2024-11-15'),
      due_date: new Date('2024-12-15'),
      total_amount: 15000,
      paid_amount: 0,
      outstanding_amount: 15000,
      status: 'sent',
      days_outstanding: 30,
      collection_priority: 'low',
      items: [
        { description: 'Professional Services - November', quantity: 1, unit_price: 15000, amount: 15000, tax_amount: 0 }
      ],
      ai_insights: [
        {
          type: 'payment_prediction',
          message: 'Based on ACME Corporation\'s excellent payment history, payment is expected within 5-7 days.',
          confidence: 92,
          action: 'monitor'
        },
        {
          type: 'collection',
          message: 'Customer has 825 credit score and pays consistently early. Low collection risk.',
          confidence: 95
        }
      ]
    },
    {
      id: 'INV002',
      invoice_number: 'INV-2024-1002',
      customer_id: 'C002',
      customer_name: 'TechStart Solutions',
      invoice_date: new Date('2024-10-01'),
      due_date: new Date('2024-10-16'),
      total_amount: 28000,
      paid_amount: 8000,
      outstanding_amount: 20000,
      status: 'overdue',
      days_outstanding: 60,
      collection_priority: 'high',
      items: [
        { description: 'Software Development Services', quantity: 1, unit_price: 28000, amount: 28000, tax_amount: 0 }
      ],
      ai_insights: [
        {
          type: 'risk_assessment',
          message: 'Customer approaching credit limit with declining payment patterns. Immediate attention required.',
          confidence: 87,
          action: 'urgent_followup'
        },
        {
          type: 'recommendation',
          message: 'Suggest payment plan: $5,000 weekly for 4 weeks to clear outstanding balance.',
          confidence: 78
        },
        {
          type: 'collection',
          message: 'Optimal contact time: Tuesday-Thursday, 2-4 PM based on previous successful collections.',
          confidence: 85
        }
      ]
    },
    {
      id: 'INV003',
      invoice_number: 'INV-2024-1003',
      customer_id: 'C003',
      customer_name: 'Global Retail Inc',
      invoice_date: new Date('2024-11-01'),
      due_date: new Date('2024-12-16'),
      total_amount: 65000,
      paid_amount: 32500,
      outstanding_amount: 32500,
      status: 'partial',
      days_outstanding: 14,
      collection_priority: 'medium',
      items: [
        { description: 'Q4 Marketing Campaign', quantity: 1, unit_price: 65000, amount: 65000, tax_amount: 0 }
      ],
      ai_insights: [
        {
          type: 'payment_prediction',
          message: 'Partial payment received on schedule. Remaining balance likely within 10 days.',
          confidence: 81
        },
        {
          type: 'collection',
          message: 'Customer prefers installment payments. Consider offering structured payment terms.',
          confidence: 89
        }
      ]
    }
  ]

  const mockActivities: CollectionActivity[] = [
    {
      id: 'ACT001',
      customer_id: 'C002',
      invoice_id: 'INV002',
      activity_type: 'email',
      description: 'Sent payment reminder for overdue invoice INV-2024-1002',
      date: new Date('2024-12-10'),
      result: 'no_response',
      next_action_date: new Date('2024-12-17')
    },
    {
      id: 'ACT002',
      customer_id: 'C002',
      invoice_id: 'INV002',
      activity_type: 'call',
      description: 'Phone call to discuss payment schedule',
      date: new Date('2024-12-12'),
      result: 'successful',
      next_action_date: new Date('2024-12-19')
    }
  ]

  useEffect(() => {
    loadSampleData()
  }, [])

  const loadSampleData = async () => {
    setLoading(true)
    try {
      setCustomers(mockCustomers)
      setInvoices(mockInvoices)
      setActivities(mockActivities)
    } catch (error) {
      console.error('Error loading AR data:', error)
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'paid':
      case 'active':
      case 'excellent':
        return 'bg-green-100 text-green-700'
      case 'sent':
      case 'viewed':
      case 'good':
        return 'bg-blue-100 text-blue-700'
      case 'partial':
      case 'fair':
        return 'bg-yellow-100 text-yellow-700'
      case 'overdue':
      case 'blocked':
      case 'poor':
        return 'bg-red-100 text-red-700'
      case 'draft':
        return 'bg-gray-100 text-gray-700'
      default:
        return 'bg-gray-100 text-gray-700'
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent':
        return 'bg-red-500 text-white'
      case 'high':
        return 'bg-orange-100 text-orange-700'
      case 'medium':
        return 'bg-yellow-100 text-yellow-700'
      case 'low':
        return 'bg-green-100 text-green-700'
      default:
        return 'bg-gray-100 text-gray-700'
    }
  }

  const getCreditScoreColor = (score: number) => {
    if (score >= 800) return 'text-green-600'
    if (score >= 700) return 'text-blue-600'
    if (score >= 600) return 'text-yellow-600'
    return 'text-red-600'
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  const calculateARMetrics = () => {
    const totalOutstanding = invoices
      .filter(inv => ['sent', 'viewed', 'partial', 'overdue'].includes(inv.status))
      .reduce((sum, inv) => sum + inv.outstanding_amount, 0)

    const overdueAmount = invoices
      .filter(inv => inv.status === 'overdue')
      .reduce((sum, inv) => sum + inv.outstanding_amount, 0)

    const avgCollectionDays = invoices
      .filter(inv => inv.status === 'paid')
      .reduce((sum, inv, _, arr) => sum + inv.days_outstanding / arr.length, 0) || 0

    const collectionEfficiency = ((invoices.filter(inv => inv.status === 'paid').length / invoices.length) * 100) || 0

    return { totalOutstanding, overdueAmount, avgCollectionDays: Math.round(avgCollectionDays), collectionEfficiency: Math.round(collectionEfficiency) }
  }

  const metrics = calculateARMetrics()

  const generateAIInsights = () => {
    return [
      {
        title: 'High-Risk Alert',
        message: 'TechStart Solutions approaching credit limit with $20K overdue. Immediate collection action recommended.',
        type: 'warning',
        confidence: 87,
        action: 'Review credit terms and implement payment plan'
      },
      {
        title: 'Collection Optimization',
        message: 'Customers with "good" payment history respond 73% better to phone calls vs emails.',
        type: 'insight',
        confidence: 91,
        action: 'Switch to phone-first collection strategy'
      },
      {
        title: 'Cash Flow Forecast',
        message: 'Based on payment patterns, expect $45K collections in next 7 days.',
        type: 'prediction',
        confidence: 84,
        action: 'Plan cash flow accordingly'
      },
      {
        title: 'Credit Limit Review',
        message: '2 customers may need credit limit increases based on growth patterns.',
        type: 'opportunity',
        confidence: 79,
        action: 'Schedule credit reviews with ACME Corp and Global Retail'
      }
    ]
  }

  const aiInsights = generateAIInsights()

  
  // Form Handling - Auto-generated by Universal CRUD Fixer
  const [formData, setFormData] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      if (selectedItem?.id) {
        await handleUpdate(selectedItem.id, formData);
      } else {
        await handleCreate(formData);
      }
      
      setFormData({});
      setSelectedItem(null);
      setShowDialog(false);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      <div className="container mx-auto p-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Accounts Receivable
              </h1>
              <p className="mt-2 text-gray-600">
                AI-powered customer management and collection optimization
              </p>
            </div>
            <div className="flex items-center gap-4">
              <Dialog open={showAIAssistant} onOpenChange={setShowAIAssistant}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="border-purple-200 hover:bg-purple-50">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Collection Assistant
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-3xl">
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      AI Collection Assistant
                    </DialogTitle>
                    <DialogDescription>
                      Get AI-powered insights for collection optimization and customer management
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 mt-4">
                    <Textarea
                      placeholder="Examples:
• Which customers should I prioritize for collection this week?
• What's the best time to contact TechStart Solutions?
• Predict payment probability for overdue invoices
• Suggest collection strategies for high-risk accounts"
                      value={aiPrompt}
                      onChange={(e) => setAiPrompt(e.target.value)}
                      className="min-h-[100px]"
                    />
                    <Button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white">
                      <Brain className="w-4 h-4 mr-2" />
                      Get AI Recommendations
                    </Button>
                    
                    {/* AI Insights Preview */}
                    <div className="border-t pt-4">
                      <h4 className="font-semibold mb-3 flex items-center gap-2">
                        <Sparkles className="w-4 h-4 text-purple-600" />
                        Live AI Insights
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {aiInsights.slice(0, 4).map((insight, index) => (
                          <div key={index} className="p-3 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-100">
                            <div className="flex items-start justify-between mb-2">
                              <p className="font-medium text-sm text-purple-900">{insight.title}</p>
                              <Badge variant="outline" className="text-xs">
                                {insight.confidence}% confident
                              </Badge>
                            </div>
                            <p className="text-xs text-purple-700 mb-2">{insight.message}</p>
                            <p className="text-xs text-purple-600 font-medium">{insight.action}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg">
                <Plus className="w-4 h-4 mr-2" />
                New Invoice
              </Button>
            </div>
          </div>
        </div>

        {/* AI Insights Banner */}
        <Alert className="mb-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
          <Brain className="h-4 w-4 text-purple-600" />
          <AlertTitle>AI Collection Intelligence Active</AlertTitle>
          <AlertDescription>
            <div className="flex items-center justify-between">
              <span>
                AI analyzed 47 data points and identified 3 high-priority collection opportunities 
                worth {formatCurrency(67500)} with 89% success probability.
              </span>
              <Button size="sm" variant="outline" className="border-purple-300">
                <Eye className="w-4 h-4 mr-1" />
                View Details
              </Button>
            </div>
          </AlertDescription>
        </Alert>

        {/* Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Outstanding</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {formatCurrency(metrics.totalOutstanding)}
                  </p>
                  <p className="text-xs text-green-600 mt-1">↓ 12% from last month</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <DollarSign className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Overdue Amount</p>
                  <p className="text-2xl font-bold text-red-600">
                    {formatCurrency(metrics.overdueAmount)}
                  </p>
                  <p className="text-xs text-red-600 mt-1">Needs attention</p>
                </div>
                <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                  <AlertTriangle className="w-6 h-6 text-red-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Avg Collection Days</p>
                  <p className="text-2xl font-bold text-yellow-600">
                    {metrics.avgCollectionDays}
                  </p>
                  <p className="text-xs text-green-600 mt-1">↓ 3 days improved</p>
                </div>
                <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <Timer className="w-6 h-6 text-yellow-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Collection Rate</p>
                  <p className="text-2xl font-bold text-green-600">
                    {metrics.collectionEfficiency}%
                  </p>
                  <p className="text-xs text-green-600 mt-1">↑ 5% improvement</p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                  <Target className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid grid-cols-5 w-full max-w-3xl">
            <TabsTrigger value="invoices">Invoices</TabsTrigger>
            <TabsTrigger value="customers">Customers</TabsTrigger>
            <TabsTrigger value="collections">Collections</TabsTrigger>
            <TabsTrigger value="ai-insights">AI Insights</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
          </TabsList>

          {/* Invoices Tab */}
          <TabsContent value="invoices" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        placeholder="Search invoices..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Invoices</SelectItem>
                      <SelectItem value="overdue">Overdue</SelectItem>
                      <SelectItem value="sent">Sent</SelectItem>
                      <SelectItem value="partial">Partial Payment</SelectItem>
                      <SelectItem value="paid">Paid</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline" className="border-purple-200">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Priority Sort
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Invoices List with AI Insights */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  Outstanding Invoices
                  <Badge variant="outline" className="ml-2">
                    <Sparkles className="w-3 h-3 mr-1" />
                    AI Enhanced
                  </Badge>
                </CardTitle>
                <CardDescription>AI-powered collection prioritization and insights</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {invoices.map((invoice) => (
                    <motion.div
                      key={invoice.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h4 className="font-semibold">{invoice.invoice_number}</h4>
                            <Badge className={getStatusColor(invoice.status)}>
                              {invoice.status.toUpperCase()}
                            </Badge>
                            <Badge className={getPriorityColor(invoice.collection_priority)}>
                              {invoice.collection_priority.toUpperCase()} PRIORITY
                            </Badge>
                            {invoice.days_outstanding > 30 && (
                              <Badge variant="outline" className="bg-red-50 text-red-600">
                                {invoice.days_outstanding} days overdue
                              </Badge>
                            )}
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 mb-3">
                            <div>
                              <span className="font-medium">{invoice.customer_name}</span>
                            </div>
                            <div>
                              Due: {invoice.due_date.toLocaleDateString()}
                            </div>
                            <div>
                              Total: <span className="font-medium">{formatCurrency(invoice.total_amount)}</span>
                            </div>
                            <div>
                              Outstanding: <span className="font-medium text-red-600">
                                {formatCurrency(invoice.outstanding_amount)}
                              </span>
                            </div>
                          </div>
                        </div>
                        <Button variant="ghost" size="sm">
                          <ChevronRight className="w-4 h-4" />
                        </Button>
                      </div>

                      {/* AI Insights Section */}
                      {invoice.ai_insights.length > 0 && (
                        <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-3 border border-purple-100">
                          <div className="flex items-center gap-2 mb-2">
                            <Brain className="w-4 h-4 text-purple-600" />
                            <span className="text-sm font-medium text-purple-900">AI Insights</span>
                          </div>
                          <div className="space-y-2">
                            {invoice.ai_insights.map((insight, index) => (
                              <div key={index} className="flex items-start gap-3">
                                <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                                  {insight.type === 'payment_prediction' && <Target className="w-3 h-3 text-purple-600" />}
                                  {insight.type === 'risk_assessment' && <Shield className="w-3 h-3 text-purple-600" />}
                                  {insight.type === 'collection' && <MessageCircle className="w-3 h-3 text-purple-600" />}
                                  {insight.type === 'recommendation' && <Sparkles className="w-3 h-3 text-purple-600" />}
                                </div>
                                <div className="flex-1">
                                  <p className="text-sm text-purple-800">{insight.message}</p>
                                  <div className="flex items-center justify-between mt-1">
                                    <Badge variant="outline" className="text-xs bg-purple-100">
                                      {insight.confidence}% confidence
                                    </Badge>
                                    {insight.action && (
                                      <Button size="sm" variant="outline" className="text-xs border-purple-300">
                                        {insight.action === 'urgent_followup' && 'Follow Up Now'}
                                        {insight.action === 'monitor' && 'Monitor'}
                                        {!['urgent_followup', 'monitor'].includes(insight.action) && 'Take Action'}
                                      </Button>
                                    )}
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Customers Tab */}
          <TabsContent value="customers" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      Customer Portfolio
                      <Badge variant="outline">
                        <Activity className="w-3 h-3 mr-1" />
                        Credit Scoring Active
                      </Badge>
                    </CardTitle>
                    <CardDescription>AI-enhanced credit management and customer insights</CardDescription>
                  </div>
                  <Button>
                    <Plus className="w-4 h-4 mr-2" />
                    Add Customer
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {customers.map((customer) => (
                    <motion.div
                      key={customer.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h4 className="text-lg font-semibold">{customer.customer_name}</h4>
                            <Badge className={getStatusColor(customer.status)}>
                              {customer.status.toUpperCase()}
                            </Badge>
                            <Badge className={getStatusColor(customer.payment_history)}>
                              {customer.payment_history.toUpperCase()} PAYER
                            </Badge>
                            <div className="flex items-center gap-1">
                              <Star className="w-4 h-4 text-yellow-500" />
                              <span className={`font-medium ${getCreditScoreColor(customer.credit_score)}`}>
                                {customer.credit_score}
                              </span>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm text-gray-600 mb-3">
                            <div className="flex items-center gap-2">
                              <Building2 className="w-4 h-4" />
                              <span>{customer.customer_code}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Users className="w-4 h-4" />
                              <span>{customer.contact_person}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Globe className="w-4 h-4" />
                              <span>{customer.industry}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Mail className="w-4 h-4" />
                              <span>{customer.email}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Phone className="w-4 h-4" />
                              <span>{customer.phone}</span>
                            </div>
                          </div>
                          <div className="flex items-center gap-6 text-sm">
                            <div>
                              <span className="text-gray-500">Credit Limit:</span>
                              <span className="ml-2 font-medium">{formatCurrency(customer.credit_limit)}</span>
                            </div>
                            <div>
                              <span className="text-gray-500">Current Balance:</span>
                              <span className="ml-2 font-medium text-blue-600">
                                {formatCurrency(customer.current_balance)}
                              </span>
                            </div>
                            <div>
                              <span className="text-gray-500">Utilization:</span>
                              <span className="ml-2 font-medium">
                                {Math.round((customer.current_balance / customer.credit_limit) * 100)}%
                              </span>
                            </div>
                            <div>
                              <span className="text-gray-500">Last Payment:</span>
                              <span className="ml-2 font-medium">
                                {customer.days_since_last_payment} days ago
                              </span>
                            </div>
                          </div>
                          
                          {/* Credit Utilization Bar */}
                          <div className="mt-3">
                            <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
                              <span>Credit Utilization</span>
                              <span>{Math.round((customer.current_balance / customer.credit_limit) * 100)}%</span>
                            </div>
                            <Progress 
                              value={(customer.current_balance / customer.credit_limit) * 100} 
                              className="h-2"
                            />
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm" onClick={() => setSelectedCustomer(customer)}>
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <ChevronRight className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Collections Tab */}
          <TabsContent value="collections" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  Collection Activities
                  <Badge variant="outline">
                    <Bot className="w-3 h-3 mr-1" />
                    AI Optimized
                  </Badge>
                </CardTitle>
                <CardDescription>Track collection efforts and AI-suggested actions</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {activities.map((activity) => (
                    <motion.div
                      key={activity.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="border rounded-lg p-4"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-3">
                          <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                            activity.activity_type === 'email' ? 'bg-blue-100' :
                            activity.activity_type === 'call' ? 'bg-green-100' :
                            activity.activity_type === 'letter' ? 'bg-yellow-100' :
                            'bg-purple-100'
                          }`}>
                            {activity.activity_type === 'email' && <Mail className="w-4 h-4 text-blue-600" />}
                            {activity.activity_type === 'call' && <Phone className="w-4 h-4 text-green-600" />}
                            {activity.activity_type === 'letter' && <FileText className="w-4 h-4 text-yellow-600" />}
                            {activity.activity_type === 'meeting' && <Users className="w-4 h-4 text-purple-600" />}
                          </div>
                          <div>
                            <h4 className="font-medium">{activity.description}</h4>
                            <p className="text-sm text-gray-600 mt-1">
                              {activity.date.toLocaleDateString()} • {activity.activity_type.toUpperCase()}
                            </p>
                            <Badge 
                              className={`mt-2 ${
                                activity.result === 'successful' ? 'bg-green-100 text-green-700' :
                                activity.result === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                                'bg-red-100 text-red-700'
                              }`}
                            >
                              {activity.result.toUpperCase().replace('_', ' ')}
                            </Badge>
                          </div>
                        </div>
                        {activity.next_action_date && (
                          <div className="text-right">
                            <p className="text-sm text-gray-500">Next Action</p>
                            <p className="text-sm font-medium">{activity.next_action_date.toLocaleDateString()}</p>
                          </div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Insights Tab */}
          <TabsContent value="ai-insights" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {aiInsights.map((insight, index) => (
                <Card key={index} className="border-purple-200 hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        insight.type === 'warning' ? 'bg-red-100' :
                        insight.type === 'insight' ? 'bg-blue-100' :
                        insight.type === 'prediction' ? 'bg-purple-100' :
                        'bg-green-100'
                      }`}>
                        {insight.type === 'warning' && <AlertTriangle className="w-4 h-4 text-red-600" />}
                        {insight.type === 'insight' && <Brain className="w-4 h-4 text-blue-600" />}
                        {insight.type === 'prediction' && <TrendingUp className="w-4 h-4 text-purple-600" />}
                        {insight.type === 'opportunity' && <Award className="w-4 h-4 text-green-600" />}
                      </div>
                      {insight.title}
                    </CardTitle>
                    <Badge variant="outline">{insight.confidence}% confidence</Badge>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-700 mb-4">{insight.message}</p>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-900 mb-1">Recommended Action:</p>
                      <p className="text-sm text-gray-600">{insight.action}</p>
                    </div>
                    <Button className="w-full mt-4" variant="outline">
                      <Zap className="w-4 h-4 mr-2" />
                      Implement Suggestion
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Reports Tab */}
          <TabsContent value="reports" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="w-5 h-5" />
                    AR Aging Analysis
                  </CardTitle>
                  <CardDescription>Outstanding receivables by age with AI insights</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Current (0-30 days)</span>
                      <span className="font-medium">{formatCurrency(35000)}</span>
                    </div>
                    <Progress value={52} className="h-2" />
                    <div className="flex items-center justify-between">
                      <span className="text-sm">31-60 days</span>
                      <span className="font-medium">{formatCurrency(15000)}</span>
                    </div>
                    <Progress value={22} className="h-2" />
                    <div className="flex items-center justify-between">
                      <span className="text-sm">61-90 days</span>
                      <span className="font-medium">{formatCurrency(12500)}</span>
                    </div>
                    <Progress value={19} className="h-2" />
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-red-600">Over 90 days</span>
                      <span className="font-medium text-red-600">{formatCurrency(5000)}</span>
                    </div>
                    <Progress value={7} className="h-2 bg-red-100" />
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    <Bot className="w-4 h-4 mr-2" />
                    AI Collection Strategy
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="w-5 h-5" />
                    Customer Risk Assessment
                  </CardTitle>
                  <CardDescription>AI-powered credit risk analysis</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-48 bg-gradient-to-br from-green-50 to-red-50 rounded-lg flex items-center justify-center mb-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600 mb-1">73%</div>
                      <div className="text-sm text-gray-600">Low Risk Customers</div>
                    </div>
                  </div>
                  <Button className="w-full" variant="outline">
                    <Shield className="w-4 h-4 mr-2" />
                    Risk Management Plan
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5" />
                    Collection Performance
                  </CardTitle>
                  <CardDescription>AI-optimized collection metrics</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Success Rate</span>
                      <span className="font-medium text-green-600">87%</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Avg Response Time</span>
                      <span className="font-medium">2.3 days</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">AI Accuracy</span>
                      <span className="font-medium text-purple-600">91%</span>
                    </div>
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="w-5 h-5" />
                    Cash Flow Forecast
                  </CardTitle>
                  <CardDescription>AI-predicted payment timeline</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Next 7 days</span>
                      <span className="font-medium text-green-600">{formatCurrency(45000)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Next 30 days</span>
                      <span className="font-medium text-blue-600">{formatCurrency(120000)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Confidence</span>
                      <span className="font-medium text-purple-600">84%</span>
                    </div>
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    <Brain className="w-4 h-4 mr-2" />
                    AI Forecast Details
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}