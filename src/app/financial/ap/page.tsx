'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  CreditCard, FileText, Users, DollarSign, 
  Calendar, Clock, AlertCircle, CheckCircle,
  TrendingUp, TrendingDown, Upload, Download,
  Search, Filter, Plus, Send, Eye, Edit,
  X, Check, ChevronRight, Building2, Mail,
  Phone, MapPin, Globe, Receipt, Banknote,
  Timer, AlertTriangle, BarChart3, PieChart,
  Bot, Sparkles, Zap, Brain, RefreshCw,
  FileCheck, Hourglass, Ban, ArrowUpDown,
  Shield, Star, Copy
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Progress } from '@/components/ui/progress'
import { motion } from 'framer-motion'
import { universalApi } from '@/lib/universal-api'

interface Vendor {
  id: string
  vendor_code: string
  vendor_name: string
  contact_person: string
  email: string
  phone: string
  address: string
  payment_terms: string
  credit_limit: number
  current_balance: number
  status: 'active' | 'inactive' | 'blocked'
  category: string
  risk_score: number
  payment_reliability: 'excellent' | 'good' | 'fair' | 'poor'
  early_payment_discount: number
  avg_delivery_time: number
  quality_score: number
  last_audit_date: Date
  compliance_status: 'compliant' | 'pending' | 'non_compliant'
  ai_insights: AIInsight[]
}

interface AIInsight {
  type: 'fraud_alert' | 'payment_optimization' | 'risk_assessment' | 'relationship' | 'cash_flow'
  message: string
  confidence: number
  priority: 'low' | 'medium' | 'high' | 'urgent'
  action?: string
  potential_savings?: number
}

interface Invoice {
  id: string
  invoice_number: string
  vendor_id: string
  vendor_name: string
  invoice_date: Date
  due_date: Date
  total_amount: number
  paid_amount: number
  status: 'draft' | 'pending' | 'approved' | 'paid' | 'overdue' | 'cancelled'
  approval_status: 'pending' | 'approved' | 'rejected'
  items: InvoiceItem[]
  fraud_risk_score: number
  duplicate_check: 'clean' | 'potential_duplicate' | 'confirmed_duplicate'
  early_payment_eligible: boolean
  payment_priority: 'low' | 'medium' | 'high' | 'urgent'
  ai_insights: AIInsight[]
}

interface InvoiceItem {
  description: string
  account_code: string
  amount: number
  tax_amount: number
}

interface Payment {
  id: string
  payment_date: Date
  vendor_id: string
  vendor_name: string
  amount: number
  payment_method: string
  reference_number: string
  invoices: string[]
  status: 'scheduled' | 'processing' | 'completed' | 'failed'
}

export default function AccountsPayablePage() {

  // CRUD Operations - Auto-generated by Universal CRUD Fixer
  const loadSampleData = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/v1/${modulePath}?action=list&organization_id=${organizationId}`);
      const result = await response.json();
      
      if (result.success) {
        setData(result.data);
      } else {
        console.error('Failed to load data:', result.error);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async (formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'create',
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Create error:', error);
      throw error;
    }
  };

  const handleUpdate = async (id: string, formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id,
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Update error:', error);
      throw error;
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}?id=${id}&organization_id=${organizationId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Delete error:', error);
      throw error;
    }
  };

  // Auto-load data on component mount
  useEffect(() => {
    if (organizationId) {
      loadData();
    }
  }, [organizationId]);

  const router = useRouter()
  const [activeTab, setActiveTab] = useState('invoices')
  const [vendors, setVendors] = useState<Vendor[]>([])
  const [invoices, setInvoices] = useState<Invoice[]>([])
  const [payments, setPayments] = useState<Payment[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all')
  const [selectedInvoices, setSelectedInvoices] = useState<string[]>([])
  const [showAIAssistant, setShowAIAssistant] = useState(false)
  const [aiPrompt, setAiPrompt] = useState('')
  const [showPaymentDialog, setShowPaymentDialog] = useState(false)

  // Mock data with AI enhancements
  const mockVendors: Vendor[] = [
    {
      id: 'V001',
      vendor_code: 'SUPP-001',
      vendor_name: 'ABC Office Supplies',
      contact_person: 'John Smith',
      email: 'john@abcsupplies.com',
      phone: '(555) 123-4567',
      address: '123 Business Ave, Suite 100, New York, NY 10001',
      payment_terms: 'Net 30',
      credit_limit: 50000,
      current_balance: 12500,
      status: 'active',
      category: 'Office Supplies',
      risk_score: 85,
      payment_reliability: 'excellent',
      early_payment_discount: 2.5,
      avg_delivery_time: 3,
      quality_score: 92,
      last_audit_date: new Date('2024-10-15'),
      compliance_status: 'compliant',
      ai_insights: [
        {
          type: 'payment_optimization',
          message: 'Taking 2.5% early payment discount saves $312 annually. Recommend paying within 10 days.',
          confidence: 94,
          priority: 'medium',
          potential_savings: 312
        },
        {
          type: 'relationship',
          message: 'Vendor offers volume discounts at $50K annual spend. Currently at $45K - opportunity near.',
          confidence: 89,
          priority: 'medium'
        }
      ]
    },
    {
      id: 'V002',
      vendor_code: 'TECH-001',
      vendor_name: 'TechPro Solutions',
      contact_person: 'Sarah Johnson',
      email: 'sarah@techpro.com',
      phone: '(555) 987-6543',
      address: '456 Tech Park, Building B, San Francisco, CA 94105',
      payment_terms: 'Net 45',
      credit_limit: 100000,
      current_balance: 35000,
      status: 'active',
      category: 'Technology',
      risk_score: 72,
      payment_reliability: 'good',
      early_payment_discount: 0,
      avg_delivery_time: 7,
      quality_score: 88,
      last_audit_date: new Date('2024-08-20'),
      compliance_status: 'pending',
      ai_insights: [
        {
          type: 'risk_assessment',
          message: 'Vendor financial health declining. Monitor payment terms and consider backup suppliers.',
          confidence: 78,
          priority: 'high'
        },
        {
          type: 'cash_flow',
          message: 'Net 45 terms impact cash flow. Negotiate Net 30 for 15% annual savings.',
          confidence: 82,
          priority: 'medium',
          potential_savings: 8750
        }
      ]
    },
    {
      id: 'V003',
      vendor_code: 'UTIL-001',
      vendor_name: 'City Power & Light',
      contact_person: 'Mike Davis',
      email: 'billing@citypower.com',
      phone: '(555) 555-0100',
      address: '789 Utility Blvd, Chicago, IL 60601',
      payment_terms: 'Due on Receipt',
      credit_limit: 0,
      current_balance: 2800,
      status: 'active',
      category: 'Utilities',
      risk_score: 95,
      payment_reliability: 'excellent',
      early_payment_discount: 0,
      avg_delivery_time: 1,
      quality_score: 98,
      last_audit_date: new Date('2024-11-01'),
      compliance_status: 'compliant',
      ai_insights: [
        {
          type: 'payment_optimization',
          message: 'Utility autopay saves $25/month in processing costs. Total annual savings: $300.',
          confidence: 96,
          priority: 'low',
          potential_savings: 300
        }
      ]
    }
  ]

  const mockInvoices: Invoice[] = [
    {
      id: 'INV001',
      invoice_number: 'ABC-2024-1234',
      vendor_id: 'V001',
      vendor_name: 'ABC Office Supplies',
      invoice_date: new Date('2024-12-01'),
      due_date: new Date('2024-12-31'),
      total_amount: 3500,
      paid_amount: 0,
      status: 'pending',
      approval_status: 'pending',
      items: [
        { description: 'Office Chairs (5x)', account_code: '6100', amount: 2500, tax_amount: 250 },
        { description: 'Printer Paper', account_code: '6110', amount: 750, tax_amount: 75 }
      ],
      fraud_risk_score: 12,
      duplicate_check: 'clean',
      early_payment_eligible: true,
      payment_priority: 'medium',
      ai_insights: [
        {
          type: 'payment_optimization',
          message: 'Pay by Dec 11 to capture 2.5% early payment discount ($87.50 savings).',
          confidence: 96,
          priority: 'medium',
          potential_savings: 87.50
        },
        {
          type: 'cash_flow',
          message: 'Vendor has excellent reliability. Safe to prioritize for early payment.',
          confidence: 92,
          priority: 'low'
        }
      ]
    },
    {
      id: 'INV002',
      invoice_number: 'TECH-2024-5678',
      vendor_id: 'V002',
      vendor_name: 'TechPro Solutions',
      invoice_date: new Date('2024-11-15'),
      due_date: new Date('2024-12-30'),
      total_amount: 15000,
      paid_amount: 15000,
      status: 'paid',
      approval_status: 'approved',
      items: [
        { description: 'Software Licenses', account_code: '6200', amount: 15000, tax_amount: 0 }
      ],
      fraud_risk_score: 8,
      duplicate_check: 'clean',
      early_payment_eligible: false,
      payment_priority: 'low',
      ai_insights: [
        {
          type: 'relationship',
          message: 'Payment completed on time. Vendor relationship score improved to 88%.',
          confidence: 94,
          priority: 'low'
        }
      ]
    },
    {
      id: 'INV003',
      invoice_number: 'CPL-2024-NOV',
      vendor_id: 'V003',
      vendor_name: 'City Power & Light',
      invoice_date: new Date('2024-11-01'),
      due_date: new Date('2024-11-15'),
      total_amount: 2800,
      paid_amount: 0,
      status: 'overdue',
      approval_status: 'approved',
      items: [
        { description: 'Electricity - November', account_code: '6300', amount: 2800, tax_amount: 0 }
      ],
      fraud_risk_score: 5,
      duplicate_check: 'clean',
      early_payment_eligible: false,
      payment_priority: 'urgent',
      ai_insights: [
        {
          type: 'cash_flow',
          message: 'Critical utility payment overdue. Risk of service interruption. Pay immediately.',
          confidence: 98,
          priority: 'urgent'
        },
        {
          type: 'payment_optimization',
          message: 'Setup autopay to avoid late fees. Potential monthly savings: $25.',
          confidence: 91,
          priority: 'medium',
          potential_savings: 300
        }
      ]
    },
    {
      id: 'INV004',
      invoice_number: 'SUSP-2024-9999',
      vendor_id: 'V004',
      vendor_name: 'Suspicious Vendor LLC',
      invoice_date: new Date('2024-12-10'),
      due_date: new Date('2024-12-25'),
      total_amount: 8500,
      paid_amount: 0,
      status: 'pending',
      approval_status: 'pending',
      items: [
        { description: 'Consulting Services', account_code: '6400', amount: 8500, tax_amount: 0 }
      ],
      fraud_risk_score: 87,
      duplicate_check: 'potential_duplicate',
      early_payment_eligible: false,
      payment_priority: 'urgent',
      ai_insights: [
        {
          type: 'fraud_alert',
          message: 'HIGH RISK: New vendor with unusual payment terms. Similar invoice detected. Manual review required.',
          confidence: 94,
          priority: 'urgent'
        },
        {
          type: 'risk_assessment',
          message: 'Vendor registration recent (3 days ago). No payment history. Consider additional verification.',
          confidence: 89,
          priority: 'high'
        }
      ]
    }
  ]

  const mockPayments: Payment[] = [
    {
      id: 'PAY001',
      payment_date: new Date('2024-11-30'),
      vendor_id: 'V002',
      vendor_name: 'TechPro Solutions',
      amount: 15000,
      payment_method: 'ACH Transfer',
      reference_number: 'ACH-2024-1130-001',
      invoices: ['INV002'],
      status: 'completed'
    }
  ]

  useEffect(() => {
    loadMockData()
  }, [])

  const loadMockData = async () => {
    setLoading(true)
    try {
      setVendors(mockVendors)
      setInvoices(mockInvoices)
      setPayments(mockPayments)
    } catch (error) {
      console.error('Error loading AP data:', error)
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'paid':
      case 'completed':
      case 'active':
        return 'bg-green-100 text-green-700'
      case 'pending':
      case 'scheduled':
        return 'bg-yellow-100 text-yellow-700'
      case 'overdue':
      case 'failed':
        return 'bg-red-100 text-red-700'
      case 'approved':
        return 'bg-blue-100 text-blue-700'
      case 'draft':
        return 'bg-gray-100 text-gray-700'
      default:
        return 'bg-gray-100 text-gray-700'
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  const getRiskScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600'
    if (score >= 70) return 'text-blue-600'
    if (score >= 50) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getFraudRiskColor = (score: number) => {
    if (score <= 20) return 'text-green-600'
    if (score <= 50) return 'text-yellow-600'
    if (score <= 75) return 'text-orange-600'
    return 'text-red-600'
  }

  const generateAPAIInsights = () => {
    const totalPotentialSavings = vendors.reduce((sum, vendor) => 
      sum + (vendor.ai_insights.reduce((vSum, insight) => 
        vSum + (insight.potential_savings || 0), 0)), 0)
    
    const fraudAlerts = invoices.filter(inv => inv.fraud_risk_score > 70).length
    const earlyPayDiscounts = invoices.filter(inv => inv.early_payment_eligible).length

    return [
      {
        title: 'Fraud Detection Alert',
        message: `${fraudAlerts} invoices flagged for potential fraud. Highest risk: 87% (SUSP-2024-9999).`,
        type: 'fraud_alert',
        confidence: 94,
        action: 'Review suspicious invoices immediately',
        urgency: 'high'
      },
      {
        title: 'Payment Optimization',
        message: `${earlyPayDiscounts} invoices eligible for early payment discounts. Potential annual savings: ${formatCurrency(totalPotentialSavings)}.`,
        type: 'payment_optimization',
        confidence: 91,
        action: 'Schedule early payments for maximum discount capture',
        urgency: 'medium'
      },
      {
        title: 'Vendor Risk Assessment',
        message: 'TechPro Solutions showing declining financial health. Consider supplier diversification.',
        type: 'risk_assessment',
        confidence: 78,
        action: 'Evaluate alternative suppliers and adjust payment terms',
        urgency: 'medium'
      },
      {
        title: 'Cash Flow Optimization',
        message: 'Extending payment terms from Net 30 to Net 45 would improve cash flow by $125K monthly.',
        type: 'cash_flow',
        confidence: 86,
        action: 'Negotiate extended payment terms with top 5 vendors',
        urgency: 'low'
      }
    ]
  }

  const calculateAPMetrics = () => {
    const totalOutstanding = invoices
      .filter(inv => ['pending', 'approved', 'overdue'].includes(inv.status))
      .reduce((sum, inv) => sum + (inv.total_amount - inv.paid_amount), 0)

    const overdueAmount = invoices
      .filter(inv => inv.status === 'overdue')
      .reduce((sum, inv) => sum + (inv.total_amount - inv.paid_amount), 0)

    const pendingApproval = invoices.filter(inv => inv.approval_status === 'pending').length
    const avgDaysToPayment = 28 // Mock calculation

    return { totalOutstanding, overdueAmount, pendingApproval, avgDaysToPayment }
  }

  const metrics = calculateAPMetrics()
  const aiInsights = generateAPAIInsights()

  const handleBatchPayment = () => {
    if (selectedInvoices.length === 0) {
      alert('Please select invoices to pay')
      return
    }
    setShowPaymentDialog(true)
  }

  const handleApproveInvoice = (invoiceId: string) => {
    setInvoices(invoices.map(inv => 
      inv.id === invoiceId 
        ? { ...inv, approval_status: 'approved' as const }
        : inv
    ))
  }

  
  // Form Handling - Auto-generated by Universal CRUD Fixer
  const [formData, setFormData] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      if (selectedItem?.id) {
        await handleUpdate(selectedItem.id, formData);
      } else {
        await handleCreate(formData);
      }
      
      setFormData({});
      setSelectedItem(null);
      setShowDialog(false);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      <div className="container mx-auto p-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Accounts Payable
              </h1>
              <p className="mt-2 text-gray-600">
                Manage vendor invoices, payments, and cash flow optimization
              </p>
            </div>
            <div className="flex items-center gap-4">
              <Dialog open={showAIAssistant} onOpenChange={setShowAIAssistant}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="border-purple-200 hover:bg-purple-50">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Assistant
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      AP AI Assistant
                    </DialogTitle>
                    <DialogDescription>
                      Ask questions about vendors, invoices, or get payment recommendations
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 mt-4">
                    <Textarea
                      placeholder="Examples:
• Which invoices are due this week?
• Show me all overdue payments
• What's our total outstanding with ABC Office Supplies?
• Suggest optimal payment schedule for cash flow"
                      value={aiPrompt}
                      onChange={(e) => setAiPrompt(e.target.value)}
                      className="min-h-[100px]"
                    />
                    <Button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white">
                      <Sparkles className="w-4 h-4 mr-2" />
                      Get AI Insights
                    </Button>
                    
                    {/* Live AI Insights Preview */}
                    <div className="border-t pt-4">
                      <h4 className="font-semibold mb-3 flex items-center gap-2">
                        <Brain className="w-4 h-4 text-purple-600" />
                        Live AI Insights
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {aiInsights.slice(0, 4).map((insight, index) => (
                          <div key={index} className="p-3 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-100">
                            <div className="flex items-start justify-between mb-2">
                              <div className="flex items-center gap-2">
                                {insight.type === 'fraud_alert' && <Shield className="w-3 h-3 text-red-600" />}
                                {insight.type === 'payment_optimization' && <DollarSign className="w-3 h-3 text-green-600" />}
                                {insight.type === 'risk_assessment' && <AlertTriangle className="w-3 h-3 text-orange-600" />}
                                {insight.type === 'cash_flow' && <TrendingUp className="w-3 h-3 text-blue-600" />}
                                <p className="font-medium text-sm text-purple-900">{insight.title}</p>
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {insight.confidence}%
                              </Badge>
                            </div>
                            <p className="text-xs text-purple-700 mb-2">{insight.message}</p>
                            <p className="text-xs text-purple-600 font-medium">{insight.action}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg">
                <Plus className="w-4 h-4 mr-2" />
                New Invoice
              </Button>
            </div>
          </div>
        </div>

        {/* Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Outstanding</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {formatCurrency(metrics.totalOutstanding)}
                  </p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <DollarSign className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Overdue Amount</p>
                  <p className="text-2xl font-bold text-red-600">
                    {formatCurrency(metrics.overdueAmount)}
                  </p>
                </div>
                <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                  <AlertTriangle className="w-6 h-6 text-red-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Pending Approval</p>
                  <p className="text-2xl font-bold text-yellow-600">
                    {metrics.pendingApproval}
                  </p>
                </div>
                <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <Hourglass className="w-6 h-6 text-yellow-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Avg Payment Days</p>
                  <p className="text-2xl font-bold text-green-600">
                    {metrics.avgDaysToPayment}
                  </p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                  <Timer className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* AI Insights Banner */}
        <Alert className="mb-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
          <Brain className="h-4 w-4 text-purple-600" />
          <AlertTitle>AI Payment Intelligence Active</AlertTitle>
          <AlertDescription>
            <div className="flex items-center justify-between">
              <span>
                AI detected 1 fraud alert, {aiInsights.find(i => i.type === 'payment_optimization')?.message.match(/\d+/)?.[0] || 3} early payment opportunities 
                worth {formatCurrency(9362)} in potential savings, and 1 critical vendor risk requiring attention.
              </span>
              <Button size="sm" variant="outline" className="border-purple-300" onClick={() => setShowAIAssistant(true)}>
                <Sparkles className="w-4 h-4 mr-1" />
                View AI Insights
              </Button>
            </div>
          </AlertDescription>
        </Alert>

        {/* Main Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid grid-cols-6 w-full max-w-4xl">
            <TabsTrigger value="invoices">Invoices</TabsTrigger>
            <TabsTrigger value="vendors">Vendors</TabsTrigger>
            <TabsTrigger value="payments">Payments</TabsTrigger>
            <TabsTrigger value="approvals">Approvals</TabsTrigger>
            <TabsTrigger value="ai-insights">AI Insights</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
          </TabsList>

          {/* Invoices Tab */}
          <TabsContent value="invoices" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        placeholder="Search invoices..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Invoices</SelectItem>
                      <SelectItem value="pending">Pending</SelectItem>
                      <SelectItem value="approved">Approved</SelectItem>
                      <SelectItem value="paid">Paid</SelectItem>
                      <SelectItem value="overdue">Overdue</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button 
                    variant="outline"
                    onClick={handleBatchPayment}
                    disabled={selectedInvoices.length === 0}
                  >
                    <Banknote className="w-4 h-4 mr-2" />
                    Pay Selected ({selectedInvoices.length})
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Invoices List */}
            <Card>
              <CardHeader>
                <CardTitle>Open Invoices</CardTitle>
                <CardDescription>Review and process vendor invoices</CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-12">
                        <Checkbox 
                          checked={selectedInvoices.length === invoices.length}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setSelectedInvoices(invoices.map(inv => inv.id))
                            } else {
                              setSelectedInvoices([])
                            }
                          }}
                        />
                      </TableHead>
                      <TableHead>Invoice #</TableHead>
                      <TableHead>Vendor</TableHead>
                      <TableHead>Invoice Date</TableHead>
                      <TableHead>Due Date</TableHead>
                      <TableHead className="text-right">Amount</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {invoices.map((invoice) => (
                      <TableRow key={invoice.id}>
                        <TableCell>
                          <Checkbox
                            checked={selectedInvoices.includes(invoice.id)}
                            onCheckedChange={(checked) => {
                              if (checked) {
                                setSelectedInvoices([...selectedInvoices, invoice.id])
                              } else {
                                setSelectedInvoices(selectedInvoices.filter(id => id !== invoice.id))
                              }
                            }}
                          />
                        </TableCell>
                        <TableCell className="font-medium">
                          <div className="flex items-center gap-2">
                            {invoice.invoice_number}
                            {invoice.fraud_risk_score > 70 && (
                              <Shield className="w-4 h-4 text-red-600" title={`Fraud Risk: ${invoice.fraud_risk_score}%`} />
                            )}
                            {invoice.early_payment_eligible && (
                              <DollarSign className="w-4 h-4 text-green-600" title="Early payment discount available" />
                            )}
                            {invoice.duplicate_check === 'potential_duplicate' && (
                              <Copy className="w-4 h-4 text-orange-600" title="Potential duplicate" />
                            )}
                          </div>
                        </TableCell>
                        <TableCell>{invoice.vendor_name}</TableCell>
                        <TableCell>{invoice.invoice_date.toLocaleDateString()}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {invoice.due_date.toLocaleDateString()}
                            {invoice.status === 'overdue' && (
                              <AlertCircle className="w-4 h-4 text-red-600" />
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="text-right font-medium">
                          {formatCurrency(invoice.total_amount)}
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-col gap-1">
                            <Badge className={getStatusColor(invoice.status)}>
                              {invoice.status.toUpperCase()}
                            </Badge>
                            <Badge 
                              className={`text-xs ${
                                invoice.payment_priority === 'urgent' ? 'bg-red-100 text-red-700' :
                                invoice.payment_priority === 'high' ? 'bg-orange-100 text-orange-700' :
                                invoice.payment_priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                                'bg-green-100 text-green-700'
                              }`}
                            >
                              {invoice.payment_priority.toUpperCase()}
                            </Badge>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Button variant="ghost" size="sm">
                              <Eye className="w-4 h-4" />
                            </Button>
                            {invoice.approval_status === 'pending' && (
                              <Button 
                                variant="ghost" 
                                size="sm"
                                onClick={() => handleApproveInvoice(invoice.id)}
                              >
                                <Check className="w-4 h-4 text-green-600" />
                              </Button>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Vendors Tab */}
          <TabsContent value="vendors" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Vendor Management</CardTitle>
                    <CardDescription>Manage vendor information and relationships</CardDescription>
                  </div>
                  <Button>
                    <Plus className="w-4 h-4 mr-2" />
                    Add Vendor
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {vendors.map((vendor) => (
                    <motion.div
                      key={vendor.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h4 className="text-lg font-semibold">{vendor.vendor_name}</h4>
                            <Badge className={getStatusColor(vendor.status)}>
                              {vendor.status.toUpperCase()}
                            </Badge>
                            <Badge className={getStatusColor(vendor.payment_reliability)}>
                              {vendor.payment_reliability.toUpperCase()}
                            </Badge>
                            <Badge variant="outline">{vendor.category}</Badge>
                            <div className="flex items-center gap-1">
                              <Star className="w-4 h-4 text-yellow-500" />
                              <span className={`text-sm font-medium ${getRiskScoreColor(vendor.risk_score)}`}>
                                {vendor.risk_score}
                              </span>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600">
                            <div className="flex items-center gap-2">
                              <Building2 className="w-4 h-4" />
                              <span>{vendor.vendor_code}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Users className="w-4 h-4" />
                              <span>{vendor.contact_person}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Mail className="w-4 h-4" />
                              <span>{vendor.email}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Phone className="w-4 h-4" />
                              <span>{vendor.phone}</span>
                            </div>
                          </div>
                          <div className="mt-3 flex items-center gap-6 text-sm">
                            <div>
                              <span className="text-gray-500">Payment Terms:</span>
                              <span className="ml-2 font-medium">{vendor.payment_terms}</span>
                            </div>
                            <div>
                              <span className="text-gray-500">Credit Limit:</span>
                              <span className="ml-2 font-medium">{formatCurrency(vendor.credit_limit)}</span>
                            </div>
                            <div>
                              <span className="text-gray-500">Current Balance:</span>
                              <span className="ml-2 font-medium text-blue-600">
                                {formatCurrency(vendor.current_balance)}
                              </span>
                            </div>
                            <div>
                              <span className="text-gray-500">Quality Score:</span>
                              <span className="ml-2 font-medium">{vendor.quality_score}%</span>
                            </div>
                          </div>
                          
                          {/* AI Insights for Vendor */}
                          {vendor.ai_insights.length > 0 && (
                            <div className="mt-4 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-3 border border-purple-100">
                              <div className="flex items-center gap-2 mb-2">
                                <Brain className="w-4 h-4 text-purple-600" />
                                <span className="text-sm font-medium text-purple-900">AI Vendor Intelligence</span>
                              </div>
                              <div className="space-y-2">
                                {vendor.ai_insights.slice(0, 2).map((insight, index) => (
                                  <div key={index} className="flex items-start gap-2">
                                    <div className="w-5 h-5 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                                      {insight.type === 'payment_optimization' && <DollarSign className="w-3 h-3 text-green-600" />}
                                      {insight.type === 'risk_assessment' && <Shield className="w-3 h-3 text-orange-600" />}
                                      {insight.type === 'relationship' && <Users className="w-3 h-3 text-blue-600" />}
                                      {insight.type === 'cash_flow' && <TrendingUp className="w-3 h-3 text-purple-600" />}
                                    </div>
                                    <div className="flex-1">
                                      <p className="text-xs text-purple-800">{insight.message}</p>
                                      {insight.potential_savings && (
                                        <p className="text-xs font-medium text-green-600 mt-1">
                                          Potential savings: {formatCurrency(insight.potential_savings)}
                                        </p>
                                      )}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <ChevronRight className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Payments Tab */}
          <TabsContent value="payments" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Payment Schedule</CardTitle>
                    <CardDescription>Manage and track vendor payments</CardDescription>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline">
                      <Calendar className="w-4 h-4 mr-2" />
                      Schedule Payment
                    </Button>
                    <Button>
                      <Send className="w-4 h-4 mr-2" />
                      Process Payments
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Payment Date</TableHead>
                      <TableHead>Vendor</TableHead>
                      <TableHead>Payment Method</TableHead>
                      <TableHead>Reference</TableHead>
                      <TableHead className="text-right">Amount</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Invoices</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {payments.map((payment) => (
                      <TableRow key={payment.id}>
                        <TableCell>{payment.payment_date.toLocaleDateString()}</TableCell>
                        <TableCell>{payment.vendor_name}</TableCell>
                        <TableCell>{payment.payment_method}</TableCell>
                        <TableCell className="font-mono text-sm">{payment.reference_number}</TableCell>
                        <TableCell className="text-right font-medium">
                          {formatCurrency(payment.amount)}
                        </TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(payment.status)}>
                            {payment.status.toUpperCase()}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline">{payment.invoices.length} invoice(s)</Badge>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Approvals Tab */}
          <TabsContent value="approvals" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Pending Approvals</CardTitle>
                <CardDescription>Review and approve vendor invoices</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {invoices
                    .filter(inv => inv.approval_status === 'pending')
                    .map((invoice) => (
                      <motion.div
                        key={invoice.id}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        className="border rounded-lg p-4 bg-yellow-50"
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div>
                            <h4 className="font-semibold">{invoice.vendor_name}</h4>
                            <p className="text-sm text-gray-600">
                              Invoice #{invoice.invoice_number} • Due {invoice.due_date.toLocaleDateString()}
                            </p>
                          </div>
                          <p className="text-xl font-bold">{formatCurrency(invoice.total_amount)}</p>
                        </div>
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Description</TableHead>
                              <TableHead>Account</TableHead>
                              <TableHead className="text-right">Amount</TableHead>
                              <TableHead className="text-right">Tax</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {invoice.items.map((item, index) => (
                              <TableRow key={index}>
                                <TableCell>{item.description}</TableCell>
                                <TableCell>{item.account_code}</TableCell>
                                <TableCell className="text-right">{formatCurrency(item.amount)}</TableCell>
                                <TableCell className="text-right">{formatCurrency(item.tax_amount)}</TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                        <div className="flex items-center justify-end gap-2 mt-4">
                          <Button variant="outline" className="text-red-600 hover:bg-red-50">
                            <X className="w-4 h-4 mr-2" />
                            Reject
                          </Button>
                          <Button 
                            className="bg-green-600 hover:bg-green-700 text-white"
                            onClick={() => handleApproveInvoice(invoice.id)}
                          >
                            <Check className="w-4 h-4 mr-2" />
                            Approve Invoice
                          </Button>
                        </div>
                      </motion.div>
                    ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Insights Tab */}
          <TabsContent value="ai-insights" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {aiInsights.map((insight, index) => (
                <Card key={index} className="border-purple-200 hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        insight.type === 'fraud_alert' ? 'bg-red-100' :
                        insight.type === 'payment_optimization' ? 'bg-green-100' :
                        insight.type === 'risk_assessment' ? 'bg-orange-100' :
                        'bg-blue-100'
                      }`}>
                        {insight.type === 'fraud_alert' && <Shield className="w-4 h-4 text-red-600" />}
                        {insight.type === 'payment_optimization' && <DollarSign className="w-4 h-4 text-green-600" />}
                        {insight.type === 'risk_assessment' && <AlertTriangle className="w-4 h-4 text-orange-600" />}
                        {insight.type === 'cash_flow' && <TrendingUp className="w-4 h-4 text-blue-600" />}
                      </div>
                      {insight.title}
                    </CardTitle>
                    <Badge variant="outline">{insight.confidence}% confidence</Badge>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-700 mb-4">{insight.message}</p>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-900 mb-1">Recommended Action:</p>
                      <p className="text-sm text-gray-600">{insight.action}</p>
                    </div>
                    <Button className="w-full mt-4" variant="outline">
                      <Zap className="w-4 h-4 mr-2" />
                      Implement Suggestion
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Reports Tab */}
          <TabsContent value="reports" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="w-5 h-5" />
                    AP Aging Report
                  </CardTitle>
                  <CardDescription>Outstanding payables by age</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Current</span>
                      <span className="font-medium">{formatCurrency(45000)}</span>
                    </div>
                    <Progress value={60} className="h-2" />
                    <div className="flex items-center justify-between">
                      <span className="text-sm">1-30 Days</span>
                      <span className="font-medium">{formatCurrency(12000)}</span>
                    </div>
                    <Progress value={20} className="h-2" />
                    <div className="flex items-center justify-between">
                      <span className="text-sm">31-60 Days</span>
                      <span className="font-medium">{formatCurrency(8000)}</span>
                    </div>
                    <Progress value={15} className="h-2" />
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-red-600">Over 60 Days</span>
                      <span className="font-medium text-red-600">{formatCurrency(2800)}</span>
                    </div>
                    <Progress value={5} className="h-2 bg-red-100" />
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    Generate Full Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="w-5 h-5" />
                    Vendor Analysis
                  </CardTitle>
                  <CardDescription>Spending by vendor category</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-48 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center mb-4">
                    <p className="text-gray-500">Chart placeholder</p>
                  </div>
                  <Button className="w-full" variant="outline">
                    View Details
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <DollarSign className="w-5 h-5" />
                    Cash Flow Impact
                  </CardTitle>
                  <CardDescription>Projected cash requirements</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button className="w-full" variant="outline">
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileCheck className="w-5 h-5" />
                    Payment History
                  </CardTitle>
                  <CardDescription>Historical payment analysis</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button className="w-full" variant="outline">
                    Generate Report
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

        {/* Payment Dialog */}
        <Dialog open={showPaymentDialog} onOpenChange={setShowPaymentDialog}>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle>Process Batch Payment</DialogTitle>
              <DialogDescription>
                Review and confirm payment for selected invoices
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4 mt-4">
              <div className="p-4 bg-gray-50 rounded-lg">
                <p className="text-sm text-gray-600">Selected Invoices</p>
                <p className="text-2xl font-bold">{selectedInvoices.length}</p>
              </div>
              <div className="p-4 bg-blue-50 rounded-lg">
                <p className="text-sm text-gray-600">Total Amount</p>
                <p className="text-2xl font-bold text-blue-600">
                  {formatCurrency(
                    invoices
                      .filter(inv => selectedInvoices.includes(inv.id))
                      .reduce((sum, inv) => sum + inv.total_amount, 0)
                  )}
                </p>
              </div>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select payment method" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ach">ACH Transfer</SelectItem>
                  <SelectItem value="wire">Wire Transfer</SelectItem>
                  <SelectItem value="check">Check</SelectItem>
                  <SelectItem value="card">Credit Card</SelectItem>
                </SelectContent>
              </Select>
              <Input type="date" placeholder="Payment date" />
              <div className="flex items-center gap-2">
                <Button 
                  variant="outline" 
                  className="flex-1"
                  onClick={() => setShowPaymentDialog(false)}
                >
                  Cancel
                </Button>
                <Button className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
                  <Send className="w-4 h-4 mr-2" />
                  Process Payment
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  )
}