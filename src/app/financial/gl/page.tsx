'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  BookOpen, TrendingUp, TrendingDown, DollarSign, 
  FileText, Filter, Search, Download, Upload,
  Calendar, ChevronRight, Plus, ArrowUpDown,
  Building2, Globe, BarChart3, PieChart,
  AlertCircle, CheckCircle, Settings, RefreshCw,
  Bot, Sparkles, Zap, Brain, Send, Copy
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Textarea } from '@/components/ui/textarea'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { motion } from 'framer-motion'
import { universalApi } from '@/lib/universal-api'

interface GLAccount {
  id: string
  account_code: string
  account_name: string
  account_type: string
  normal_balance: 'debit' | 'credit'
  current_balance: number
  parent_account?: string
  is_active: boolean
  description?: string
}

interface GLTransaction {
  id: string
  transaction_date: Date
  reference_number: string
  description: string
  entries: GLEntry[]
  total_debits: number
  total_credits: number
  status: 'posted' | 'pending' | 'draft'
}

interface GLEntry {
  account_code: string
  account_name: string
  debit_amount: number
  credit_amount: number
  description?: string
}

export default function GeneralLedgerPage() {

  // CRUD Operations - Auto-generated by Universal CRUD Fixer
  const loadData = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/v1/${modulePath}?action=list&organization_id=${organizationId}`);
      const result = await response.json();
      
      if (result.success) {
        setData(result.data);
      } else {
        console.error('Failed to load data:', result.error);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async (formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'create',
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Create error:', error);
      throw error;
    }
  };

  const handleUpdate = async (id: string, formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id,
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Update error:', error);
      throw error;
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}?id=${id}&organization_id=${organizationId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Delete error:', error);
      throw error;
    }
  };

  // Auto-load data on component mount
  useEffect(() => {
    if (organizationId) {
      loadData();
    }
  }, [organizationId]);

  const router = useRouter()
  const [activeTab, setActiveTab] = useState('transactions')
  const [accounts, setAccounts] = useState<GLAccount[]>([])
  const [transactions, setTransactions] = useState<GLTransaction[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [dateRange, setDateRange] = useState('current_month')
  const [accountFilter, setAccountFilter] = useState('all')
  const [selectedCountry, setSelectedCountry] = useState('usa')
  const [selectedIndustry, setSelectedIndustry] = useState('general')
  const [showDigitalAccountant, setShowDigitalAccountant] = useState(false)
  const [aiPrompt, setAiPrompt] = useState('')
  const [aiGenerating, setAiGenerating] = useState(false)
  const [generatedEntry, setGeneratedEntry] = useState<GLTransaction | null>(null)

  // Mock data for demonstration
  const mockAccounts: GLAccount[] = [
    { id: '1', account_code: '1000', account_name: 'Cash and Cash Equivalents', account_type: 'Asset', normal_balance: 'debit', current_balance: 125000, is_active: true },
    { id: '2', account_code: '1100', account_name: 'Accounts Receivable', account_type: 'Asset', normal_balance: 'debit', current_balance: 45000, is_active: true },
    { id: '3', account_code: '1200', account_name: 'Inventory', account_type: 'Asset', normal_balance: 'debit', current_balance: 78000, is_active: true },
    { id: '4', account_code: '2000', account_name: 'Accounts Payable', account_type: 'Liability', normal_balance: 'credit', current_balance: 32000, is_active: true },
    { id: '5', account_code: '3000', account_name: 'Common Stock', account_type: 'Equity', normal_balance: 'credit', current_balance: 100000, is_active: true },
    { id: '6', account_code: '4000', account_name: 'Sales Revenue', account_type: 'Revenue', normal_balance: 'credit', current_balance: 285000, is_active: true },
    { id: '7', account_code: '5000', account_name: 'Cost of Goods Sold', account_type: 'Expense', normal_balance: 'debit', current_balance: 142000, is_active: true },
    { id: '8', account_code: '6000', account_name: 'Operating Expenses', account_type: 'Expense', normal_balance: 'debit', current_balance: 67000, is_active: true },
  ]

  const mockTransactions: GLTransaction[] = [
    {
      id: 'GL-2024-001',
      transaction_date: new Date('2024-12-15'),
      reference_number: 'INV-2024-1234',
      description: 'Customer Invoice - ABC Corp',
      entries: [
        { account_code: '1100', account_name: 'Accounts Receivable', debit_amount: 5000, credit_amount: 0 },
        { account_code: '4000', account_name: 'Sales Revenue', debit_amount: 0, credit_amount: 5000 }
      ],
      total_debits: 5000,
      total_credits: 5000,
      status: 'posted'
    },
    {
      id: 'GL-2024-002',
      transaction_date: new Date('2024-12-14'),
      reference_number: 'BILL-2024-567',
      description: 'Vendor Bill - Office Supplies',
      entries: [
        { account_code: '6000', account_name: 'Operating Expenses', debit_amount: 1200, credit_amount: 0 },
        { account_code: '2000', account_name: 'Accounts Payable', debit_amount: 0, credit_amount: 1200 }
      ],
      total_debits: 1200,
      total_credits: 1200,
      status: 'posted'
    }
  ]

  useEffect(() => {
    loadSampleData()
  }, [])

  const loadSampleData = async () => {
    setLoading(true)
    try {
      // In production, load from universalApi
      setAccounts(mockAccounts)
      setTransactions(mockTransactions)
    } catch (error) {
      console.error('Error loading GL data:', error)
    } finally {
      setLoading(false)
    }
  }

  const getAccountTypeColor = (type: string) => {
    switch (type) {
      case 'Asset': return 'bg-blue-100 text-blue-700'
      case 'Liability': return 'bg-red-100 text-red-700'
      case 'Equity': return 'bg-purple-100 text-purple-700'
      case 'Revenue': return 'bg-green-100 text-green-700'
      case 'Expense': return 'bg-orange-100 text-orange-700'
      default: return 'bg-gray-100 text-gray-700'
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  const calculateTrialBalance = () => {
    let totalDebits = 0
    let totalCredits = 0

    accounts.forEach(account => {
      if (account.normal_balance === 'debit' && account.current_balance > 0) {
        totalDebits += account.current_balance
      } else if (account.normal_balance === 'credit' && account.current_balance > 0) {
        totalCredits += account.current_balance
      }
    })

    return { totalDebits, totalCredits, isBalanced: Math.abs(totalDebits - totalCredits) < 0.01 }
  }

  const trialBalance = calculateTrialBalance()

  const handleAIGenerate = async () => {
    setAiGenerating(true)
    try {
      // Simulate AI generation
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Parse the AI prompt and generate appropriate journal entry
      const entry: GLTransaction = {
        id: `GL-${new Date().getFullYear()}-${Math.random().toString(36).substr(2, 9)}`,
        transaction_date: new Date(),
        reference_number: `AI-${new Date().getTime()}`,
        description: aiPrompt,
        entries: [],
        total_debits: 0,
        total_credits: 0,
        status: 'draft'
      }

      // Simple AI logic to parse common transactions
      const lowerPrompt = aiPrompt.toLowerCase()
      
      if (lowerPrompt.includes('sale') || lowerPrompt.includes('invoice')) {
        const amount = parseFloat(lowerPrompt.match(/\d+(\.\d+)?/)?.[0] || '1000')
        entry.entries = [
          { account_code: '1100', account_name: 'Accounts Receivable', debit_amount: amount, credit_amount: 0 },
          { account_code: '4000', account_name: 'Sales Revenue', debit_amount: 0, credit_amount: amount }
        ]
        entry.total_debits = amount
        entry.total_credits = amount
      } else if (lowerPrompt.includes('expense') || lowerPrompt.includes('purchase')) {
        const amount = parseFloat(lowerPrompt.match(/\d+(\.\d+)?/)?.[0] || '500')
        entry.entries = [
          { account_code: '6000', account_name: 'Operating Expenses', debit_amount: amount, credit_amount: 0 },
          { account_code: '1000', account_name: 'Cash and Cash Equivalents', debit_amount: 0, credit_amount: amount }
        ]
        entry.total_debits = amount
        entry.total_credits = amount
      } else if (lowerPrompt.includes('payment') || lowerPrompt.includes('pay')) {
        const amount = parseFloat(lowerPrompt.match(/\d+(\.\d+)?/)?.[0] || '750')
        entry.entries = [
          { account_code: '2000', account_name: 'Accounts Payable', debit_amount: amount, credit_amount: 0 },
          { account_code: '1000', account_name: 'Cash and Cash Equivalents', debit_amount: 0, credit_amount: amount }
        ]
        entry.total_debits = amount
        entry.total_credits = amount
      }

      setGeneratedEntry(entry)
    } catch (error) {
      console.error('Error generating journal entry:', error)
    } finally {
      setAiGenerating(false)
    }
  }

  const handleApplyGeneratedEntry = () => {
    if (generatedEntry) {
      setTransactions([generatedEntry, ...transactions])
      setGeneratedEntry(null)
      setAiPrompt('')
      setShowDigitalAccountant(false)
    }
  }

  
  // Form Handling - Auto-generated by Universal CRUD Fixer
  const [formData, setFormData] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      if (selectedItem?.id) {
        await handleUpdate(selectedItem.id, formData);
      } else {
        await handleCreate(formData);
      }
      
      setFormData({});
      setSelectedItem(null);
      setShowDialog(false);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      <div className="container mx-auto p-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                General Ledger
              </h1>
              <p className="mt-2 text-gray-600">
                Complete financial transaction management with global Chart of Accounts
              </p>
            </div>
            <div className="flex items-center gap-4">
              <Button variant="outline" onClick={() => router.push('/coa')}>
                <Settings className="w-4 h-4 mr-2" />
                COA Setup
              </Button>
              <Dialog open={showDigitalAccountant} onOpenChange={setShowDigitalAccountant}>
                <DialogTrigger asChild>
                  <Button className="bg-gradient-to-r from-purple-600 to-pink-600 text-white hover:shadow-lg">
                    <Bot className="w-4 h-4 mr-2" />
                    Digital Accountant
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      AI Digital Accountant
                    </DialogTitle>
                    <DialogDescription>
                      Describe your transaction in plain English and let AI create the journal entry for you
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 mt-4">
                    <div>
                      <Label>Transaction Description</Label>
                      <Textarea
                        placeholder="Examples:
• Recorded sale of $5,000 to ABC Company
• Paid $1,200 for office supplies
• Received payment of $3,500 from XYZ Corp
• Purchased equipment for $8,000 on credit"
                        value={aiPrompt}
                        onChange={(e) => setAiPrompt(e.target.value)}
                        className="min-h-[120px] mt-2"
                      />
                    </div>

                    {!generatedEntry && (
                      <Button 
                        onClick={handleAIGenerate}
                        disabled={!aiPrompt || aiGenerating}
                        className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white"
                      >
                        {aiGenerating ? (
                          <>
                            <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                            Generating Journal Entry...
                          </>
                        ) : (
                          <>
                            <Sparkles className="w-4 h-4 mr-2" />
                            Generate Journal Entry
                          </>
                        )}
                      </Button>
                    )}

                    {generatedEntry && (
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="border rounded-lg p-4 bg-gradient-to-br from-purple-50 to-pink-50"
                      >
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold flex items-center gap-2">
                            <Zap className="w-4 h-4 text-purple-600" />
                            Generated Journal Entry
                          </h4>
                          <Badge variant="outline">Draft</Badge>
                        </div>
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Account</TableHead>
                              <TableHead className="text-right">Debit</TableHead>
                              <TableHead className="text-right">Credit</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {generatedEntry.entries.map((entry, index) => (
                              <TableRow key={index}>
                                <TableCell>
                                  <span className="font-medium">{entry.account_code}</span> - {entry.account_name}
                                </TableCell>
                                <TableCell className="text-right">
                                  {entry.debit_amount > 0 ? formatCurrency(entry.debit_amount) : '-'}
                                </TableCell>
                                <TableCell className="text-right">
                                  {entry.credit_amount > 0 ? formatCurrency(entry.credit_amount) : '-'}
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                        <div className="flex items-center gap-2 mt-4">
                          <Button onClick={handleApplyGeneratedEntry} className="flex-1">
                            <CheckCircle className="w-4 h-4 mr-2" />
                            Apply Entry
                          </Button>
                          <Button 
                            variant="outline" 
                            onClick={() => {
                              setGeneratedEntry(null)
                              setAiPrompt('')
                            }}
                          >
                            <RefreshCw className="w-4 h-4 mr-2" />
                            Try Again
                          </Button>
                        </div>
                      </motion.div>
                    )}

                    <Alert className="bg-gradient-to-br from-blue-50 to-purple-50">
                      <Brain className="h-4 w-4" />
                      <AlertTitle>AI-Powered Accounting</AlertTitle>
                      <AlertDescription>
                        HERA's Smart Code system understands accounting principles and automatically creates
                        balanced journal entries following your Chart of Accounts structure.
                      </AlertDescription>
                    </Alert>
                  </div>
                </DialogContent>
              </Dialog>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg">
                <Plus className="w-4 h-4 mr-2" />
                New Journal Entry
              </Button>
            </div>
          </div>
        </div>

        {/* Global COA Selection */}
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-6">
                <div>
                  <Label className="text-sm font-medium">Country Template</Label>
                  <Select value={selectedCountry} onValueChange={setSelectedCountry}>
                    <SelectTrigger className="w-48 mt-1">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="usa">🇺🇸 United States (US GAAP)</SelectItem>
                      <SelectItem value="uk">🇬🇧 United Kingdom (UK GAAP)</SelectItem>
                      <SelectItem value="canada">🇨🇦 Canada (ASPE)</SelectItem>
                      <SelectItem value="india">🇮🇳 India (Ind AS)</SelectItem>
                      <SelectItem value="germany">🇩🇪 Germany (HGB)</SelectItem>
                      <SelectItem value="france">🇫🇷 France (PCG)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label className="text-sm font-medium">Industry Template</Label>
                  <Select value={selectedIndustry} onValueChange={setSelectedIndustry}>
                    <SelectTrigger className="w-48 mt-1">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="general">General Business</SelectItem>
                      <SelectItem value="manufacturing">Manufacturing</SelectItem>
                      <SelectItem value="retail">Retail & E-commerce</SelectItem>
                      <SelectItem value="healthcare">Healthcare</SelectItem>
                      <SelectItem value="restaurant">Restaurant & Hospitality</SelectItem>
                      <SelectItem value="saas">SaaS & Technology</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="text-sm">
                  <Globe className="w-3 h-3 mr-1" />
                  132 Global Templates
                </Badge>
                <Button variant="ghost" size="sm">
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Apply Template
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Trial Balance Summary */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Assets</p>
                  <p className="text-2xl font-bold text-blue-600">
                    {formatCurrency(accounts.filter(a => a.account_type === 'Asset').reduce((sum, a) => sum + a.current_balance, 0))}
                  </p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <TrendingUp className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Liabilities</p>
                  <p className="text-2xl font-bold text-red-600">
                    {formatCurrency(accounts.filter(a => a.account_type === 'Liability').reduce((sum, a) => sum + a.current_balance, 0))}
                  </p>
                </div>
                <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                  <TrendingDown className="w-6 h-6 text-red-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Equity</p>
                  <p className="text-2xl font-bold text-purple-600">
                    {formatCurrency(accounts.filter(a => a.account_type === 'Equity').reduce((sum, a) => sum + a.current_balance, 0))}
                  </p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <Building2 className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Trial Balance</p>
                  <p className="text-2xl font-bold">
                    {trialBalance.isBalanced ? (
                      <span className="text-green-600">Balanced</span>
                    ) : (
                      <span className="text-red-600">Out of Balance</span>
                    )}
                  </p>
                </div>
                <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${
                  trialBalance.isBalanced ? 'bg-green-100' : 'bg-red-100'
                }`}>
                  {trialBalance.isBalanced ? (
                    <CheckCircle className="w-6 h-6 text-green-600" />
                  ) : (
                    <AlertCircle className="w-6 h-6 text-red-600" />
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid grid-cols-4 w-full max-w-2xl">
            <TabsTrigger value="transactions">Transactions</TabsTrigger>
            <TabsTrigger value="accounts">Chart of Accounts</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
            <TabsTrigger value="analysis">Analysis</TabsTrigger>
          </TabsList>

          {/* Transactions Tab */}
          <TabsContent value="transactions" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        placeholder="Search transactions..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <Select value={dateRange} onValueChange={setDateRange}>
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="today">Today</SelectItem>
                      <SelectItem value="current_month">Current Month</SelectItem>
                      <SelectItem value="last_month">Last Month</SelectItem>
                      <SelectItem value="current_quarter">Current Quarter</SelectItem>
                      <SelectItem value="current_year">Current Year</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={accountFilter} onValueChange={setAccountFilter}>
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Accounts</SelectItem>
                      <SelectItem value="assets">Assets Only</SelectItem>
                      <SelectItem value="liabilities">Liabilities Only</SelectItem>
                      <SelectItem value="revenue">Revenue Only</SelectItem>
                      <SelectItem value="expenses">Expenses Only</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline">
                    <Filter className="w-4 h-4 mr-2" />
                    More Filters
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Transactions List */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Journal Entries</CardTitle>
                  <div className="flex items-center gap-2">
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => setShowDigitalAccountant(true)}
                      className="border-purple-200 hover:bg-purple-50"
                    >
                      <Bot className="w-4 h-4 mr-2 text-purple-600" />
                      AI Assistant
                    </Button>
                    <Button variant="outline" size="sm">
                      <Upload className="w-4 h-4 mr-2" />
                      Import
                    </Button>
                    <Button variant="outline" size="sm">
                      <Download className="w-4 h-4 mr-2" />
                      Export
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {transactions.map((transaction) => (
                    <motion.div
                      key={transaction.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start justify-between mb-3">
                        <div>
                          <div className="flex items-center gap-3">
                            <h4 className="font-semibold">{transaction.reference_number}</h4>
                            <Badge variant="outline" className={
                              transaction.status === 'posted' ? 'bg-green-50 text-green-700' :
                              transaction.status === 'pending' ? 'bg-yellow-50 text-yellow-700' :
                              'bg-gray-50 text-gray-700'
                            }>
                              {transaction.status.toUpperCase()}
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-600 mt-1">{transaction.description}</p>
                          <p className="text-xs text-gray-500 mt-1">
                            {transaction.transaction_date.toLocaleDateString()}
                          </p>
                        </div>
                        <Button variant="ghost" size="sm">
                          <ChevronRight className="w-4 h-4" />
                        </Button>
                      </div>
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Account</TableHead>
                            <TableHead className="text-right">Debit</TableHead>
                            <TableHead className="text-right">Credit</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {transaction.entries.map((entry, index) => (
                            <TableRow key={index}>
                              <TableCell>
                                <span className="font-medium">{entry.account_code}</span> - {entry.account_name}
                              </TableCell>
                              <TableCell className="text-right">
                                {entry.debit_amount > 0 ? formatCurrency(entry.debit_amount) : '-'}
                              </TableCell>
                              <TableCell className="text-right">
                                {entry.credit_amount > 0 ? formatCurrency(entry.credit_amount) : '-'}
                              </TableCell>
                            </TableRow>
                          ))}
                          <TableRow className="font-semibold">
                            <TableCell>Total</TableCell>
                            <TableCell className="text-right">{formatCurrency(transaction.total_debits)}</TableCell>
                            <TableCell className="text-right">{formatCurrency(transaction.total_credits)}</TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Chart of Accounts Tab */}
          <TabsContent value="accounts" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Chart of Accounts</CardTitle>
                  <Button onClick={() => router.push('/coa/accounts')}>
                    <Settings className="w-4 h-4 mr-2" />
                    Manage Accounts
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Account Code</TableHead>
                      <TableHead>Account Name</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Normal Balance</TableHead>
                      <TableHead className="text-right">Current Balance</TableHead>
                      <TableHead>Status</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {accounts.map((account) => (
                      <TableRow key={account.id} className="hover:bg-gray-50">
                        <TableCell className="font-medium">{account.account_code}</TableCell>
                        <TableCell>{account.account_name}</TableCell>
                        <TableCell>
                          <Badge className={getAccountTypeColor(account.account_type)}>
                            {account.account_type}
                          </Badge>
                        </TableCell>
                        <TableCell className="capitalize">{account.normal_balance}</TableCell>
                        <TableCell className="text-right font-medium">
                          {formatCurrency(account.current_balance)}
                        </TableCell>
                        <TableCell>
                          <Badge variant={account.is_active ? 'default' : 'secondary'}>
                            {account.is_active ? 'Active' : 'Inactive'}
                          </Badge>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Reports Tab */}
          <TabsContent value="reports" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="w-5 h-5" />
                    Income Statement
                  </CardTitle>
                  <CardDescription>Profit & Loss for the current period</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button className="w-full" variant="outline">
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="w-5 h-5" />
                    Balance Sheet
                  </CardTitle>
                  <CardDescription>Financial position as of today</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button className="w-full" variant="outline">
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="w-5 h-5" />
                    Trial Balance
                  </CardTitle>
                  <CardDescription>Account balances verification</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button className="w-full" variant="outline">
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <DollarSign className="w-5 h-5" />
                    Cash Flow Statement
                  </CardTitle>
                  <CardDescription>Cash movements for the period</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button className="w-full" variant="outline">
                    Generate Report
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Analysis Tab */}
          <TabsContent value="analysis" className="space-y-6">
            <Alert className="bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
              <Bot className="h-4 w-4 text-purple-600" />
              <AlertTitle>AI-Powered Financial Analysis</AlertTitle>
              <AlertDescription>
                HERA's Digital Accountant automatically analyzes your GL transactions to provide insights,
                detect anomalies, and suggest optimizations based on industry best practices.
              </AlertDescription>
            </Alert>

            {/* AI Insights Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <Card className="border-purple-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Sparkles className="w-5 h-5 text-purple-600" />
                    AI-Generated Insights
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="p-3 bg-purple-50 rounded-lg">
                    <p className="text-sm font-medium text-purple-900">Revenue Trend Alert</p>
                    <p className="text-sm text-purple-700 mt-1">
                      Sales revenue increased 23% this month. Consider reviewing inventory levels.
                    </p>
                  </div>
                  <div className="p-3 bg-orange-50 rounded-lg">
                    <p className="text-sm font-medium text-orange-900">Expense Optimization</p>
                    <p className="text-sm text-orange-700 mt-1">
                      Operating expenses are 15% above industry average. Review cost centers.
                    </p>
                  </div>
                  <div className="p-3 bg-green-50 rounded-lg">
                    <p className="text-sm font-medium text-green-900">Cash Flow Positive</p>
                    <p className="text-sm text-green-700 mt-1">
                      Strong cash position detected. Consider investment opportunities.
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-purple-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Brain className="w-5 h-5 text-purple-600" />
                    Automated Recommendations
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex items-start gap-3">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <Zap className="w-4 h-4 text-purple-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Automate Recurring Entries</p>
                      <p className="text-sm text-gray-600">
                        5 similar monthly transactions detected. Set up auto-posting rules.
                      </p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <CheckCircle className="w-4 h-4 text-purple-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Reconciliation Needed</p>
                      <p className="text-sm text-gray-600">
                        3 accounts have pending reconciliations from last month.
                      </p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <AlertCircle className="w-4 h-4 text-purple-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Tax Preparation</p>
                      <p className="text-sm text-gray-600">
                        Quarter-end approaching. Review tax-related accounts.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Revenue Trends</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-48 bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg flex items-center justify-center">
                    <p className="text-gray-500">Chart placeholder</p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Expense Analysis</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-48 bg-gradient-to-br from-orange-50 to-red-50 rounded-lg flex items-center justify-center">
                    <p className="text-gray-500">Chart placeholder</p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Cash Flow Forecast</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-48 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center">
                    <p className="text-gray-500">Chart placeholder</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}