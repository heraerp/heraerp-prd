'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Target, TrendingUp, TrendingDown, DollarSign, 
  Calendar, Clock, AlertCircle, CheckCircle,
  Calculator, BarChart3, PieChart, Activity,
  Search, Filter, Plus, Upload, Download,
  Eye, Edit, X, ChevronRight, Users,
  Bot, Sparkles, Zap, Brain, RefreshCw,
  AlertTriangle, Award, Settings, FileText,
  ArrowUpDown, ArrowUp, ArrowDown, Percent,
  Building2, MapPin, Globe, Mail, Phone,
  Briefcase, CreditCard, Banknote, Wallet
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Textarea } from '@/components/ui/textarea'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Progress } from '@/components/ui/progress'
import { motion } from 'framer-motion'
import { universalApi } from '@/lib/universal-api'

interface BudgetPeriod {
  id: string
  period_name: string
  period_type: 'monthly' | 'quarterly' | 'yearly'
  start_date: Date
  end_date: Date
  status: 'draft' | 'active' | 'completed' | 'locked'
  created_by: string
  approved_by?: string
  total_revenue_budget: number
  total_expense_budget: number
  net_budget: number
  actual_revenue?: number
  actual_expense?: number
  variance_percentage: number
  ai_insights: AIInsight[]
}

interface BudgetLine {
  id: string
  budget_id: string
  account_code: string
  account_name: string
  category: string
  budget_type: 'revenue' | 'expense' | 'capex'
  budgeted_amount: number
  actual_amount: number
  variance_amount: number
  variance_percentage: number
  forecast_amount: number
  previous_year_amount: number
  growth_rate: number
  confidence_level: number
  ai_insights: AIInsight[]
}

interface AIInsight {
  type: 'variance_alert' | 'forecast_adjustment' | 'trend_analysis' | 'optimization' | 'scenario_planning' | 'risk_assessment'
  message: string
  confidence: number
  priority: 'low' | 'medium' | 'high' | 'urgent'
  financial_impact?: number
  recommended_action?: string
  timeline?: string
}

interface CashFlowForecast {
  month: string
  opening_balance: number
  revenue_budget: number
  expense_budget: number
  capex_budget: number
  net_flow: number
  closing_balance: number
  confidence_level: number
}

interface ScenarioModel {
  id: string
  scenario_name: string
  scenario_type: 'optimistic' | 'realistic' | 'pessimistic' | 'custom'
  revenue_adjustment: number
  expense_adjustment: number
  probability: number
  net_impact: number
  key_assumptions: string[]
}

export default function BudgetsPage() {

  // CRUD Operations - Auto-generated by Universal CRUD Fixer
  const loadData = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/v1/${modulePath}?action=list&organization_id=${organizationId}`);
      const result = await response.json();
      
      if (result.success) {
        setData(result.data);
      } else {
        console.error('Failed to load data:', result.error);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async (formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'create',
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Create error:', error);
      throw error;
    }
  };

  const handleUpdate = async (id: string, formData: any) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id,
          data: formData,
          organizationId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Update error:', error);
      throw error;
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/${modulePath}?id=${id}&organization_id=${organizationId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        await loadData(); // Refresh data
        return result.data;
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Delete error:', error);
      throw error;
    }
  };

  // Auto-load data on component mount
  useEffect(() => {
    if (organizationId) {
      loadData();
    }
  }, [organizationId]);

  const router = useRouter()
  const [activeTab, setActiveTab] = useState('budgets')
  const [budgets, setBudgets] = useState<BudgetPeriod[]>([])
  const [budgetLines, setBudgetLines] = useState<BudgetLine[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterPeriod, setFilterPeriod] = useState('all')
  const [filterCategory, setFilterCategory] = useState('all')
  const [showAIAssistant, setShowAIAssistant] = useState(false)
  const [aiPrompt, setAiPrompt] = useState('')
  const [selectedBudget, setSelectedBudget] = useState<BudgetPeriod | null>(null)

  // Mock data with AI insights
  const mockBudgets: BudgetPeriod[] = [
    {
      id: 'BUDGET001',
      period_name: 'Q1 2025 Budget',
      period_type: 'quarterly',
      start_date: new Date('2025-01-01'),
      end_date: new Date('2025-03-31'),
      status: 'active',
      created_by: 'Sarah Johnson, CFO',
      approved_by: 'Michael Chen, CEO',
      total_revenue_budget: 2500000,
      total_expense_budget: 1950000,
      net_budget: 550000,
      actual_revenue: 1850000,
      actual_expense: 1420000,
      variance_percentage: 8.5,
      ai_insights: [
        {
          type: 'trend_analysis',
          message: 'Revenue tracking 12% above budget due to strong Q1 performance. Sales team exceeding targets in enterprise segment.',
          confidence: 94,
          priority: 'high',
          financial_impact: 300000,
          recommended_action: 'Consider revising Q2 revenue forecasts upward by 8-10%',
          timeline: '2 weeks'
        },
        {
          type: 'optimization',
          message: 'Marketing spend efficiency improved 15% vs budget. AI recommendation: reallocate $75K to high-performing digital channels.',
          confidence: 89,
          priority: 'medium',
          financial_impact: 75000,
          recommended_action: 'Shift budget from traditional to digital marketing channels',
          timeline: '1 month'
        }
      ]
    },
    {
      id: 'BUDGET002',
      period_name: 'FY 2025 Annual Budget',
      period_type: 'yearly',
      start_date: new Date('2025-01-01'),
      end_date: new Date('2025-12-31'),
      status: 'draft',
      created_by: 'David Park, Financial Analyst',
      total_revenue_budget: 12000000,
      total_expense_budget: 9200000,
      net_budget: 2800000,
      variance_percentage: 0,
      ai_insights: [
        {
          type: 'scenario_planning',
          message: 'AI scenario modeling suggests 85% probability of achieving revenue targets. Key risk: Q4 seasonality impact.',
          confidence: 87,
          priority: 'medium',
          recommended_action: 'Build 15% contingency buffer for Q4 revenue fluctuations',
          timeline: '3 months'
        },
        {
          type: 'forecast_adjustment',
          message: 'Historical pattern analysis indicates 18% growth potential in recurring revenue streams.',
          confidence: 91,
          priority: 'high',
          financial_impact: 450000,
          recommended_action: 'Increase subscription revenue targets based on retention analytics',
          timeline: '6 months'
        }
      ]
    },
    {
      id: 'BUDGET003',
      period_name: 'Q4 2024 Budget (Locked)',
      period_type: 'quarterly',
      start_date: new Date('2024-10-01'),
      end_date: new Date('2024-12-31'),
      status: 'locked',
      created_by: 'Jennifer Lee, Controller',
      approved_by: 'Sarah Johnson, CFO',
      total_revenue_budget: 2200000,
      total_expense_budget: 1800000,
      net_budget: 400000,
      actual_revenue: 2350000,
      actual_expense: 1750000,
      variance_percentage: -12.3,
      ai_insights: [
        {
          type: 'variance_alert',
          message: 'Q4 exceeded budget by $150K (12.3%). Strong holiday season performance drove revenue outperformance.',
          confidence: 98,
          priority: 'low',
          financial_impact: 150000,
          recommended_action: 'Apply Q4 learnings to Q1 2025 seasonal planning',
          timeline: 'Completed'
        }
      ]
    }
  ]

  const mockBudgetLines: BudgetLine[] = [
    {
      id: 'LINE001',
      budget_id: 'BUDGET001',
      account_code: '4000',
      account_name: 'Sales Revenue',
      category: 'Revenue',
      budget_type: 'revenue',
      budgeted_amount: 2500000,
      actual_amount: 1850000,
      variance_amount: -650000,
      variance_percentage: -26,
      forecast_amount: 2650000,
      previous_year_amount: 2100000,
      growth_rate: 19.0,
      confidence_level: 92,
      ai_insights: [
        {
          type: 'forecast_adjustment',
          message: 'Strong Q1 performance indicates 6% upside to annual revenue forecast.',
          confidence: 92,
          priority: 'high',
          financial_impact: 150000
        }
      ]
    },
    {
      id: 'LINE002',
      budget_id: 'BUDGET001',
      account_code: '5000',
      account_name: 'Cost of Goods Sold',
      category: 'Direct Costs',
      budget_type: 'expense',
      budgeted_amount: 1000000,
      actual_amount: 750000,
      variance_amount: 250000,
      variance_percentage: 25,
      forecast_amount: 980000,
      previous_year_amount: 850000,
      growth_rate: 15.3,
      confidence_level: 88,
      ai_insights: [
        {
          type: 'optimization',
          message: 'Supplier cost optimization achieved 8% savings vs budget. Recommend locking in current rates.',
          confidence: 89,
          priority: 'medium',
          financial_impact: 80000
        }
      ]
    },
    {
      id: 'LINE003',
      budget_id: 'BUDGET001',
      account_code: '6100',
      account_name: 'Marketing Expenses',
      category: 'Operating Expenses',
      budget_type: 'expense',
      budgeted_amount: 400000,
      actual_amount: 285000,
      variance_amount: 115000,
      variance_percentage: 28.8,
      forecast_amount: 385000,
      previous_year_amount: 320000,
      growth_rate: 20.3,
      confidence_level: 85,
      ai_insights: [
        {
          type: 'trend_analysis',
          message: 'Digital marketing ROI improved 35% vs traditional channels. Reallocation recommended.',
          confidence: 91,
          priority: 'high',
          financial_impact: 75000
        }
      ]
    },
    {
      id: 'LINE004',
      budget_id: 'BUDGET001',
      account_code: '6200',
      account_name: 'Employee Salaries',
      category: 'Personnel',
      budget_type: 'expense',
      budgeted_amount: 350000,
      actual_amount: 340000,
      variance_amount: 10000,
      variance_percentage: 2.9,
      forecast_amount: 360000,
      previous_year_amount: 310000,
      growth_rate: 16.1,
      confidence_level: 95,
      ai_insights: [
        {
          type: 'risk_assessment',
          message: 'Talent retention budget may need 12% increase based on market salary trends.',
          confidence: 87,
          priority: 'medium',
          financial_impact: -42000
        }
      ]
    }
  ]

  useEffect(() => {
    loadSampleData()
  }, [])

  const loadSampleData = async () => {
    setLoading(true)
    try {
      setBudgets(mockBudgets)
      setBudgetLines(mockBudgetLines)
    } catch (error) {
      console.error('Error loading budget data:', error)
    } finally {
      setLoading(false)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0
    }).format(Math.abs(amount))
  }

  const formatPercentage = (percentage: number) => {
    const sign = percentage >= 0 ? '+' : ''
    return `${sign}${percentage.toFixed(1)}%`
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-700'
      case 'draft':
        return 'bg-blue-100 text-blue-700'
      case 'completed':
        return 'bg-gray-100 text-gray-700'
      case 'locked':
        return 'bg-purple-100 text-purple-700'
      default:
        return 'bg-yellow-100 text-yellow-700'
    }
  }

  const getVarianceColor = (variance: number) => {
    if (Math.abs(variance) <= 5) return 'text-green-600'
    if (Math.abs(variance) <= 15) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent':
        return 'bg-red-100 text-red-700'
      case 'high':
        return 'bg-orange-100 text-orange-700'
      case 'medium':
        return 'bg-yellow-100 text-yellow-700'
      default:
        return 'bg-green-100 text-green-700'
    }
  }

  const calculateBudgetMetrics = () => {
    const activeBudgets = budgets.filter(b => b.status === 'active')
    const totalBudgeted = activeBudgets.reduce((sum, b) => sum + b.net_budget, 0)
    const totalActual = activeBudgets.reduce((sum, b) => sum + ((b.actual_revenue || 0) - (b.actual_expense || 0)), 0)
    const avgVariance = activeBudgets.reduce((sum, b) => sum + Math.abs(b.variance_percentage), 0) / (activeBudgets.length || 1)
    const highVarianceCount = budgetLines.filter(line => Math.abs(line.variance_percentage) > 15).length

    return { totalBudgeted, totalActual, avgVariance, highVarianceCount }
  }

  const generateCashFlowForecast = (): CashFlowForecast[] => {
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    const forecast: CashFlowForecast[] = []
    let openingBalance = 500000

    months.forEach((month, index) => {
      const revenueBase = 1000000 + (Math.random() * 200000)
      const expenseBase = 800000 + (Math.random() * 150000)
      const capexBase = 50000 + (Math.random() * 100000)

      const item: CashFlowForecast = {
        month,
        opening_balance: openingBalance,
        revenue_budget: revenueBase,
        expense_budget: expenseBase,
        capex_budget: capexBase,
        net_flow: revenueBase - expenseBase - capexBase,
        closing_balance: openingBalance + revenueBase - expenseBase - capexBase,
        confidence_level: Math.random() * 15 + 80 // 80-95%
      }

      forecast.push(item)
      openingBalance = item.closing_balance
    })

    return forecast
  }

  const generateScenarioModels = (): ScenarioModel[] => {
    return [
      {
        id: 'SCENARIO001',
        scenario_name: 'Optimistic Growth',
        scenario_type: 'optimistic',
        revenue_adjustment: 15,
        expense_adjustment: 8,
        probability: 25,
        net_impact: 420000,
        key_assumptions: [
          'New product launch succeeds (+20% revenue)',
          'Market expansion ahead of plan (+10% revenue)',
          'Cost optimization initiatives deliver (+5% margin)'
        ]
      },
      {
        id: 'SCENARIO002',
        scenario_name: 'Base Case',
        scenario_type: 'realistic',
        revenue_adjustment: 0,
        expense_adjustment: 0,
        probability: 55,
        net_impact: 0,
        key_assumptions: [
          'Current market conditions continue',
          'No major competitive disruption',
          'Team performance maintains current levels'
        ]
      },
      {
        id: 'SCENARIO003',
        scenario_name: 'Conservative Outlook',
        scenario_type: 'pessimistic',
        revenue_adjustment: -8,
        expense_adjustment: -3,
        probability: 20,
        net_impact: -185000,
        key_assumptions: [
          'Economic headwinds impact demand (-10% revenue)',
          'Increased competition pressure (-5% pricing)',
          'Supply chain disruptions (+8% costs)'
        ]
      }
    ]
  }

  const generateAIBudgetInsights = () => {
    const metrics = calculateBudgetMetrics()
    
    return [
      {
        title: 'Budget Performance Alert',
        message: `${metrics.highVarianceCount} budget lines showing >15% variance. Q1 revenue tracking 12% above target with strong enterprise sales.`,
        type: 'performance_alert',
        confidence: 94,
        action: 'Review high-variance accounts and adjust Q2 forecasts based on Q1 trends',
        financial_impact: 300000
      },
      {
        title: 'Cash Flow Optimization',
        message: 'AI forecasting shows optimal cash positioning through Q2. Recommend investing excess cash in high-yield instruments.',
        type: 'cash_optimization',
        confidence: 89,
        action: 'Move $500K to 6-month CDs yielding 4.5% vs 0.5% checking',
        financial_impact: 20000
      },
      {
        title: 'Expense Efficiency Gains',
        message: `Marketing ROI improved 35% through channel optimization. Current efficiency: ${metrics.avgVariance.toFixed(1)}% average variance.`,
        type: 'efficiency_gains',
        confidence: 91,
        action: 'Reallocate $75K from low-performing to high-ROI marketing channels',
        financial_impact: 75000
      },
      {
        title: 'Seasonal Planning Insight',
        message: 'Historical analysis indicates Q4 typically outperforms budget by 12%. Build contingency for holiday season surge.',
        type: 'seasonal_planning',
        confidence: 87,
        action: 'Prepare inventory and staffing plans for 15% Q4 demand increase',
        financial_impact: 180000
      },
      {
        title: 'Risk Assessment',
        message: 'Talent retention risk identified: market salaries up 12% YoY. Budget adjustment recommended to prevent turnover.',
        type: 'risk_assessment',
        confidence: 88,
        action: 'Increase compensation budget by 8-12% for key positions',
        financial_impact: -65000
      }
    ]
  }

  const metrics = calculateBudgetMetrics()
  const aiInsights = generateAIBudgetInsights()
  const cashFlowForecast = generateCashFlowForecast()
  const scenarioModels = generateScenarioModels()

  
  // Form Handling - Auto-generated by Universal CRUD Fixer
  const [formData, setFormData] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      if (selectedItem?.id) {
        await handleUpdate(selectedItem.id, formData);
      } else {
        await handleCreate(formData);
      }
      
      setFormData({});
      setSelectedItem(null);
      setShowDialog(false);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white">
      <div className="container mx-auto p-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Budgeting & Planning
              </h1>
              <p className="mt-2 text-gray-600">
                AI-powered budget management with variance analysis and predictive forecasting
              </p>
            </div>
            <div className="flex items-center gap-4">
              <Dialog open={showAIAssistant} onOpenChange={setShowAIAssistant}>
                <DialogTrigger asChild>
                  <Button variant="outline" className="border-purple-200 hover:bg-purple-50">
                    <Bot className="w-4 h-4 mr-2 text-purple-600" />
                    AI Budget Assistant
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-4xl">
                  <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                      <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      AI Budget Intelligence
                    </DialogTitle>
                    <DialogDescription>
                      Get AI-powered insights for budget planning, variance analysis, and financial forecasting
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 mt-4">
                    <Textarea
                      placeholder="Examples:
• Create Q2 2025 budget based on Q1 actuals and trends
• Analyze variance drivers for marketing and sales expenses
• Generate 12-month cash flow forecast with confidence intervals
• Compare budget scenarios with sensitivity analysis
• Recommend budget adjustments based on market conditions
• Identify cost optimization opportunities across departments"
                      value={aiPrompt}
                      onChange={(e) => setAiPrompt(e.target.value)}
                      className="min-h-[120px]"
                    />
                    <Button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white">
                      <Brain className="w-4 h-4 mr-2" />
                      Generate Budget Analysis
                    </Button>
                    
                    {/* Live AI Insights Preview */}
                    <div className="border-t pt-4">
                      <h4 className="font-semibold mb-3 flex items-center gap-2">
                        <Sparkles className="w-4 h-4 text-purple-600" />
                        Live Budget Intelligence
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {aiInsights.slice(0, 4).map((insight, index) => (
                          <div key={index} className="p-3 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-100">
                            <div className="flex items-start justify-between mb-2">
                              <div className="flex items-center gap-2">
                                {insight.type === 'performance_alert' && <AlertTriangle className="w-3 h-3 text-orange-600" />}
                                {insight.type === 'cash_optimization' && <Target className="w-3 h-3 text-green-600" />}
                                {insight.type === 'efficiency_gains' && <TrendingUp className="w-3 h-3 text-blue-600" />}
                                {insight.type === 'seasonal_planning' && <Calendar className="w-3 h-3 text-purple-600" />}
                                {insight.type === 'risk_assessment' && <AlertCircle className="w-3 h-3 text-red-600" />}
                                <p className="font-medium text-sm text-purple-900">{insight.title}</p>
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {insight.confidence}%
                              </Badge>
                            </div>
                            <p className="text-xs text-purple-700 mb-2">{insight.message}</p>
                            <div className="flex items-center justify-between">
                              <p className="text-xs text-purple-600 font-medium">{insight.action}</p>
                              {insight.financial_impact && (
                                <p className={`text-xs font-medium ${insight.financial_impact > 0 ? 'text-green-600' : 'text-red-600'}`}>
                                  {formatCurrency(insight.financial_impact)}
                                </p>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg">
                <Plus className="w-4 h-4 mr-2" />
                New Budget
              </Button>
            </div>
          </div>
        </div>

        {/* AI Insights Banner */}
        <Alert className="mb-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
          <Brain className="h-4 w-4 text-purple-600" />
          <AlertTitle>AI Budget Intelligence Active</AlertTitle>
          <AlertDescription>
            <div className="flex items-center justify-between">
              <span>
                AI analyzed {budgets.length} budget periods, detected {metrics.highVarianceCount} variance alerts, 
                and identified {formatCurrency(395000)} in optimization opportunities with 89% confidence.
              </span>
              <Button size="sm" variant="outline" className="border-purple-300" onClick={() => setShowAIAssistant(true)}>
                <Sparkles className="w-4 h-4 mr-1" />
                View Analysis
              </Button>
            </div>
          </AlertDescription>
        </Alert>

        {/* High-Priority Budget Alert */}
        {metrics.highVarianceCount > 0 && (
          <Alert className="mb-6 bg-gradient-to-br from-orange-50 to-red-50 border-orange-300">
            <AlertTriangle className="h-4 w-4 text-orange-600" />
            <AlertTitle className="text-orange-800">Budget Variance Alert</AlertTitle>
            <AlertDescription className="text-orange-700">
              <div className="flex items-center justify-between">
                <span>
                  {metrics.highVarianceCount} budget lines showing &gt;15% variance. Q1 revenue tracking 12% above target. 
                  Review recommended for marketing (+28.8%) and COGS (+25%) categories.
                </span>
                <Button size="sm" variant="outline" className="border-orange-400 text-orange-700 hover:bg-orange-100">
                  <Eye className="w-4 h-4 mr-1" />
                  Review Details
                </Button>
              </div>
            </AlertDescription>
          </Alert>
        )}

        {/* Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Budgeted</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {formatCurrency(metrics.totalBudgeted)}
                  </p>
                  <p className="text-xs text-blue-600 mt-1">Net profit target</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <Target className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Actual Performance</p>
                  <p className="text-2xl font-bold text-green-600">
                    {formatCurrency(metrics.totalActual)}
                  </p>
                  <p className="text-xs text-green-600 mt-1">YTD results</p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                  <TrendingUp className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Avg Variance</p>
                  <p className="text-2xl font-bold text-orange-600">
                    {formatPercentage(metrics.avgVariance)}
                  </p>
                  <p className="text-xs text-orange-600 mt-1">Absolute deviation</p>
                </div>
                <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                  <BarChart3 className="w-6 h-6 text-orange-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Budget Periods</p>
                  <p className="text-2xl font-bold text-purple-600">
                    {budgets.length}
                  </p>
                  <p className="text-xs text-purple-600 mt-1">Active & draft</p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <Calendar className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Variance Alerts</p>
                  <p className="text-2xl font-bold text-red-600">
                    {metrics.highVarianceCount}
                  </p>
                  <p className="text-xs text-red-600 mt-1">Require attention</p>
                </div>
                <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                  <AlertTriangle className="w-6 h-6 text-red-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid grid-cols-6 w-full max-w-4xl">
            <TabsTrigger value="budgets">Budgets</TabsTrigger>
            <TabsTrigger value="variance">Variance Analysis</TabsTrigger>
            <TabsTrigger value="forecasting">Forecasting</TabsTrigger>
            <TabsTrigger value="scenarios">Scenarios</TabsTrigger>
            <TabsTrigger value="ai-insights">AI Insights</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
          </TabsList>

          {/* Budgets Tab */}
          <TabsContent value="budgets" className="space-y-6">
            <div className="space-y-4">
              {budgets.map((budget) => (
                <motion.div
                  key={budget.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white border rounded-lg p-6 hover:shadow-lg transition-shadow"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        <Calculator className="w-6 h-6 text-blue-600" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">{budget.period_name}</h3>
                        <p className="text-sm text-gray-600">
                          {budget.start_date.toLocaleDateString()} - {budget.end_date.toLocaleDateString()}
                        </p>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={getStatusColor(budget.status)}>
                            {budget.status.toUpperCase()}
                          </Badge>
                          <span className="text-xs text-gray-500">
                            <Users className="w-3 h-3 inline mr-1" />
                            {budget.created_by}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-2xl font-bold text-gray-900">
                        {formatCurrency(budget.net_budget)}
                      </p>
                      <p className="text-sm text-gray-600">Net Budget</p>
                      {budget.actual_revenue && (
                        <p className={`text-sm font-medium ${getVarianceColor(budget.variance_percentage)}`}>
                          {formatPercentage(budget.variance_percentage)} variance
                        </p>
                      )}
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 text-sm">
                    <div>
                      <span className="text-gray-500">Revenue Budget:</span>
                      <p className="font-medium text-green-600">{formatCurrency(budget.total_revenue_budget)}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Expense Budget:</span>
                      <p className="font-medium text-red-600">{formatCurrency(budget.total_expense_budget)}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Actual Revenue:</span>
                      <p className="font-medium">{budget.actual_revenue ? formatCurrency(budget.actual_revenue) : 'TBD'}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Actual Expense:</span>
                      <p className="font-medium">{budget.actual_expense ? formatCurrency(budget.actual_expense) : 'TBD'}</p>
                    </div>
                  </div>

                  {/* Progress Bar for Active Budgets */}
                  {budget.status === 'active' && budget.actual_revenue && (
                    <div className="mb-4">
                      <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
                        <span>Budget Progress</span>
                        <span>
                          {Math.round((budget.actual_revenue / budget.total_revenue_budget) * 100)}% of revenue target
                        </span>
                      </div>
                      <Progress 
                        value={(budget.actual_revenue / budget.total_revenue_budget) * 100} 
                        className="h-2"
                      />
                    </div>
                  )}

                  {/* AI Insights */}
                  {budget.ai_insights.length > 0 && (
                    <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-4 border border-purple-100">
                      <div className="flex items-center gap-2 mb-3">
                        <Brain className="w-4 h-4 text-purple-600" />
                        <span className="text-sm font-medium text-purple-900">AI Budget Intelligence</span>
                      </div>
                      <div className="space-y-3">
                        {budget.ai_insights.map((insight, index) => (
                          <div key={index} className="flex items-start gap-3">
                            <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                              {insight.type === 'trend_analysis' && <TrendingUp className="w-3 h-3 text-blue-600" />}
                              {insight.type === 'optimization' && <Target className="w-3 h-3 text-green-600" />}
                              {insight.type === 'scenario_planning' && <Activity className="w-3 h-3 text-purple-600" />}
                              {insight.type === 'forecast_adjustment' && <Calculator className="w-3 h-3 text-orange-600" />}
                              {insight.type === 'variance_alert' && <AlertTriangle className="w-3 h-3 text-red-600" />}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-start justify-between mb-1">
                                <p className="text-sm text-purple-800">{insight.message}</p>
                                <Badge className={`text-xs ml-2 ${getPriorityColor(insight.priority)}`}>
                                  {insight.priority.toUpperCase()}
                                </Badge>
                              </div>
                              <div className="flex items-center justify-between">
                                <p className="text-xs text-purple-600">{insight.recommended_action}</p>
                                {insight.financial_impact && (
                                  <p className={`text-xs font-medium ${insight.financial_impact > 0 ? 'text-green-600' : 'text-red-600'}`}>
                                    {formatCurrency(insight.financial_impact)}
                                  </p>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="flex items-center justify-between mt-4 pt-4 border-t">
                    <div className="flex items-center gap-4 text-sm text-gray-600">
                      {budget.approved_by && <span>Approved by: {budget.approved_by}</span>}
                      <span>Period: {budget.period_type}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="ghost" size="sm" onClick={() => setSelectedBudget(budget)}>
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <ChevronRight className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </TabsContent>

          {/* Variance Analysis Tab */}
          <TabsContent value="variance" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="w-5 h-5" />
                  Budget vs Actual Analysis
                </CardTitle>
                <CardDescription>Detailed variance analysis with AI-powered insights</CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Account</TableHead>
                      <TableHead>Category</TableHead>
                      <TableHead className="text-right">Budget</TableHead>
                      <TableHead className="text-right">Actual</TableHead>
                      <TableHead className="text-right">Variance</TableHead>
                      <TableHead className="text-right">Variance %</TableHead>
                      <TableHead>Status</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {budgetLines.map((line) => (
                      <TableRow key={line.id} className={Math.abs(line.variance_percentage) > 15 ? 'bg-orange-50' : ''}>
                        <TableCell>
                          <div>
                            <p className="font-medium">{line.account_name}</p>
                            <p className="text-xs text-gray-500">{line.account_code}</p>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline">{line.category}</Badge>
                        </TableCell>
                        <TableCell className="text-right font-medium">
                          {formatCurrency(line.budgeted_amount)}
                        </TableCell>
                        <TableCell className="text-right">
                          {formatCurrency(line.actual_amount)}
                        </TableCell>
                        <TableCell className={`text-right font-medium ${line.variance_amount > 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {line.variance_amount > 0 ? '+' : ''}{formatCurrency(line.variance_amount)}
                        </TableCell>
                        <TableCell className={`text-right font-medium ${getVarianceColor(line.variance_percentage)}`}>
                          {formatPercentage(line.variance_percentage)}
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {Math.abs(line.variance_percentage) > 15 && (
                              <AlertTriangle className="w-4 h-4 text-orange-600" />
                            )}
                            <Badge className="text-xs" variant="outline">
                              {line.confidence_level}% conf
                            </Badge>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Forecasting Tab */}
          <TabsContent value="forecasting" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="w-5 h-5" />
                  12-Month Cash Flow Forecast
                </CardTitle>
                <CardDescription>AI-powered cash flow projection with confidence intervals</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-64 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center mb-6">
                  <div className="text-center">
                    <TrendingUp className="w-12 h-12 text-purple-600 mx-auto mb-2" />
                    <p className="text-gray-600 font-medium">Cash Flow Forecast Chart</p>
                    <p className="text-sm text-gray-500">12-month projection with confidence bands</p>
                  </div>
                </div>
                
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Month</TableHead>
                        <TableHead className="text-right">Opening</TableHead>
                        <TableHead className="text-right">Revenue</TableHead>
                        <TableHead className="text-right">Expenses</TableHead>
                        <TableHead className="text-right">CapEx</TableHead>
                        <TableHead className="text-right">Net Flow</TableHead>
                        <TableHead className="text-right">Closing</TableHead>
                        <TableHead className="text-right">Confidence</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {cashFlowForecast.slice(0, 6).map((item, index) => (
                        <TableRow key={index}>
                          <TableCell className="font-medium">{item.month} 2025</TableCell>
                          <TableCell className="text-right">{formatCurrency(item.opening_balance)}</TableCell>
                          <TableCell className="text-right text-green-600">{formatCurrency(item.revenue_budget)}</TableCell>
                          <TableCell className="text-right text-red-600">{formatCurrency(item.expense_budget)}</TableCell>
                          <TableCell className="text-right text-orange-600">{formatCurrency(item.capex_budget)}</TableCell>
                          <TableCell className={`text-right font-medium ${item.net_flow > 0 ? 'text-green-600' : 'text-red-600'}`}>
                            {formatCurrency(item.net_flow)}
                          </TableCell>
                          <TableCell className="text-right font-medium">{formatCurrency(item.closing_balance)}</TableCell>
                          <TableCell className="text-right">
                            <Badge variant="outline" className="text-xs">
                              {item.confidence_level.toFixed(0)}%
                            </Badge>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Scenarios Tab */}
          <TabsContent value="scenarios" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {scenarioModels.map((scenario) => (
                <Card key={scenario.id} className={`hover:shadow-lg transition-shadow ${
                  scenario.scenario_type === 'optimistic' ? 'border-green-200' :
                  scenario.scenario_type === 'pessimistic' ? 'border-red-200' :
                  'border-blue-200'
                }`}>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        scenario.scenario_type === 'optimistic' ? 'bg-green-100' :
                        scenario.scenario_type === 'pessimistic' ? 'bg-red-100' :
                        'bg-blue-100'
                      }`}>
                        {scenario.scenario_type === 'optimistic' && <ArrowUp className="w-4 h-4 text-green-600" />}
                        {scenario.scenario_type === 'pessimistic' && <ArrowDown className="w-4 h-4 text-red-600" />}
                        {scenario.scenario_type === 'realistic' && <Target className="w-4 h-4 text-blue-600" />}
                      </div>
                      {scenario.scenario_name}
                    </CardTitle>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline">{scenario.probability}% probability</Badge>
                      <Badge className={`${
                        scenario.net_impact > 0 ? 'bg-green-100 text-green-700' : 
                        scenario.net_impact < 0 ? 'bg-red-100 text-red-700' :
                        'bg-gray-100 text-gray-700'
                      }`}>
                        {scenario.net_impact > 0 ? '+' : ''}{formatCurrency(scenario.net_impact)}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3 mb-4">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Revenue Impact:</span>
                        <span className={`font-medium ${scenario.revenue_adjustment > 0 ? 'text-green-600' : scenario.revenue_adjustment < 0 ? 'text-red-600' : 'text-gray-600'}`}>
                          {scenario.revenue_adjustment > 0 ? '+' : ''}{scenario.revenue_adjustment}%
                        </span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Expense Impact:</span>
                        <span className={`font-medium ${scenario.expense_adjustment > 0 ? 'text-red-600' : scenario.expense_adjustment < 0 ? 'text-green-600' : 'text-gray-600'}`}>
                          {scenario.expense_adjustment > 0 ? '+' : ''}{scenario.expense_adjustment}%
                        </span>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <p className="text-sm font-medium text-gray-900">Key Assumptions:</p>
                      <ul className="text-xs text-gray-600 space-y-1">
                        {scenario.key_assumptions.map((assumption, index) => (
                          <li key={index} className="flex items-start gap-2">
                            <span className="w-1 h-1 bg-gray-400 rounded-full mt-2 flex-shrink-0"></span>
                            {assumption}
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <Button className="w-full mt-4" variant="outline">
                      <Calculator className="w-4 h-4 mr-2" />
                      Apply Scenario
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* AI Insights Tab */}
          <TabsContent value="ai-insights" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {aiInsights.map((insight, index) => (
                <Card key={index} className="border-purple-200 hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        insight.type === 'performance_alert' ? 'bg-orange-100' :
                        insight.type === 'cash_optimization' ? 'bg-green-100' :
                        insight.type === 'efficiency_gains' ? 'bg-blue-100' :
                        insight.type === 'seasonal_planning' ? 'bg-purple-100' :
                        'bg-red-100'
                      }`}>
                        {insight.type === 'performance_alert' && <AlertTriangle className="w-4 h-4 text-orange-600" />}
                        {insight.type === 'cash_optimization' && <Target className="w-4 h-4 text-green-600" />}
                        {insight.type === 'efficiency_gains' && <TrendingUp className="w-4 h-4 text-blue-600" />}
                        {insight.type === 'seasonal_planning' && <Calendar className="w-4 h-4 text-purple-600" />}
                        {insight.type === 'risk_assessment' && <AlertCircle className="w-4 h-4 text-red-600" />}
                      </div>
                      {insight.title}
                    </CardTitle>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline">{insight.confidence}% confidence</Badge>
                      {insight.financial_impact && (
                        <Badge className={`${insight.financial_impact > 0 ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
                          {formatCurrency(insight.financial_impact)} impact
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-700 mb-4">{insight.message}</p>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <p className="text-sm font-medium text-gray-900 mb-1">Recommended Action:</p>
                      <p className="text-sm text-gray-600">{insight.action}</p>
                    </div>
                    <Button className="w-full mt-4" variant="outline">
                      <Zap className="w-4 h-4 mr-2" />
                      Implement Recommendation
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Reports Tab */}
          <TabsContent value="reports" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="w-5 h-5" />
                    Budget Performance Report
                  </CardTitle>
                  <CardDescription>Comprehensive budget vs actual analysis</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Total Variance</span>
                      <span className="font-medium">{formatPercentage(metrics.avgVariance)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">High Variance Items</span>
                      <span className="font-medium">{metrics.highVarianceCount}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Budget Accuracy</span>
                      <span className="font-medium">87%</span>
                    </div>
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    <Download className="w-4 h-4 mr-2" />
                    Generate Report
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="w-5 h-5" />
                    Cash Flow Analysis
                  </CardTitle>
                  <CardDescription>12-month cash flow projection and trends</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-32 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center mb-4">
                    <p className="text-gray-500 text-sm">Cash flow trend chart</p>
                  </div>
                  <Button className="w-full" variant="outline">
                    <Activity className="w-4 h-4 mr-2" />
                    View Analysis
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="w-5 h-5" />
                    KPI Dashboard
                  </CardTitle>
                  <CardDescription>Key performance indicators and metrics</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Budget Accuracy</span>
                      <span className="font-medium text-green-600">92%</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Forecast Confidence</span>
                      <span className="font-medium text-blue-600">89%</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Planning Efficiency</span>
                      <span className="font-medium text-purple-600">94%</span>
                    </div>
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    <BarChart3 className="w-4 h-4 mr-2" />
                    View KPIs
                  </Button>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Calculator className="w-5 h-5" />
                    Scenario Modeling
                  </CardTitle>
                  <CardDescription>What-if analysis and sensitivity modeling</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Optimistic Case</span>
                      <span className="font-medium text-green-600">+{formatCurrency(420000)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Base Case</span>
                      <span className="font-medium text-blue-600">{formatCurrency(0)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Pessimistic Case</span>
                      <span className="font-medium text-red-600">-{formatCurrency(185000)}</span>
                    </div>
                  </div>
                  <Button className="w-full mt-4" variant="outline">
                    <Settings className="w-4 h-4 mr-2" />
                    Model Scenarios
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}