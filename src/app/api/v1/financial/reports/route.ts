'use server'

import { NextRequest, NextResponse } from 'next/server'
import { getHeraAPI } from '@/src/lib/hera-api'

/**
 * Universal financial management module - reports API
 * Generated by HERA Module Generator
 *
 * Universal API following HERA-SPEAR patterns
 * Layer 3 of 7-Layer Build Standard
 */

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const organizationId = searchParams.get('organization_id')

    if (!organizationId) {
      return NextResponse.json({ error: 'organization_id is required' }, { status: 400 })
    }

    const heraApi = getHeraAPI()

    // Use universal entity management
    const entities = await heraApi.getEntities('financial_reports', {
      organization_id: organizationId,
      status: 'active'
    })

    return NextResponse.json({
      success: true,
      data: entities,
      module: 'FINANCIAL',
      endpoint: 'reports',
      generated_by: 'HERA_MODULE_GENERATOR'
    })
  } catch (error) {
    console.error('FINANCIAL reports API error:', error)
    return NextResponse.json(
      { error: 'Internal server error', details: error.message },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { organization_id, ...entityData } = body

    if (!organization_id) {
      return NextResponse.json({ error: 'organization_id is required' }, { status: 400 })
    }

    const heraApi = getHeraAPI()

    // Use universal entity creation
    const newEntity = await heraApi.createEntity({
      organization_id,
      entity_type: 'financial_reports',
      smart_code: `HERA.FIN.${entityData.entity_code || 'AUTO'}.v1`,
      ...entityData
    })

    return NextResponse.json({
      success: true,
      data: newEntity,
      message: 'reports created successfully'
    })
  } catch (error) {
    console.error('FINANCIAL reports creation error:', error)
    return NextResponse.json(
      { error: 'Failed to create reports', details: error.message },
      { status: 500 }
    )
  }
}
