import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '@/src/lib/supabase-admin'

/**
 * Restaurant customers that makes money - reports API
 * Generated by HERA Module Generator
 *
 * Customer-focused API that just works
 */

// GET /customers/reports - Fetch items using universal schema
export async function GET(request: NextRequest) {
  try {
    const supabaseAdmin = getSupabaseAdmin()
    const { searchParams } = new URL(request.url)
    const organizationId =
      searchParams.get('organization_id') || '550e8400-e29b-41d4-a716-446655440000' // Demo org
    const entityType = searchParams.get('entity_type') || 'customers_item'
    const includeDynamicData = searchParams.get('include_dynamic_data') === 'true'

    // Get entities from universal core_entities table
    let query = supabaseAdmin
      .from('core_entities')
      .select('*')
      .eq('organization_id', organizationId)
      .in('entity_type', ['customers_item', 'customers_category', 'customers_supplier'])
      .eq('status', 'active')
      .order('entity_name')

    if (entityType !== 'all') {
      query = query.eq('entity_type', entityType)
    }

    const { data: entities, error: entitiesError } = await query

    if (entitiesError) {
      console.error('Error fetching customers entities:', entitiesError)
      return NextResponse.json(
        { success: false, message: 'Failed to fetch customers entities' },
        { status: 500 }
      )
    }

    // Get dynamic data for each entity if requested
    let enhancedEntities = entities
    if (includeDynamicData && entities.length > 0) {
      const entityIds = entities.map(e => e.id)
      const { data: dynamicData } = await supabaseAdmin
        .from('core_dynamic_data')
        .select(
          'entity_id, field_name, field_type, field_value_text, field_value_number, field_value_json, ai_enhanced_value'
        )
        .in('entity_id', entityIds)

      // Merge dynamic data with entities
      enhancedEntities = entities.map(entity => {
        const entityDynamicData = dynamicData?.filter(d => d.entity_id === entity.id) || []
        const dynamicFields = {}

        entityDynamicData.forEach(field => {
          let value = field.field_value_text
          if (field.field_type === 'number') value = field.field_value_number
          if (field.field_type === 'json') value = field.field_value_json

          dynamicFields[field.field_name] = {
            value,
            ai_enhanced: field.ai_enhanced_value,
            type: field.field_type
          }
        })

        return {
          ...entity,
          dynamic_fields: dynamicFields
        }
      })
    }

    return NextResponse.json({
      success: true,
      data: enhancedEntities,
      count: enhancedEntities.length,
      module: 'CUSTOMERS'
    })
  } catch (error) {
    console.error('Customers API error:', error)
    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 })
  }
}

// POST /customers/reports - Create item using universal schema
export async function POST(request: NextRequest) {
  try {
    const supabaseAdmin = getSupabaseAdmin()
    const body = await request.json()
    const {
      organization_id = '550e8400-e29b-41d4-a716-446655440000',
      entity_type = 'customers_item',
      entity_name,
      entity_code,
      description,
      dynamic_fields = {},
      relationships = []
    } = body

    // Generate entity code if not provided
    const finalEntityCode =
      entity_code ||
      `CUS-${entity_type.toUpperCase().slice(0, 3)}-${Date.now().toString().slice(-6)}`

    // Create entity in core_entities
    const { data: entity, error: entityError } = await supabaseAdmin
      .from('core_entities')
      .insert({
        organization_id,
        entity_type,
        entity_name,
        entity_code: finalEntityCode,
        status: 'active',
        ai_classification: dynamic_fields.category || 'customers_item',
        created_at: new Date().toISOString()
      })
      .select()
      .single()

    if (entityError) {
      console.error('Error creating customers entity:', entityError)
      return NextResponse.json(
        { success: false, message: 'Failed to create customers entity', error: entityError },
        { status: 500 }
      )
    }

    // Create dynamic fields
    const dynamicFieldsData = []
    Object.entries(dynamic_fields).forEach(([fieldName, fieldValue]) => {
      if (fieldValue === null || fieldValue === undefined || fieldValue === '') return

      let fieldType = 'text'
      let textValue = null
      let numberValue = null
      let jsonValue = null

      if (typeof fieldValue === 'number') {
        fieldType = 'number'
        numberValue = fieldValue
      } else if (typeof fieldValue === 'object' && fieldValue !== null) {
        fieldType = 'json'
        jsonValue = fieldValue
      } else {
        fieldType = 'text'
        textValue = String(fieldValue)
      }

      dynamicFieldsData.push({
        organization_id,
        entity_id: entity.id,
        field_name: fieldName,
        field_type: fieldType,
        field_value_text: textValue,
        field_value_number: numberValue,
        field_value_json: jsonValue
      })
    })

    if (dynamicFieldsData.length > 0) {
      const { error: dynamicError } = await supabaseAdmin
        .from('core_dynamic_data')
        .insert(dynamicFieldsData)

      if (dynamicError) {
        console.error('Error creating dynamic fields:', dynamicError)
        // Continue - entity created successfully
      }
    }

    return NextResponse.json({
      success: true,
      data: {
        ...entity,
        smart_code: `HERA.CUSTOMERS.ITEM.${finalEntityCode}.v1`,
        dynamic_fields_created: dynamicFieldsData.length
      },
      message: `Customers item created successfully`
    })
  } catch (error) {
    console.error('Customers creation error:', error)
    return NextResponse.json(
      { success: false, message: 'Internal server error', error: error.message },
      { status: 500 }
    )
  }
}
