'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { Plus, Search, Filter, MoreVertical, Phone, Mail, MapPin, Building2, Calendar, IndianRupee, TrendingUp, Edit, Trash2
} from 'lucide-react'
import { useDemoOrganization } from '@/lib/dna/patterns/demo-org-pattern'
import { useUniversalData, universalFilters
} from '@/lib/dna/patterns/universal-api-loading-pattern'
import { universalApi } from '@/lib/universal-api'
import { formatCurrency } from '@/lib/utils'
import { format } from 'date-fns' export default function CustomersPage() { const { organizationId, orgLoading } = useDemoOrganization() const [searchTerm, setSearchTerm] = useState('') const [filterType, setFilterType] = useState<'all' | 'active' | 'inactive'>('all') const [showDeleteModal, setShowDeleteModal] = useState(false) const [customerToDelete, setCustomerToDelete] = useState<any>(null) const [deleteLoading, setDeleteLoading] = useState(false) // Load customers from core_entities const { data: customers, isLoading: customersLoading, refetch } = useUniversalData({ table: 'core_entities', filter: item => item.entity_type === 'customer' && item.organization_id === organizationId && (!searchTerm || item.entity_name?.toLowerCase().includes(searchTerm.toLowerCase()) || item.entity_code?.toLowerCase().includes(searchTerm.toLowerCase())), organizationId, enabled: !!organizationId }) // Load customer dynamic data (contact info, credit limits, etc.) const { data: dynamicData } = useUniversalData({ table: 'core_dynamic_data', filter: item => item.organization_id === organizationId, organizationId, enabled: !!organizationId }) // Load sales transactions for customer metrics const { data: transactions } = useUniversalData({ table: 'universal_transactions', filter: item => item.organization_id === organizationId && item.transaction_type === 'sales_order', organizationId, enabled: !!organizationId }) // Get customer dynamic fields const getCustomerField = (customerId: string, fieldName: string) => { const field = dynamicData?.find(d => d.entity_id === customerId && d.field_name === fieldName) return field?.field_value_text || field?.field_value_number || '' } // Calculate customer metrics const getCustomerMetrics = (customerId: string) => { const customerTransactions = transactions?.filter(t => t.from_entity_id === customerId) || [] const totalRevenue = customerTransactions.reduce((sum, t) => sum + t.total_amount, 0) const orderCount = customerTransactions.length const lastOrderDate = customerTransactions.sort( (a, b) => new Date(b.transaction_date).getTime() - new Date(a.transaction_date).getTime() )[0]?.transaction_date return { totalRevenue, orderCount, lastOrderDate } } // Filter customers based on status const filteredCustomers = customers?.filter(customer => { if (filterType === 'active') { const metrics = getCustomerMetrics(customer.id) return ( metrics.orderCount > 0 && metrics.lastOrderDate && new Date(metrics.lastOrderDate) > new Date(Date.now() - 90 * 24 * 60 * 60 * 1000) ) // Active in last 90 days } if (filterType === 'inactive') { const metrics = getCustomerMetrics(customer.id) return ( metrics.orderCount === 0 || !metrics.lastOrderDate || new Date(metrics.lastOrderDate) <= new Date(Date.now() - 90 * 24 * 60 * 60 * 1000) ) } return true }) const handleDeleteCustomer = async () => { if (!customerToDelete) return setDeleteLoading(true) try { universalApi.setOrganizationId(organizationId!) // Delete customer entity (this will cascade to dynamic data) await universalApi.deleteEntity(customerToDelete.id) // Refresh the list await refetch() // Close modal and reset setShowDeleteModal(false) setCustomerToDelete(null) } catch (error) { console.error('Error deleting customer:', error) alert('Failed to delete customer. Please try again.') } finally { setDeleteLoading(false) } } const stats = { total: customers?.length || 0, active: filteredCustomers?.filter(c => { const metrics = getCustomerMetrics(c.id) return ( metrics.orderCount > 0 && metrics.lastOrderDate && new Date(metrics.lastOrderDate) > new Date(Date.now() - 90 * 24 * 60 * 60 * 1000) ) }).length || 0, totalRevenue: transactions?.reduce((sum, t) => sum + t.total_amount, 0) || 0 } if (orgLoading) { return ( <div className="flex items-center justify-center min-h-screen bg-gray-900"> <div className="bg-background animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600"></div> </div> ) } return ( <div className="space-y-6"> {/* Header */} <div className="flex justify-between items-center"> <div> <h1 className="bg-background text-2xl font-bold text-gray-100 text-foreground">Customers</h1> <p className="text-muted-foreground dark:text-muted-foreground">Manage your customer relationships</p> </div> <Link href="/furniture/sales/customers/new" className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-foreground bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500" > <Plus className="mr-2 h-4 w-4" /> Add Customer </Link> </div> {/* Stats Cards */} <div className="bg-background grid grid-cols-1 md:grid-cols-3 gap-4"> <div className="bg-muted overflow-hidden shadow rounded-lg"> <div className="p-5"> <div className="flex items-center"> <div className="flex-shrink-0 bg-blue-500 rounded-md p-3"> <Building2 className="h-6 w-6 text-foreground" /> </div> <div className="ml-5 w-0 flex-1"> <dl> <dt className="bg-background text-sm font-medium text-muted-foreground dark:text-muted-foreground truncate"> Total Customers </dt> <dd className="bg-background flex items-baseline"> <div className="text-2xl font-semibold text-gray-100 text-foreground"> {stats.total} </div> </dd> </dl> </div> </div> </div> </div> <div className="bg-muted overflow-hidden shadow rounded-lg"> <div className="p-5"> <div className="flex items-center"> <div className="flex-shrink-0 bg-green-500 rounded-md p-3"> <TrendingUp className="h-6 w-6 text-foreground" /> </div> <div className="ml-5 w-0 flex-1"> <dl> <dt className="bg-background text-sm font-medium text-muted-foreground dark:text-muted-foreground truncate"> Active Customers </dt> <dd className="bg-background flex items-baseline"> <div className="text-2xl font-semibold text-gray-100 text-foreground"> {stats.active} </div> <span className="ml-2 text-sm text-muted-foreground dark:text-muted-foreground"> ({Math.round((stats.active / stats.total) * 100) || 0}%) </span> </dd> </dl> </div> </div> </div> </div> <div className="bg-muted overflow-hidden shadow rounded-lg"> <div className="p-5"> <div className="flex items-center"> <div className="flex-shrink-0 bg-amber-500 rounded-md p-3"> <IndianRupee className="h-6 w-6 text-foreground" /> </div> <div className="ml-5 w-0 flex-1"> <dl> <dt className="bg-background text-sm font-medium text-muted-foreground dark:text-muted-foreground truncate"> Total Revenue </dt> <dd className="bg-background flex items-baseline"> <div className="bg-background text-2xl font-semibold text-gray-100 text-foreground"> {formatCurrency(stats.totalRevenue)} </div> </dd> </dl> </div> </div> </div> </div> </div> {/* Search and Filters */} <div className="bg-muted shadow rounded-lg"> <div className="p-4 border-b border-border border-border"> <div className="flex flex-col sm:flex-row gap-4"> <div className="flex-1 relative"> <div className="bg-background absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"> <Search className="h-5 w-5 text-muted-foreground" /> </div> <input type="text" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} className="block w-full pl-10 pr-3 py-2 border border-border rounded-md leading-5 bg-background bg-muted-foreground/10 border-border placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-amber-500 focus:border-amber-500 sm:text-sm" placeholder="Search customers..." /> </div> <div className="bg-background flex gap-2"> <button onClick={() => setFilterType('all')} className={`px-4 py-2 text-sm font-medium rounded-md ${ filterType === 'all' ? 'bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-200' : 'text-foreground dark:text-gray-200 bg-background bg-muted-foreground/10 hover:bg-muted dark:hover:bg-gray-600' }`} > All </button> <button onClick={() => setFilterType('active')} className={`px-4 py-2 text-sm font-medium rounded-md ${ filterType === 'active' ? 'bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-200' : 'text-foreground dark:text-gray-200 bg-background bg-muted-foreground/10 hover:bg-muted dark:hover:bg-gray-600' }`} > Active </button> <button onClick={() => setFilterType('inactive')} className={`px-4 py-2 text-sm font-medium rounded-md ${ filterType === 'inactive' ? 'bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-200' : 'text-foreground dark:text-gray-200 bg-background bg-muted-foreground/10 hover:bg-muted dark:hover:bg-gray-600' }`} > Inactive </button> </div> </div> </div> {/* Customers Table */} <div className="overflow-x-auto furniture-scrollbar"> <table className="bg-background min-w-full divide-y divide-gray-200 dark:divide-gray-700"> <thead className="bg-muted bg-background"> <tr> <th className="bg-background px-6 py-3 text-left text-xs font-medium text-muted-foreground dark:text-muted-foreground uppercase tracking-wider"> Customer </th> <th className="bg-background px-6 py-3 text-left text-xs font-medium text-muted-foreground dark:text-muted-foreground uppercase tracking-wider"> Contact </th> <th className="bg-background px-6 py-3 text-left text-xs font-medium text-muted-foreground dark:text-muted-foreground uppercase tracking-wider"> Orders </th> <th className="bg-background px-6 py-3 text-left text-xs font-medium text-muted-foreground dark:text-muted-foreground uppercase tracking-wider"> Revenue </th> <th className="bg-background px-6 py-3 text-left text-xs font-medium text-muted-foreground dark:text-muted-foreground uppercase tracking-wider"> Last Order </th> <th className="bg-background px-6 py-3 text-left text-xs font-medium text-muted-foreground dark:text-muted-foreground uppercase tracking-wider"> Credit Limit </th> <th className="bg-background relative px-6 py-3"> <span className="sr-only">Actions</span> </th> </tr> </thead> <tbody className="bg-background bg-muted divide-y divide-gray-200 dark:divide-gray-700"> {customersLoading ? ( <tr> <td colSpan={7} className="bg-background px-6 py-4 text-center"> <div className="bg-background animate-spin rounded-full h-6 w-6 border-b-2 border-amber-600 mx-auto"></div> </td> </tr> ) : filteredCustomers?.length === 0 ? ( <tr> <td colSpan={7} className="bg-background px-6 py-4 text-center text-muted-foreground dark:text-muted-foreground" > {searchTerm || filterType !== 'all' ? 'No customers found matching your criteria.' : 'No customers yet. Add your first customer to get started.'} </td> </tr> ) : ( filteredCustomers?.map(customer => { const metrics = getCustomerMetrics(customer.id) const email = getCustomerField(customer.id, 'email') const phone = getCustomerField(customer.id, 'phone') const creditLimit = getCustomerField(customer.id, 'credit_limit') return ( <tr key={customer.id} className="hover:bg-muted dark:hover:bg-muted-foreground/10"> <td className="bg-background px-6 py-4 whitespace-nowrap"> <div> <div className="text-sm font-medium text-gray-100 text-foreground"> {customer.entity_name} </div> <div className="text-sm text-muted-foreground dark:text-muted-foreground"> {customer.entity_code} </div> </div> </td> <td className="bg-background px-6 py-4 whitespace-nowrap"> <div className="text-sm"> {email && ( <div className="bg-background flex items-center text-muted-foreground dark:text-gray-300"> <Mail className="h-3 w-3 mr-1" /> {email} </div> )} {phone && ( <div className="bg-background flex items-center text-muted-foreground dark:text-gray-300"> <Phone className="h-3 w-3 mr-1" /> {phone} </div> )} </div> </td> <td className="bg-background px-6 py-4 whitespace-nowrap"> <div className="text-sm text-gray-100 text-foreground"> {metrics.orderCount} </div> </td> <td className="bg-background px-6 py-4 whitespace-nowrap"> <div className="text-sm font-medium text-gray-100 text-foreground"> {formatCurrency(metrics.totalRevenue)} </div> </td> <td className="bg-background px-6 py-4 whitespace-nowrap"> <div className="bg-background text-sm text-muted-foreground dark:text-muted-foreground"> {metrics.lastOrderDate ? format(new Date(metrics.lastOrderDate), 'MMM dd, yyyy') : 'No orders yet'} </div> </td> <td className="bg-background px-6 py-4 whitespace-nowrap"> <div className="text-sm text-gray-100 text-foreground"> {creditLimit ? formatCurrency(Number(creditLimit)) : '-'} </div> </td> <td className="bg-background px-6 py-4 whitespace-nowrap text-right text-sm font-medium"> <div className="flex items-center justify-end gap-2"> <Link href={`/furniture/sales/customers/${customer.id}`} className="bg-background text-amber-600 hover:text-amber-900 dark:text-amber-400 dark:hover:text-amber-300" > <Edit className="h-4 w-4" /> </Link> <button onClick={() => { setCustomerToDelete(customer) setShowDeleteModal(true) }} className="bg-background text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300" > <Trash2 className="h-4 w-4" /> </button> </div> </td> </tr> ) }) )} </tbody> </table> </div> </div> {/* Delete Confirmation Modal */} {showDeleteModal && ( <div className="fixed inset-0 bg-gray-9000 bg-opacity-75 bg-background dark:bg-opacity-75 flex items-center justify-center p-4 z-50"> <div className="bg-background bg-muted rounded-lg max-w-md w-full p-6 space-y-4"> <h3 className="bg-background text-lg font-medium text-gray-100 text-foreground">Delete Customer</h3> <p className="text-sm text-muted-foreground dark:text-muted-foreground"> Are you sure you want to delete <strong>{customerToDelete?.entity_name}</strong>? This action cannot be undone. </p> <div className="flex justify-end gap-3"> <button onClick={() => { setShowDeleteModal(false) setCustomerToDelete(null) }} className="px-4 py-2 text-sm font-medium text-foreground dark:text-gray-200 bg-background bg-muted-foreground/10 border border-border border-border rounded-md hover:bg-muted dark:hover:bg-gray-600" > Cancel </button> <button onClick={handleDeleteCustomer} disabled={deleteLoading} className="px-4 py-2 text-sm font-medium text-foreground bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-600 rounded-md disabled:opacity-50 disabled:cursor-not-allowed" > {deleteLoading ? 'Deleting...' : 'Delete'} </button> </div> </div> </div> )} </div> )
}
