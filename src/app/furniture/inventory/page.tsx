'use client' // Force dynamic rendering
export const dynamic = 'force-dynamic' import React, { useState, useMemo } from 'react'
import { EnterpriseDataTable } from '@/lib/dna/components/organisms/EnterpriseDataTable'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue
} from '@/components/ui/select'
import { Package, Search, Filter, TrendingUp, TrendingDown, AlertCircle, ArrowUpRight, ArrowDownRight, Building, Calendar, Eye, Plus, Minus, BarChart3, Activity, Warehouse, Truck, PackageOpen, RefreshCw
} from 'lucide-react'
import { useMultiOrgAuth } from '@/components/auth/MultiOrgAuthProvider'
import { useFurnitureOrg, FurnitureOrgLoading } from '@/components/furniture/FurnitureOrgContext'
import FurniturePageHeader from '@/components/furniture/FurniturePageHeader'
import Link from 'next/link'
import { cn } from '@/lib/utils'
import { useInventoryData } from '@/lib/furniture/use-inventory-data'
import { InventoryPageSkeleton } from '@/components/furniture/InventoryPageSkeleton' // Stock level thresholds
const STOCK_LEVELS = { CRITICAL: 10, LOW: 50, NORMAL: 100
} // Movement type configurations
const movementTypes = { purchase_receipt: { label: 'Purchase Receipt', icon: Truck, color: 'text-green-500', bgColor: 'bg-green-500/20' }, sales_delivery: { label: 'Sales Delivery', icon: PackageOpen, color: 'text-blue-500', bgColor: 'bg-blue-500/20' }, stock_adjustment: { label: 'Adjustment', icon: RefreshCw, color: 'text-amber-500', bgColor: 'bg-amber-500/20' }, production_output: { label: 'Production Output', icon: Package, color: 'text-purple-500', bgColor: 'bg-purple-500/20' }, production_consumption: { label: 'Material Consumption', icon: Minus, color: 'text-red-500', bgColor: 'bg-red-500/20' }
} // Stock overview columns
const stockColumns = [ { key: 'entity_code', label: 'SKU', sortable: true, width: '120px', render: (value: string) => <span className="font-mono text-sm">{value}</span> }, { key: 'entity_name', label: 'Product Name', sortable: true, render: (value: string, row: any) => ( <div> <p className="font-medium text-foreground">{value}</p> <p className="text-sm text-muted-foreground">{row.category || 'Uncategorized'}</p> </div> ) }, { key: 'location', label: 'Location', sortable: true, render: (value: string) => ( <div className="bg-background flex items-center gap-2"> <Building className="h-4 w-4 text-muted-foreground" /> <span>{value || 'Main Warehouse'}</span> </div> ) }, { key: 'on_hand', label: 'On Hand', sortable: true, align: 'right' as const, render: (value: number) => { const qty = value || 0 const level = qty <= STOCK_LEVELS.CRITICAL ? 'critical' : qty <= STOCK_LEVELS.LOW ? 'low' : 'normal' const colors = { critical: 'text-red-600 dark:text-red-400', low: 'text-amber-600 dark:text-amber-400', normal: 'text-green-600 dark:text-green-400' } return <span className={cn('font-mono font-medium', colors[level])}>{qty}</span> } }, { key: 'reserved', label: 'Reserved', sortable: true, align: 'right' as const, render: (value: number) => <span className="font-mono text-muted-foreground">{value || 0}</span> }, { key: 'available', label: 'Available', sortable: true, align: 'right' as const, render: (value: number, row: any) => { const available = (row.on_hand || 0) - (row.reserved || 0) return <span className="font-mono font-medium text-foreground">{available}</span> } }, { key: 'in_transit', label: 'In Transit', sortable: true, align: 'right' as const, render: (value: number) => <span className="font-mono text-cyan-400">{value || 0}</span> }, { key: 'reorder_point', label: 'Reorder Point', sortable: true, align: 'right' as const, render: (value: number, row: any) => { const point = value || 20 const onHand = row.on_hand || 0 const needsReorder = onHand <= point return ( <div className="bg-background flex items-center gap-2 justify-end"> <span className="font-mono text-sm">{point}</span> {needsReorder && <AlertCircle className="h-4 w-4 text-amber-500" />} </div> ) } }, { key: 'actions', label: 'Actions', align: 'center' as const, render: (_: any, row: any) => ( <div className="bg-background flex gap-1 justify-center"> <Button variant="ghost" size="sm" className="h-8 w-8 p-0 hover:bg-muted-foreground/10"> <Eye className="h-4 w-4" /> </Button> <Button variant="ghost" size="sm" className="h-8 w-8 p-0 hover:bg-muted-foreground/10"> <Plus className="h-4 w-4" /> </Button> </div> ) }
] // Movement history columns
const movementColumns = [ { key: 'transaction_date', label: 'Date', sortable: true, width: '150px', render: (value: string) => ( <div className="bg-background flex items-center gap-2"> <Calendar className="h-4 w-4 text-muted-foreground" /> <span className="text-sm">{new Date(value).toLocaleDateString()}</span> </div> ) }, { key: 'transaction_code', label: 'Movement #', sortable: true, render: (value: string) => <span className="font-mono text-sm">{value}</span> }, { key: 'transaction_type', label: 'Type', sortable: true, render: (value: string) => { const config = movementTypes[value as keyof typeof movementTypes] || { label: value, icon: Package, color: 'text-muted-foreground', bgColor: 'bg-gray-9000/20' } const Icon = config.icon return ( <Badge variant="outline" className={cn(config.bgColor, config.color, 'border-0')}> <Icon className="h-3 w-3 mr-1" /> {config.label} </Badge> ) } }, { key: 'entity_name', label: 'Product', sortable: true, render: (value: string, row: any) => ( <div> <p className="font-medium">{value}</p> <p className="text-sm text-muted-foreground">{row.entity_code}</p> </div> ) }, { key: 'location', label: 'Location', render: (value: string) => value || 'Main Warehouse' }, { key: 'quantity', label: 'Quantity', sortable: true, align: 'right' as const, render: (value: number, row: any) => { const isIncoming = ['purchase_receipt', 'production_output', 'stock_adjustment'].includes( row.transaction_type ) return ( <div className={cn( 'font-mono font-medium flex items-center gap-1 justify-end', isIncoming ? 'text-green-500' : 'text-red-500' )} > {isIncoming ? ( <ArrowUpRight className="h-4 w-4" /> ) : ( <ArrowDownRight className="h-4 w-4" /> )} {isIncoming ? '+' : '-'} {Math.abs(value || 0)} </div> ) } }, { key: 'balance_after', label: 'Balance', sortable: true, align: 'right' as const, render: (value: number) => <span className="font-mono">{value || 0}</span> }, { key: 'reference', label: 'Reference', render: (value: string, row: any) => { if (row.transaction_type === 'sales_delivery') { return ( <Link href="#" className="bg-background text-cyan-400 hover:underline"> SO-{value} </Link> ) } if (row.transaction_type === 'purchase_receipt') { return ( <Link href="#" className="bg-background text-cyan-400 hover:underline"> PO-{value} </Link> ) } return <span className="text-muted-foreground">{value || '-'}</span> } }
] export default function FurnitureInventory() { const { isAuthenticated, contextLoading } = useMultiOrgAuth() const { organizationId, organizationName, orgLoading } = useFurnitureOrg() const [activeTab, setActiveTab] = useState('overview') const [searchTerm, setSearchTerm] = useState('') const [selectedLocation, setSelectedLocation] = useState('all') const [selectedCategory, setSelectedCategory] = useState('all') // Use the optimized inventory data hook const { stockData, movements, stats, loading, error, refresh, filterStock, filterMovements } = useInventoryData(organizationId) // Memoize filtered data const filteredStock = useMemo(() => { return filterStock(searchTerm, selectedLocation, selectedCategory) }, [stockData, searchTerm, selectedLocation, selectedCategory, filterStock]) const filteredMovements = useMemo(() => { return filterMovements(searchTerm) }, [movements, searchTerm, filterMovements]) // Show loading state while organization is loading if (orgLoading) { return <FurnitureOrgLoading /> } // Show skeleton while data is loading if (loading && stockData.length === 0) { return ( <div className="min-h-screen bg-background"> <div className="p-6"> <InventoryPageSkeleton /> </div> </div> ) } // Show error state if (error) { return ( <div className="min-h-screen bg-background flex items-center justify-center"> <div className="text-center"> <p className="text-red-400 mb-4">Error loading inventory data: {error}</p> <Button onClick={refresh} variant="outline" className="gap-2"> <RefreshCw className="h-4 w-4" /> Retry </Button> </div> </div> ) } // Three-layer authorization pattern if (isAuthenticated) { if (!isAuthenticated) { return ( <div className="min-h-screen bg-background flex items-center justify-center p-6"> <Alert className="max-w-md bg-card/50 border-border"> <AlertCircle className="h-4 w-4" /> <AlertDescription>Please log in to access inventory management.</AlertDescription> </Alert> </div> ) } if (contextLoading) { return ( <div className="min-h-screen bg-background"> <div className="p-6"> <InventoryPageSkeleton /> </div> </div> ) } } const statCards = [ { label: 'Total SKUs', value: stats.totalSKUs, icon: Package, color: 'text-blue-500', trend: '+12%', trendUp: true }, { label: 'Total Value', value: `$${stats.totalValue.toLocaleString()}`, icon: BarChart3, color: 'text-green-500', trend: '+8%', trendUp: true }, { label: 'Low Stock Items', value: stats.lowStockItems, icon: AlertCircle, color: 'text-amber-500', trend: '-5%', trendUp: false }, { label:"Today's Movements", value: stats.movementsToday, icon: Activity, color: 'text-purple-500', trend: '+23%', trendUp: true } ] return ( <div className="min-h-screen bg-background"> <div className="p-6 space-y-6"> {/* Header */} <FurniturePageHeader title="Inventory Management" subtitle="Monitor stock levels and movements" actions={ <> <Button onClick={refresh} variant="ghost" size="icon" className="text-muted-foreground hover:text-foreground" disabled={loading} > <RefreshCw className={cn('h-4 w-4', loading && 'animate-spin')} /> </Button> <Button variant="outline" size="sm"> <RefreshCw className="h-4 w-4 mr-2" /> Sync </Button> <Button size="sm" className="gap-2"> <Plus className="h-4 w-4" /> Stock Movement </Button> </> } /> {/* Stats Cards */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> {statCards.map((stat, index) => ( <Card key={index} className="p-4 bg-card/50 border-border hover:bg-card/70 transition-colors" > <div className="flex items-center justify-between"> <div className="space-y-1"> <p className="text-sm text-muted-foreground">{stat.label}</p> <p className="text-2xl font-bold text-foreground">{stat.value}</p> <div className={cn( 'flex items-center gap-1 text-sm', stat.trendUp ? 'text-green-500' : 'text-red-500' )} > {stat.trendUp ? ( <TrendingUp className="h-3 w-3" /> ) : ( <TrendingDown className="h-3 w-3" /> )} {stat.trend} </div> </div> <stat.icon className={cn('h-8 w-8', stat.color)} /> </div> </Card> ))} </div> {/* Tabs */} <Tabs value={activeTab} onValueChange={setActiveTab} className="bg-background space-y-4"> <div className="flex justify-between items-center"> <TabsList className="bg-muted border-border"> <TabsTrigger value="overview" className="data-[state=active]:bg-muted-foreground/10"> <Warehouse className="h-4 w-4 mr-2" /> Stock Overview </TabsTrigger> <TabsTrigger value="movements" className="data-[state=active]:bg-muted-foreground/10"> <Activity className="h-4 w-4 mr-2" /> Recent Movements </TabsTrigger> <TabsTrigger value="analytics" className="data-[state=active]:bg-muted-foreground/10"> <BarChart3 className="h-4 w-4 mr-2" /> Analytics </TabsTrigger> </TabsList> {/* Search and Filters */} <div className="flex gap-4"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" /> <Input placeholder="Search inventory..." value={searchTerm} onChange={e => setSearchTerm(e.target.value)} className="pl-10 bg-background/50 border-border text-foreground placeholder:text-muted-foreground w-64" /> </div> {activeTab === 'overview' && ( <> <Select value={selectedLocation} onValueChange={setSelectedLocation}> <SelectTrigger className="w-40 bg-background/50 border-border text-foreground"> <SelectValue placeholder="Location" /> </SelectTrigger> <SelectContent className="bg-muted border-border"> <SelectItem value="all">All Locations</SelectItem> <SelectItem value="Main Warehouse">Main Warehouse</SelectItem> <SelectItem value="Showroom">Showroom</SelectItem> <SelectItem value="Production">Production</SelectItem> </SelectContent> </Select> <Select value={selectedCategory} onValueChange={setSelectedCategory}> <SelectTrigger className="w-40 bg-background/50 border-border text-foreground"> <SelectValue placeholder="Category" /> </SelectTrigger> <SelectContent className="bg-muted border-border"> <SelectItem value="all">All Categories</SelectItem> <SelectItem value="office">Office</SelectItem> <SelectItem value="seating">Seating</SelectItem> <SelectItem value="tables">Tables</SelectItem> <SelectItem value="storage">Storage</SelectItem> </SelectContent> </Select> </> )} </div> </div> <TabsContent value="overview" className="bg-background space-y-4"> <EnterpriseDataTable columns={stockColumns} data={filteredStock} loading={loading} searchable={false} sortable selectable pageSize={20} emptyState={{ icon: Package, title: 'No inventory items found', description: searchTerm ? 'Try adjusting your search or filters.' : 'Start by adding products to track inventory.' }} className="bg-card/50 border-border" /> </TabsContent> <TabsContent value="movements" className="bg-background space-y-4"> <EnterpriseDataTable columns={movementColumns} data={filteredMovements} loading={loading} searchable={false} sortable pageSize={20} emptyState={{ icon: Activity, title: 'No movements found', description: 'Stock movements will appear here when products are received or shipped.' }} className="bg-card/50 border-border" /> </TabsContent> <TabsContent value="analytics" className="bg-background space-y-4"> <div className="grid grid-cols-2 gap-6"> <Card className="p-6 bg-card/50 border-border"> <h3 className="bg-background text-lg font-semibold mb-4 text-foreground"> Stock Value by Category </h3> <div className="h-64 flex items-center justify-center text-muted-foreground"> <BarChart3 className="h-16 w-16 opacity-20" /> <p className="ml-4">Chart visualization would go here</p> </div> </Card> <Card className="p-6 bg-card/50 border-border"> <h3 className="bg-background text-lg font-semibold mb-4 text-foreground">Movement Trends</h3> <div className="h-64 flex items-center justify-center text-muted-foreground"> <Activity className="h-16 w-16 opacity-20" /> <p className="ml-4">Trend analysis would go here</p> </div> </Card> </div> </TabsContent> </Tabs> </div> </div> )
}
