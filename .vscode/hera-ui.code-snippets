{
  "HERA Enterprise Modal": {
    "prefix": "hera-modal",
    "body": [
      "<Dialog open={${1:isOpen}} onOpenChange={${2:setIsOpen}}>",
      "  <DialogContent className=\"sm:max-w-[700px] md:max-w-[800px] max-h-[85vh] overflow-hidden flex flex-col\">",
      "    <DialogHeader className=\"flex-shrink-0\">",
      "      <DialogTitle>${3:Modal Title}</DialogTitle>",
      "      <DialogDescription>",
      "        ${4:Modal description}",
      "      </DialogDescription>",
      "    </DialogHeader>",
      "",
      "    <form onSubmit={${5:handleSubmit}} className=\"flex-1 overflow-hidden flex flex-col\">",
      "      <div className=\"flex-1 overflow-y-auto px-1 -mx-1\">",
      "        <div className=\"space-y-6 pb-4\">",
      "          ${6:// Form content}",
      "        </div>",
      "      </div>",
      "",
      "      <DialogFooter className=\"flex-shrink-0 border-t pt-4 mt-2 bg-background sticky bottom-0\">",
      "        <Button variant=\"outline\" onClick={() => ${2:setIsOpen}(false)}>",
      "          Cancel",
      "        </Button>",
      "        <Button type=\"submit\" disabled={${7:isSubmitting}}>",
      "          {${7:isSubmitting} ? (",
      "            <>",
      "              <div className=\"mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent\" />",
      "              ${8:Saving...}",
      "            </>",
      "          ) : (",
      "            '${9:Save}'",
      "          )}",
      "        </Button>",
      "      </DialogFooter>",
      "    </form>",
      "  </DialogContent>",
      "</Dialog>"
    ],
    "description": "HERA enterprise-grade modal with proper structure"
  },
  
  "HERA Form Section": {
    "prefix": "hera-form-section",
    "body": [
      "<div className=\"space-y-4${1: pt-4 border-t}\">",
      "  <h3 className=\"text-sm font-semibold text-muted-foreground\">",
      "    ${2:Section Title}",
      "  </h3>",
      "  <div className=\"space-y-4\">",
      "    ${3:// Form fields}",
      "  </div>",
      "</div>"
    ],
    "description": "Form section with header"
  },
  
  "HERA Currency Input": {
    "prefix": "hera-currency",
    "body": [
      "<div className=\"space-y-2\">",
      "  <Label htmlFor=\"${1:price}\">${2:Price}</Label>",
      "  <CurrencyInput",
      "    id=\"${1:price}\"",
      "    value={${3:formData}.${1:price}}",
      "    onChange={(value) => ${4:setFormData}({...${3:formData}, ${1:price}: value || 0})}",
      "    required={${5:false}}",
      "  />",
      "</div>"
    ],
    "description": "Currency input with proper formatting"
  },
  
  "HERA Loading State": {
    "prefix": "hera-loading",
    "body": [
      "{${1:loading} ? (",
      "  <div className=\"flex items-center justify-center ${2:min-h-screen}\">",
      "    <div className=\"text-center space-y-4\">",
      "      <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />",
      "      <p className=\"text-muted-foreground\">${3:Loading...}</p>",
      "    </div>",
      "  </div>",
      ") : (",
      "  ${4:// Content}",
      ")}"
    ],
    "description": "Standard loading state"
  },
  
  "HERA Table": {
    "prefix": "hera-table",
    "body": [
      "<Card>",
      "  <CardContent className=\"p-0\">",
      "    <Table>",
      "      <TableHeader>",
      "        <TableRow>",
      "          <TableHead>${1:Name}</TableHead>",
      "          <TableHead>${2:Status}</TableHead>",
      "          <TableHead className=\"text-right\">Actions</TableHead>",
      "        </TableRow>",
      "      </TableHeader>",
      "      <TableBody>",
      "        {${3:loading} ? (",
      "          <TableRow>",
      "            <TableCell colSpan={${4:3}} className=\"text-center py-8\">",
      "              <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />",
      "            </TableCell>",
      "          </TableRow>",
      "        ) : ${5:items}.length === 0 ? (",
      "          <TableRow>",
      "            <TableCell colSpan={${4:3}} className=\"text-center py-8 text-muted-foreground\">",
      "              No ${6:items} found",
      "            </TableCell>",
      "          </TableRow>",
      "        ) : (",
      "          ${5:items}.map((item) => (",
      "            <TableRow key={item.id}>",
      "              <TableCell>{item.${7:name}}</TableCell>",
      "              <TableCell>",
      "                <Badge variant={item.${8:is_active} ? 'default' : 'secondary'}>",
      "                  {item.${8:is_active} ? 'Active' : 'Inactive'}",
      "                </Badge>",
      "              </TableCell>",
      "              <TableCell className=\"text-right\">",
      "                <Button size=\"sm\" variant=\"ghost\">",
      "                  <Edit className=\"h-4 w-4\" />",
      "                </Button>",
      "              </TableCell>",
      "            </TableRow>",
      "          ))",
      "        )}",
      "      </TableBody>",
      "    </Table>",
      "  </CardContent>",
      "</Card>"
    ],
    "description": "Enterprise table with loading and empty states"
  },
  
  "HERA Toast": {
    "prefix": "hera-toast",
    "body": [
      "toast({",
      "  title: '${1:Success}',",
      "  description: '${2:Operation completed successfully}',",
      "  ${3:variant: 'destructive',}",
      "})"
    ],
    "description": "Toast notification"
  },
  
  "HERA Auth Check": {
    "prefix": "hera-auth",
    "body": [
      "// Three-layer authentication pattern",
      "if (!isAuthenticated) {",
      "  return <Alert>Please log in to access this page.</Alert>",
      "}",
      "",
      "if (contextLoading) {",
      "  return <LoadingSpinner />",
      "}",
      "",
      "if (!organizationId) {",
      "  return <Alert>No organization context found.</Alert>",
      "}"
    ],
    "description": "Three-layer authentication check"
  },
  
  "HERA Config Page": {
    "prefix": "hera-config-page",
    "body": [
      "'use client'",
      "",
      "import { UniversalConfigManager } from '@/components/universal-config/UniversalConfigManager'",
      "import { CONFIG_TYPES } from '@/lib/universal-config/config-factory'",
      "",
      "export default function ${1:ConfigName}Page() {",
      "  return (",
      "    <div className=\"container mx-auto p-6\">",
      "      <UniversalConfigManager",
      "        config={CONFIG_TYPES.${2:CONFIG_TYPE}}",
      "        apiEndpoint=\"/api/v1/${3:endpoint}\"",
      "        additionalFields={[",
      "          {",
      "            name: 'description',",
      "            label: 'Description',",
      "            type: 'textarea',",
      "            defaultValue: ''",
      "          }",
      "        ]}",
      "        showAnalytics={true}",
      "      />",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Configuration page using UniversalConfigManager"
  }
}