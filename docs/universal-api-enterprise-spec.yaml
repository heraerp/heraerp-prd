openapi: 3.0.3
info:
  title: HERA Universal API - Enterprise Grade
  description: |
    Revolutionary Universal API that replaces 500+ traditional ERP endpoints with just 2 universal endpoints.
    
    **ðŸ§¬ HERA DNA PRINCIPLE**: One API, infinite business complexity, zero schema changes.
    
    **Key Features:**
    - **100% Enterprise Coverage**: All CRUD operations, bulk processing, complex queries, transactions
    - **Sacred Six Architecture**: Uses only 6 universal tables, never requires schema changes  
    - **Multi-Tenant Isolation**: Perfect organization_id security with zero data leakage
    - **AI-Native**: Built-in AI enhancements, validation, and intelligent processing
    - **Enterprise Security**: JWT authentication, RBAC, audit trails, performance optimization
    - **Real-Time Capabilities**: Webhooks, streaming, live data updates
    
    **Revolutionary Impact:**
    - **One API** replaces 500+ traditional ERP endpoints
    - **30-second implementation** vs 18-month traditional ERP projects  
    - **$2.8M cost savings** vs traditional SAP/Oracle implementations
    - **Perfect security** through universal authorization architecture
    
  version: 1.0.0-enterprise
  contact:
    name: HERA DNA Engineering
    email: engineering@heraerp.com
    url: https://heraerp.com
  license:
    name: HERA Enterprise License
    url: https://heraerp.com/license

servers:
  - url: https://api.heraerp.com/v1
    description: HERA Production API
  - url: https://staging.api.heraerp.com/v1
    description: HERA Staging API
  - url: http://localhost:3000/api/v1
    description: Local Development

security:
  - HeraJWT: []
  - ApiKey: []

tags:
  - name: Universal Execute
    description: All write operations (create, update, delete, bulk, transactions)
    externalDocs:
      description: Learn about Universal Architecture
      url: https://docs.heraerp.com/universal-api
  - name: Universal Query
    description: Advanced querying with joins, aggregations, full-text search
    externalDocs:
      description: Query DSL Documentation
      url: https://docs.heraerp.com/query-dsl

paths:
  /universal/execute:
    post:
      tags:
        - Universal Execute
      summary: Execute Universal Write Operations
      description: |
        **Revolutionary Single Endpoint** for ALL write operations across the entire HERA ecosystem.
        
        **Supported Operations:**
        - **Single Operations**: create, update, archive, restore, delete
        - **Bulk Operations**: bulk_create, bulk_update, bulk_archive, bulk_delete
        - **Multi-Operation Transactions**: Execute multiple operations atomically
        
        **Enterprise Features:**
        - **Perfect Multi-Tenancy**: Automatic organization_id isolation
        - **Smart Code Intelligence**: Automatic business rule application
        - **AI Enhancements**: Intelligent validation and enrichment
        - **Relationship Management**: Cycle detection and cardinality enforcement
        - **File Attachments**: Complete document management integration
        - **Real-Time Webhooks**: Event-driven architecture
        - **Performance Optimization**: Caching, streaming, bulk processing
        
        **Sacred Six Integration:**
        - Uses only core_organizations, core_entities, core_dynamic_data, core_relationships, universal_transactions, universal_transaction_lines
        - Zero schema changes required for any business logic
        - Perfect audit trail in universal transaction system
        
      operationId: executeUniversalOperation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteRequest'
            examples:
              create_customer:
                summary: Create Customer Entity
                description: Creating a new customer with dynamic fields and relationships
                value:
                  entity: "core_entities"
                  organization_id: "org-uuid-123"
                  smart_code: "HERA.CRM.CUST.ENT.PROF.v1"
                  operation: "create"
                  data:
                    entity_type: "customer"
                    entity_name: "ACME Corporation"
                    entity_code: "CUST-ACME-001"
                  dynamic_data:
                    - key: "credit_limit"
                      type: "number"
                      value: 100000
                    - key: "payment_terms"
                      type: "string"
                      value: "NET30"
                    - key: "industry"
                      type: "string" 
                      value: "Manufacturing"
                  ai_requests:
                    enrich: ["customer_segment", "risk_profile"]
                    confidence_threshold: 0.85
              bulk_sales_transactions:
                summary: Bulk Sales Transaction Processing
                description: Process multiple sales orders in a single atomic operation
                value:
                  entity: "universal_transactions"
                  organization_id: "org-uuid-123"
                  smart_code: "HERA.REST.BULK.SALES.TXN.v1"
                  operation: "bulk_create"
                  batch:
                    items:
                      - transaction_type: "sale"
                        total_amount: 1250.00
                        from_entity_id: "customer-uuid-1"
                        line_items:
                          - entity_id: "product-uuid-1"
                            quantity: 5
                            unit_price: 250.00
                      - transaction_type: "sale"
                        total_amount: 875.50
                        from_entity_id: "customer-uuid-2"
                        line_items:
                          - entity_id: "product-uuid-2"
                            quantity: 3
                            unit_price: 291.83
                    size: 100
                    atomicity: "all_or_none"
                    continue_on_error: false
                  ai_requests:
                    validate: ["pricing_consistency", "inventory_availability"]
                    enrich: ["profit_margin_analysis"]
              multi_operation_workflow:
                summary: Complex Multi-Operation Transaction
                description: Execute multiple related operations as a single transaction
                value:
                  entity: "universal_transactions"
                  organization_id: "org-uuid-123"
                  smart_code: "HERA.WORKFLOW.NEW.CUSTOMER.ONBOARD.v1"
                  operation: "transaction"
                  operations:
                    - entity: "core_entities"
                      operation: "create"
                      smart_code: "HERA.CRM.CUST.CREATE.v1"
                      alias: "new_customer"
                      data:
                        entity_type: "customer"
                        entity_name: "Tesla Inc"
                        entity_code: "CUST-TESLA-001"
                    - entity: "core_entities"
                      operation: "create"
                      smart_code: "HERA.CRM.CONTACT.CREATE.v1"
                      alias: "primary_contact"
                      data:
                        entity_type: "contact"
                        entity_name: "Elon Musk"
                        entity_code: "CONT-ELON-001"
                      relationships:
                        - from_entity_id: "$ops.primary_contact.id"
                          to_entity_id: "$ops.new_customer.id"
                          relationship_type: "primary_contact_for"
                    - entity: "universal_transactions"
                      operation: "create"
                      smart_code: "HERA.FIN.CREDIT.LIMIT.SET.v1"
                      data:
                        transaction_type: "credit_limit_assignment"
                        total_amount: 5000000
                        from_entity_id: "$ops.new_customer.id"
                  transaction_control:
                    auto_commit: true
                    isolation_level: "serializable"
                  commit: true
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversalResponse'
              examples:
                create_success:
                  summary: Successful Entity Creation
                  value:
                    status: "success"
                    data:
                      id: "ent-uuid-new-123"
                      entity_type: "customer"
                      entity_name: "ACME Corporation"
                      created_at: "2024-01-15T10:30:00Z"
                      transaction_id: "UTX::2024-01-15::abc123"
                    metadata:
                      request_id: "req_1642248600_xyz789"
                      processing_time_ms: 145
                      ai_confidence: 0.92
                bulk_success:
                  summary: Successful Bulk Operation
                  value:
                    status: "success"
                    data:
                      transaction_id: "UTX::2024-01-15::bulk456"
                      total_items: 50
                      successful: 48
                      failed: 2
                      results:
                        - index: 0
                          success: true
                          data:
                            id: "txn-uuid-001"
                            total_amount: 1250.00
                        - index: 1
                          success: true
                          data:
                            id: "txn-uuid-002"
                            total_amount: 875.50
                      errors:
                        - index: 25
                          success: false
                          error: "Insufficient inventory for product-uuid-25"
                    metadata:
                      request_id: "req_1642248600_bulk123"
                      processing_time_ms: 2340
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/InternalError'

  /universal/query:
    post:
      tags:
        - Universal Query
      summary: Execute Advanced Universal Queries
      description: |
        **Revolutionary Query Engine** with SQL-level capabilities through REST API.
        
        **Advanced Query Features:**
        - **Complex Joins**: Multi-table joins across all 6 universal tables
        - **Dynamic Filters**: Query dynamic data fields with type-safe operators
        - **Aggregations**: GROUP BY with count, sum, avg, min, max functions
        - **Full-Text Search**: Search across multiple fields with ranking
        - **Performance Controls**: Caching, indexing, explain plans
        - **Real-Time Subscriptions**: Live query results with webhooks
        
        **Enterprise Capabilities:**
        - **Perfect Multi-Tenancy**: Automatic organization_id filtering
        - **Field-Level Security**: Dynamic field filtering based on permissions
        - **Query Optimization**: Automatic performance hints and caching
        - **Pagination**: Cursor-based and offset pagination with totals
        - **Export Integration**: Direct integration with reporting systems
        
        **Sacred Six Querying:**
        - Query any combination of the 6 universal tables
        - Dynamic data search without schema knowledge
        - Relationship traversal with cycle detection
        - Transaction history and audit trail queries
        
      operationId: executeUniversalQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              customer_revenue_analysis:
                summary: Customer Revenue Analysis
                description: Complex query with joins and aggregations for customer revenue analysis
                value:
                  entity: "core_entities"
                  organization_id: "org-uuid-123"
                  smart_code: "HERA.CRM.ANALYSIS.CUSTOMER.REVENUE.v1"
                  query:
                    filters:
                      entity_type: "customer"
                      status: "active"
                    joins:
                      - entity: "universal_transactions"
                        alias: "sales"
                        on:
                          left: "id"
                          right: "from_entity_id"
                        where:
                          transaction_type: "sale"
                          transaction_date: { ">=": "2024-01-01" }
                        type: "left"
                      - entity: "core_dynamic_data"
                        alias: "customer_data"
                        on:
                          left: "id"
                          right: "entity_id"
                        where:
                          field_name: { "in": ["industry", "credit_rating", "account_manager"] }
                        type: "left"
                    aggregations:
                      group_by: ["entity_name", "customer_data.field_value_text"]
                      metrics:
                        - fn: "count"
                          as: "total_orders"
                        - fn: "sum"
                          field: "sales.total_amount"
                          as: "total_revenue"
                        - fn: "avg"
                          field: "sales.total_amount"
                          as: "avg_order_value"
                    order_by:
                      - field: "total_revenue"
                        direction: "desc"
                  pagination:
                    type: "cursor"
                    limit: 50
                    include_total: true
                  performance:
                    cache_ttl: 300
                    explain: true
              inventory_search:
                summary: Full-Text Inventory Search
                description: Search products with full-text search and dynamic filters
                value:
                  entity: "core_entities"
                  organization_id: "org-uuid-123"  
                  smart_code: "HERA.INV.SEARCH.PRODUCTS.v1"
                  query:
                    filters:
                      entity_type: "product"
                    full_text:
                      fields: ["entity_name", "entity_description"]
                      q: "organic premium coffee"
                      operator: "and"
                    dynamic_filters:
                      - key: "category"
                        operator: "="
                        type: "string"
                        value: "beverages"
                      - key: "price"
                        operator: ">="
                        type: "number"
                        value: 10.00
                      - key: "in_stock"
                        operator: "="
                        type: "boolean"
                        value: true
                    order_by:
                      - field: "_score"
                        direction: "desc"
                      - field: "entity_name"
                        direction: "asc"
                  pagination:
                    type: "offset"
                    offset: 0
                    limit: 25
              relationship_hierarchy:
                summary: Organization Hierarchy Query
                description: Query organizational relationships with hierarchy traversal
                value:
                  entity: "core_relationships"
                  organization_id: "org-uuid-123"
                  smart_code: "HERA.ORG.HIERARCHY.QUERY.v1"
                  query:
                    filters:
                      relationship_type: "reports_to"
                      is_active: true
                    joins:
                      - entity: "core_entities"
                        alias: "employees"
                        on:
                          left: "from_entity_id"
                          right: "id"
                        where:
                          entity_type: "employee"
                        type: "inner"
                      - entity: "core_entities"
                        alias: "managers"
                        on:
                          left: "to_entity_id"
                          right: "id"
                        where:
                          entity_type: "employee"
                        type: "inner"
                    project:
                      - "employees.entity_name as employee_name"
                      - "managers.entity_name as manager_name"
                      - "relationship_type"
                      - "created_at"
                  access_level: "read"
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversalResponse'
              examples:
                revenue_analysis_results:
                  summary: Customer Revenue Analysis Results
                  value:
                    status: "success"
                    rows:
                      - entity_name: "Tesla Inc"
                        industry: "Automotive"
                        total_orders: 45
                        total_revenue: 2847500.00
                        avg_order_value: 63277.78
                      - entity_name: "SpaceX"
                        industry: "Aerospace"
                        total_orders: 12
                        total_revenue: 1250000.00
                        avg_order_value: 104166.67
                    groups:
                      - group_key: "Automotive"
                        total_revenue: 3200000.00
                        customer_count: 8
                      - group_key: "Aerospace"
                        total_revenue: 1800000.00
                        customer_count: 3
                    cursor: "eyJpZCI6InRlc2xhLWluYyIsInNjb3JlIjo5Ny41fQ=="
                    total: 156
                    metadata:
                      request_id: "req_1642248600_query456"
                      processing_time_ms: 89
                      cache_hit: false
                      query_plan:
                        cost: 234
                        operations:
                          - "hash_join (core_entities Ã— universal_transactions)"
                          - "hash_aggregate (group_by: entity_name)"
                          - "sort (total_revenue desc)"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/RateLimit'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    HeraJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        HERA JWT tokens with embedded organization context.
        
        **Token Claims:**
        - `sub`: User ID
        - `organization_id`: Sacred boundary for multi-tenancy
        - `entity_id`: User entity reference in core_entities
        - `role`: User role (owner, admin, manager, user)
        - `permissions`: Array of granular permissions
        
        **Example:** `Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...`
    
    ApiKey:
      type: apiKey
      in: header
      name: X-HERA-API-KEY
      description: API key for server-to-server authentication

  schemas:
    ExecuteRequest:
      type: object
      required:
        - entity
        - organization_id
        - smart_code
        - operation
      properties:
        # Core operation details
        entity:
          type: string
          description: Target table from Sacred Six architecture (ALL TABLES EQUAL TREATMENT)
          enum: 
            - "core_organizations"      # Multi-tenant business isolation
            - "core_entities"           # All business objects  
            - "core_dynamic_data"       # Unlimited custom fields (DIRECT OPS)
            - "core_relationships"      # Entity connections & workflows (ENHANCED)
            - "universal_transactions"  # All business transaction headers
            - "universal_transaction_lines"  # Transaction details (DIRECT OPS)
          example: "core_entities"
        organization_id:
          type: string
          format: uuid
          description: Sacred boundary for multi-tenant isolation
          example: "f1ae3ae4-73b1-4f91-9fd5-a431cbb5b944"
        smart_code:
          type: string
          pattern: "^HERA\\.[A-Z]{2,8}\\.[A-Z]{2,8}\\.[A-Z]{2,8}\\.[A-Z]{2,8}\\.v\\d+$"
          description: Intelligent business context code
          example: "HERA.CRM.CUST.ENT.PROF.v1"
        operation:
          type: string
          enum:
            - "create"
            - "update" 
            - "archive"
            - "restore"
            - "delete"
            - "bulk_create"
            - "bulk_update"
            - "bulk_archive"
            - "bulk_delete"
            - "transaction"
          description: Type of operation to execute
          example: "create"
        
        # Data payload
        data:
          type: object
          description: Primary data for the operation
          additionalProperties: true
          example:
            entity_type: "customer"
            entity_name: "ACME Corporation"
            entity_code: "CUST-ACME-001"
        
        dynamic_data:
          type: array
          description: Dynamic fields without schema changes
          items:
            type: object
            required:
              - key
              - type
              - value
            properties:
              key:
                type: string
                example: "credit_limit"
              type:
                type: string
                enum: ["string", "number", "boolean", "date", "json"]
                example: "number"
              value:
                description: Field value (type determined by 'type' field)
                example: 100000
        
        relationships:
          type: array
          description: Entity relationships to create/update
          items:
            $ref: '#/components/schemas/RelationshipData'
        
        # Bulk operations
        batch:
          $ref: '#/components/schemas/BulkConfig'
        
        # Multi-operation transactions
        operations:
          type: array
          description: Array of operations for transaction execution
          items:
            type: object
            required:
              - entity
              - operation
              - smart_code
            properties:
              entity:
                type: string
              operation:
                type: string
                enum: ["create", "update", "archive", "restore", "delete"]
              smart_code:
                type: string
              alias:
                type: string
                description: Alias for referencing results in subsequent operations
              data:
                type: object
                additionalProperties: true
              dynamic_data:
                type: array
                items:
                  type: object
              relationships:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipData'
        
        # Advanced options
        transaction_control:
          $ref: '#/components/schemas/TransactionControl'
        cascade:
          $ref: '#/components/schemas/CascadeOptions'
        ai_requests:
          $ref: '#/components/schemas/AIEnhancement'
        webhooks:
          $ref: '#/components/schemas/WebhookConfig'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentConfig'
        performance:
          $ref: '#/components/schemas/PerformanceOptions'
        guard:
          $ref: '#/components/schemas/RelationshipGuard'
        
        # Concurrency control
        idempotency_key:
          type: string
          description: Unique key for idempotent operations
          example: "idmp_customer_create_20240115_abc123"
        version:
          type: string
          description: Version for optimistic locking
          example: "v1.2.3"
        if_match:
          type: string
          description: ETag for conditional updates
          example: "W/\"abc123def456\""
        
        # Audit and compliance
        reason:
          type: string
          description: Reason for the operation (audit trail)
          example: "Customer onboarding process"
        audit_context:
          type: object
          description: Additional audit context
          additionalProperties: true
        
        commit:
          type: boolean
          description: Auto-commit transaction
          default: true

    QueryRequest:
      type: object
      required:
        - entity
        - organization_id
        - smart_code
        - query
      properties:
        entity:
          type: string
          description: Primary table to query from Sacred Six
          enum:
            - "core_organizations"
            - "core_entities"
            - "core_dynamic_data" 
            - "core_relationships"
            - "universal_transactions"
            - "universal_transaction_lines"
          example: "core_entities"
        organization_id:
          type: string
          format: uuid
          description: Organization context for multi-tenant filtering
          example: "f1ae3ae4-73b1-4f91-9fd5-a431cbb5b944"
        smart_code:
          type: string
          description: Query context and optimization hints
          example: "HERA.CRM.QUERY.CUSTOMERS.v1"
        
        query:
          $ref: '#/components/schemas/AdvancedQuery'
        
        pagination:
          $ref: '#/components/schemas/PaginationOptions'
        
        performance:
          $ref: '#/components/schemas/PerformanceOptions'
        
        access_level:
          type: string
          enum: ["read", "read_sensitive", "admin"]
          description: Security level for data access
          default: "read"
        
        field_filters:
          type: array
          items:
            type: string
          description: Fields to include/exclude based on permissions
          example: ["entity_name", "entity_code", "created_at"]
        
        subscribe:
          type: boolean
          description: Enable real-time subscription
          default: false
        
        webhook_url:
          type: string
          format: uri
          description: Webhook URL for real-time updates
          example: "https://app.example.com/webhooks/query-updates"

    AdvancedQuery:
      type: object
      properties:
        filters:
          type: object
          description: Basic field filters
          additionalProperties: true
          example:
            entity_type: "customer"
            status: "active"
        
        joins:
          type: array
          items:
            $ref: '#/components/schemas/QueryJoin'
        
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/QueryAggregation'
        
        full_text:
          $ref: '#/components/schemas/FullTextSearch'
        
        dynamic_filters:
          type: array
          items:
            $ref: '#/components/schemas/DynamicDataFilter'
        
        project:
          type: array
          items:
            type: string
          description: Fields to return
          example: ["entity_name", "entity_code", "created_at"]
        
        order_by:
          type: array
          items:
            $ref: '#/components/schemas/OrderByClause'

    QueryJoin:
      type: object
      required:
        - entity
        - alias
        - on
      properties:
        entity:
          type: string
          description: Table to join with
          example: "universal_transactions"
        alias:
          type: string
          description: Alias for the joined table
          example: "sales"
        on:
          type: object
          required:
            - left
            - right
          properties:
            left:
              type: string
              example: "id"
            right:
              type: string
              example: "from_entity_id"
        where:
          type: object
          description: Additional filters for the join
          additionalProperties: true
        type:
          type: string
          enum: ["inner", "left", "right", "full"]
          default: "inner"

    QueryAggregation:
      type: object
      properties:
        group_by:
          type: array
          items:
            type: string
          example: ["entity_type", "status"]
        metrics:
          type: array
          items:
            type: object
            required:
              - fn
              - as
            properties:
              fn:
                type: string
                enum: ["count", "sum", "avg", "min", "max", "distinct_count"]
              field:
                type: string
                description: Field to aggregate (optional for count)
              as:
                type: string
                description: Alias for the result
                example: "total_revenue"

    FullTextSearch:
      type: object
      required:
        - fields
        - q
      properties:
        fields:
          type: array
          items:
            type: string
          description: Fields to search in
          example: ["entity_name", "entity_description"]
        q:
          type: string
          description: Search query
          example: "organic premium coffee"
        operator:
          type: string
          enum: ["and", "or"]
          default: "and"

    DynamicDataFilter:
      type: object
      required:
        - key
        - operator
        - type
        - value
      properties:
        key:
          type: string
          description: Dynamic field name
          example: "credit_limit"
        operator:
          type: string
          enum: ["=", "!=", ">", "<", ">=", "<=", "in", "not_in", "contains", "starts_with"]
        type:
          type: string
          enum: ["string", "number", "boolean", "date"]
        value:
          description: Filter value

    OrderByClause:
      type: object
      required:
        - field
        - direction
      properties:
        field:
          type: string
          example: "created_at"
        direction:
          type: string
          enum: ["asc", "desc"]
        nulls:
          type: string
          enum: ["first", "last"]

    BulkConfig:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          description: Array of items to process
          items:
            type: object
            additionalProperties: true
        size:
          type: integer
          description: Batch size for processing
          default: 100
          minimum: 1
          maximum: 10000
        atomicity:
          type: string
          enum: ["per_item", "all_or_none"]
          description: Atomicity level for bulk operations
          default: "per_item"
        continue_on_error:
          type: boolean
          description: Continue processing after errors
          default: true
        max_concurrency:
          type: integer
          description: Maximum concurrent operations
          default: 10

    TransactionControl:
      type: object
      properties:
        auto_commit:
          type: boolean
          description: Automatically commit transaction
          default: true
        isolation_level:
          type: string
          enum: ["read_uncommitted", "read_committed", "repeatable_read", "serializable"]
          default: "read_committed"
        timeout_ms:
          type: integer
          description: Transaction timeout in milliseconds
          default: 30000

    CascadeOptions:
      type: object
      properties:
        relationships:
          type: string
          enum: ["deactivate", "delete", "reassign"]
          description: How to handle related entities
          default: "deactivate"
        dynamic_data:
          type: string
          enum: ["retain", "archive", "delete"]
          description: How to handle dynamic data
          default: "retain"
        reassign_children_to:
          type: string
          format: uuid
          description: Entity ID to reassign children to
        reason:
          type: string
          description: Reason for cascade operation

    AIEnhancement:
      type: object
      properties:
        enrich:
          type: array
          items:
            type: string
          description: Fields to enrich with AI
          example: ["customer_segment", "risk_profile"]
        validate:
          type: array
          items:
            type: string
          description: Validations to perform
          example: ["data_consistency", "business_rules"]
        confidence_threshold:
          type: number
          minimum: 0
          maximum: 1
          description: Minimum confidence for AI decisions
          default: 0.8
        classification:
          type: boolean
          description: Enable AI classification
          default: false
        sentiment:
          type: boolean
          description: Enable sentiment analysis
          default: false

    WebhookConfig:
      type: object
      properties:
        subscribe:
          type: array
          items:
            type: object
            required:
              - event
              - url
            properties:
              event:
                type: string
                description: Event type to subscribe to
                example: "entity.created"
              url:
                type: string
                format: uri
                description: Webhook URL
        retry_policy:
          type: object
          properties:
            strategy:
              type: string
              enum: ["exponential_backoff", "fixed_delay"]
            max_attempts:
              type: integer
              default: 3
            dead_letter:
              type: string
              description: Dead letter queue URL
        signature:
          type: object
          properties:
            algo:
              type: string
              example: "sha256"
            secret_id:
              type: string
              description: Secret ID for signature verification

    AttachmentConfig:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: Field name for the attachment
          example: "invoice_pdf"
        file_id:
          type: string
          description: Single file ID
        file_ids:
          type: array
          items:
            type: string
          description: Multiple file IDs
        metadata:
          type: object
          additionalProperties: true
          description: Additional file metadata

    PerformanceOptions:
      type: object
      properties:
        cache_ttl:
          type: integer
          description: Cache time-to-live in seconds
          default: 300
        use_indexes:
          type: array
          items:
            type: string
          description: Specific indexes to use
        explain:
          type: boolean
          description: Return query execution plan
          default: false
        max_rows:
          type: integer
          description: Maximum rows to return
          default: 10000
        streaming:
          type: boolean
          description: Enable streaming response
          default: false

    RelationshipGuard:
      type: object
      properties:
        prevent_cycles:
          type: boolean
          description: Prevent circular relationships
          default: true
        enforce_cardinality:
          type: string
          enum: ["tree", "dag", "graph"]
          description: Relationship structure enforcement
        effective_date:
          type: string
          format: date-time
          description: When relationship becomes effective
        expiration_date:
          type: string
          format: date-time
          description: When relationship expires
        max_depth:
          type: integer
          description: Maximum relationship depth
          default: 10

    PaginationOptions:
      type: object
      properties:
        type:
          type: string
          enum: ["cursor", "offset"]
          default: "cursor"
        cursor:
          type: string
          description: Cursor for cursor-based pagination
        offset:
          type: integer
          description: Offset for offset-based pagination
          minimum: 0
        limit:
          type: integer
          description: Number of items per page
          default: 50
          minimum: 1
          maximum: 1000
        include_total:
          type: boolean
          description: Include total count in response
          default: false

    RelationshipData:
      type: object
      required:
        - from_entity_id
        - to_entity_id
        - relationship_type
      properties:
        from_entity_id:
          type: string
          format: uuid
          description: Source entity ID
        to_entity_id:
          type: string
          format: uuid
          description: Target entity ID
        relationship_type:
          type: string
          description: Type of relationship
          example: "customer_of"
        is_active:
          type: boolean
          default: true
        metadata:
          type: object
          additionalProperties: true
          description: Additional relationship data

    UniversalResponse:
      type: object
      required:
        - status
        - metadata
      properties:
        status:
          type: string
          enum: ["success", "partial", "error"]
          description: Overall operation status
        data:
          description: Response data for single operations
        rows:
          type: array
          description: Query result rows
          items:
            type: object
            additionalProperties: true
        groups:
          type: array
          description: Aggregated groups from query
          items:
            type: object
            additionalProperties: true
        cursor:
          type: string
          description: Cursor for pagination
        total:
          type: integer
          description: Total number of records
        errors:
          type: array
          items:
            $ref: '#/components/schemas/UniversalError'
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/UniversalError'
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'

    UniversalError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "VALIDATION_FAILED"
        field:
          type: string
          description: Field that caused the error
          example: "entity_name"
        message:
          type: string
          description: Human-readable error message
          example: "Entity name is required"
        details:
          type: object
          additionalProperties: true
          description: Additional error details
        retry_after:
          type: integer
          description: Seconds to wait before retry
        retry_possible:
          type: boolean
          description: Whether retry is possible
          default: true
        smart_code:
          type: string
          description: Smart code context for error
        rule:
          type: string
          description: Business rule that failed

    ResponseMetadata:
      type: object
      required:
        - request_id
        - processing_time_ms
      properties:
        request_id:
          type: string
          description: Unique request identifier
          example: "req_1642248600_xyz789"
        processing_time_ms:
          type: integer
          description: Processing time in milliseconds
          example: 145
        transaction_id:
          type: string
          description: Transaction identifier
          example: "UTX::2024-01-15::abc123"
        ai_confidence:
          type: number
          minimum: 0
          maximum: 1
          description: AI confidence score
        cache_hit:
          type: boolean
          description: Whether response was served from cache
        query_plan:
          type: object
          description: Query execution plan (if requested)
          additionalProperties: true

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalResponse'
          example:
            status: "error"
            errors:
              - code: "VALIDATION_FAILED"
                field: "organization_id"
                message: "Organization ID is required for multi-tenant operations"
                retry_possible: false
            metadata:
              request_id: "req_1642248600_err400"
              processing_time_ms: 15

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalResponse'
          example:
            status: "error"
            errors:
              - code: "AUTHENTICATION_REQUIRED"
                message: "Valid JWT token required in Authorization header"
                retry_possible: true
            metadata:
              request_id: "req_1642248600_err401"
              processing_time_ms: 8

    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalResponse'
          example:
            status: "error"
            errors:
              - code: "ACCESS_DENIED"
                message: "Insufficient permissions for this operation"
                details:
                  required_permission: "entities:write"
                  user_permissions: ["entities:read"]
                retry_possible: false
            metadata:
              request_id: "req_1642248600_err403"
              processing_time_ms: 12

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalResponse'
          example:
            status: "error"
            errors:
              - code: "RESOURCE_CONFLICT"
                message: "Entity with code 'CUST-ACME-001' already exists"
                details:
                  conflicting_entity_id: "ent-uuid-existing-123"
                retry_possible: false
            metadata:
              request_id: "req_1642248600_err409"
              processing_time_ms: 25

    RateLimit:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalResponse'
          example:
            status: "error"
            errors:
              - code: "RATE_LIMIT_EXCEEDED"
                message: "Too many requests. Limit: 1000/hour"
                retry_after: 3600
                retry_possible: true
            metadata:
              request_id: "req_1642248600_err429"
              processing_time_ms: 5
      headers:
        X-RateLimit-Limit:
          description: Request limit per hour
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Requests remaining in current window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Time when rate limit resets
          schema:
            type: integer
            format: unix-timestamp
        Retry-After:
          description: Seconds to wait before retrying
          schema:
            type: integer

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalResponse'
          example:
            status: "error"
            errors:
              - code: "INTERNAL_ERROR"
                message: "An unexpected error occurred. Please try again."
                retry_possible: true
            metadata:
              request_id: "req_1642248600_err500"
              processing_time_ms: 150

externalDocs:
  description: HERA Universal API Documentation
  url: https://docs.heraerp.com/api