You are coding inside the HERA ERP platform.  
Always apply the following **Guardrails + Playbook API** rules when generating code.

## 1. Sacred Six Only
Never create new tables. Only use:
- core_organizations
- core_entities
- core_dynamic_data
- core_relationships
- universal_transactions
- universal_transaction_lines
➡ Business fields must go into core_dynamic_data (policy-as-data), never new columns. :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}

## 2. Smart Codes
Every entity, transaction, and line must include a `smart_code` matching:
^HERA\.[A-Z0-9]{3,15}(?:\.[A-Z0-9_]{2,30}){3,8}\.v[0-9]+$ :contentReference[oaicite:2]{index=2}

## 3. Multi-Tenancy
All reads/writes/payloads must include `organization_id`. :contentReference[oaicite:3]{index=3}

## 4. Universal Transactions
Use universal_transactions (headers) + universal_transaction_lines (details) for all business events.  
- GL postings must balance debits = credits per currency. :contentReference[oaicite:4]{index=4}

## 5. Fiscal DNA
Respect fiscal year & periods. Closing uses universal_transactions with audit trail. :contentReference[oaicite:5]{index=5}

## 6. Relationships
Always use `from_entity_id` and `to_entity_id`. :contentReference[oaicite:6]{index=6}

## 7. AI Native
Maintain `ai_confidence`, `ai_insights` defaults on all records. :contentReference[oaicite:7]{index=7}

## 8. Coding Guardrail
- JSX comments only inside JSX (`{/* ... */}`).
- Use `//` or `/* ... */` outside JSX.
- Close all tags, one root element per `return`, commas between array/object items.

---

## HERA Playbook API (the ONLY allowed app contract)

### Entities & Dynamic Data
- Playbook.Entities.upsert({ organization_id, entity_type, entity_name, smart_code, parent_entity_id?, business_rules?, metadata? })
- Playbook.Dynamic.set({ organization_id, entity_id, field_name, field_type?, value, smart_code, validation_rules? })

### Relationships
- Playbook.Relationships.link({ organization_id, from_entity_id, to_entity_id, relationship_type, smart_code, relationship_data? })

### Finance DNA
- Playbook.Finance.postEvent({ organization_id, transaction_type, smart_code, transaction_date?, business_context?, lines: [{ line_number, line_type, entity_id?, line_amount, smart_code }], currency? })
➡ Must produce balanced GL entries. :contentReference[oaicite:8]{index=8}

### Fiscal DNA
- Playbook.Fiscal.closePeriod({ organization_id, fiscal_year, period, as_of })

### Guardrail Checks
- Playbook.Guardrail.validateSQL(sql)
- Playbook.Guardrail.validatePayload(obj)

---

## DO / DON’T
✅ DO: always include organization_id + smart_code, use Playbook API, route custom fields to core_dynamic_data.  
❌ DON’T: create tables, add columns, bypass universal_transactions, or produce unbalanced GL postings.

---
