name: HERA DB Enterprise

on:
  workflow_dispatch:
    inputs:
      apply_prod:
        description: 'Apply to PROD if diff clean and approved'
        required: false
        default: 'false'
  push:
    paths:
      - 'scripts/manifest/**'
      - 'db/enterprise/**'

jobs:
  build-manifest-dev:
    name: Build Manifest (DEV)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - name: Build Manifest v2 (DEV)
        env:
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          HERA_OUT_DIR: artifacts
        run: npx tsx scripts/manifest/build.ts
      - name: Upload DEV manifest
        uses: actions/upload-artifact@v4
        with:
          name: dev-manifest
          path: artifacts/manifest.v2.json

  diff-dev-prod:
    name: Diff DEV â†’ PROD
    runs-on: ubuntu-latest
    needs: build-manifest-dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - name: Download DEV manifest
        uses: actions/download-artifact@v4
        with:
          name: dev-manifest
          path: artifacts
      - name: Run Diff
        env:
          DEV_DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          HERA_OUT_DIR: artifacts
        run: npx tsx scripts/manifest/diff.ts
      - name: Upload Diff Reports
        uses: actions/upload-artifact@v4
        with:
          name: manifest-diff
          path: |
            artifacts/manifest-diff.json
            artifacts/manifest-diff.txt

  apply-prod:
    name: Apply to PROD
    runs-on: ubuntu-latest
    needs: diff-dev-prod
    if: ${{ github.event.inputs.apply_prod == 'true' }}
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_DASHBOARD_URL }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - name: Build Manifest (PROD snapshot)
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          HERA_OUT_DIR: artifacts
        run: npx tsx scripts/manifest/build.ts
      - name: Apply Manifest (PROD)
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          HERA_MANIFEST_IN: artifacts/manifest.v2.json
        run: npx tsx scripts/manifest/apply.ts

  post-deploy-probes:
    name: Post-deploy Probes
    runs-on: ubuntu-latest
    needs: apply-prod
    if: ${{ always() && needs.apply-prod.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - name: Partition Health
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          node -e "const {Client}=require('pg');(async()=>{const c=new Client({connectionString:process.env.DATABASE_URL});await c.connect();const r=await c.query(`select parent, count(*) as parts from (select c.relname as parent from pg_partitioned_table pt join pg_class c on c.oid=pt.partrelid join pg_namespace n on n.oid=c.relnamespace where n.nspname='public' and c.relname like 'hera_%') x group by parent`);console.log(r.rows);await c.end()})().catch(e=>{console.error(e);process.exit(1)})"
      - name: pg_stat_statements Regression
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          node -e "const {Client}=require('pg');(async()=>{const c=new Client({connectionString:process.env.DATABASE_URL});await c.connect();const r=await c.query(`select count(*) from pg_stat_statements`);console.log('pg_stat_statements rows:',r.rows[0].count);await c.end()})().catch(e=>{console.error(e);process.exit(1)})"
      - name: Explain Analyze Probe
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          node -e "const {Client}=require('pg');(async()=>{const c=new Client({connectionString:process.env.DATABASE_URL});await c.connect();const r=await c.query('EXPLAIN ANALYZE SELECT 1');console.log(r.rows.map(x=>Object.values(x)[0]).join('\n'));await c.end()})().catch(e=>{console.error(e);process.exit(1)})"

