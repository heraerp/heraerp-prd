[
  {
    "viewname": "entity_with_dynamic_data",
    "view_definition": "CREATE OR REPLACE VIEW entity_with_dynamic_data AS  SELECT e.id,\n    e.organization_id,\n    e.entity_type,\n    e.entity_name,\n    e.entity_code,\n    e.entity_category,\n    e.entity_subcategory,\n    e.description,\n    e.tags,\n    e.status,\n    e.effective_date,\n    e.expiry_date,\n    e.metadata,\n    e.ai_confidence,\n    e.ai_classification,\n    e.ai_tags,\n    e.parent_entity_id,\n    e.hierarchy_level,\n    e.sort_order,\n    e.created_at,\n    e.updated_at,\n    e.created_by,\n    e.updated_by,\n    e.version,\n    json_object_agg(dd.field_name, json_build_object('value',\n        CASE\n            WHEN (dd.field_value IS NOT NULL) THEN dd.field_value\n            WHEN (dd.field_value_number IS NOT NULL) THEN (dd.field_value_number)::text\n            WHEN (dd.field_value_boolean IS NOT NULL) THEN (dd.field_value_boolean)::text\n            WHEN (dd.field_value_date IS NOT NULL) THEN (dd.field_value_date)::text\n            WHEN (dd.field_value_json IS NOT NULL) THEN (dd.field_value_json)::text\n            ELSE NULL::text\n        END, 'raw_value',\n        CASE dd.field_type\n            WHEN 'number'::text THEN to_jsonb(dd.field_value_number)\n            WHEN 'boolean'::text THEN to_jsonb(dd.field_value_boolean)\n            WHEN 'date'::text THEN to_jsonb(dd.field_value_date)\n            WHEN 'json'::text THEN dd.field_value_json\n            ELSE to_jsonb(dd.field_value)\n        END, 'type', dd.field_type, 'ai_enhanced', dd.ai_enhanced_value, 'confidence', dd.ai_confidence)) FILTER (WHERE (dd.id IS NOT NULL)) AS dynamic_fields\n   FROM (core_entities e\n     LEFT JOIN core_dynamic_data dd ON ((e.id = dd.entity_id)))\n  GROUP BY e.id;;"
  },
  {
    "viewname": "transaction_with_lines",
    "view_definition": "CREATE OR REPLACE VIEW transaction_with_lines AS  SELECT t.id,\n    t.organization_id,\n    t.transaction_type,\n    t.transaction_number,\n    t.transaction_date,\n    t.reference_number,\n    t.external_reference,\n    t.source_entity_id,\n    t.target_entity_id,\n    t.total_amount,\n    t.tax_amount,\n    t.discount_amount,\n    t.net_amount,\n    t.currency,\n    t.status,\n    t.workflow_state,\n    t.priority,\n    t.department,\n    t.project_code,\n    t.cost_center,\n    t.due_date,\n    t.completed_date,\n    t.description,\n    t.notes,\n    t.metadata,\n    t.attachments,\n    t.ai_insights,\n    t.ai_risk_score,\n    t.ai_anomaly_score,\n    t.created_at,\n    t.updated_at,\n    t.created_by,\n    t.updated_by,\n    t.version,\n    json_agg(json_build_object('id', tl.id, 'entity_id', tl.entity_id, 'description', tl.line_description, 'quantity', tl.quantity, 'unit_price', tl.unit_price, 'line_amount', tl.line_amount, 'gl_account', tl.gl_account_code, 'ai_suggestion', tl.ai_gl_suggestion) ORDER BY tl.line_order) AS line_items\n   FROM (universal_transactions t\n     LEFT JOIN universal_transaction_lines tl ON ((t.id = tl.transaction_id)))\n  GROUP BY t.id;;"
  }
]