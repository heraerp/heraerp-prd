diff --git a/src/app/api/v2/entities/route.ts b/src/app/api/v2/entities/route.ts
index 64516043..66d889ea 100644
--- a/src/app/api/v2/entities/route.ts
+++ b/src/app/api/v2/entities/route.ts
@@ -199,6 +199,8 @@ export async function GET(request: NextRequest) {
     const offset = parseInt(searchParams.get('p_offset') || searchParams.get('offset') || '0')
     const include_dynamic =
       searchParams.get('p_include_dynamic') !== 'false' && searchParams.get('include_dynamic') !== 'false'
+    const include_relationships =
+      searchParams.get('p_include_relationships') !== 'false' && searchParams.get('include_relationships') !== 'false'
 
     const supabase = getSupabaseService()
 
@@ -208,17 +210,29 @@ export async function GET(request: NextRequest) {
       entity_id,
       status,
       include_dynamic,
+      include_relationships,
       limit,
       offset
     })
 
+    console.log('üì° [GET entities] Calling RPC with:', {
+      p_organization_id: organizationId,
+      p_entity_id: entity_id || null,
+      p_entity_type: entity_type || null,
+      p_status: status,
+      p_include_relationships: include_relationships,
+      p_include_dynamic_data: include_dynamic,
+      p_limit: limit,
+      p_offset: offset
+    })
+
     // Call HERA RPC function v1
     const { data: result, error: rpcError } = await supabase.rpc('hera_entity_read_v1', {
       p_organization_id: organizationId,
       p_entity_id: entity_id || null,
       p_entity_type: entity_type || null,
       p_status: status,
-      p_include_relationships: false,
+      p_include_relationships: include_relationships,
       p_include_dynamic_data: include_dynamic,
       p_limit: limit,
       p_offset: offset
@@ -235,7 +249,9 @@ export async function GET(request: NextRequest) {
     console.log('‚úÖ [GET entities] RPC success:', {
       hasResult: !!result,
       isSuccess: result?.success,
-      dataCount: result?.data?.length || 0
+      dataCount: result?.data?.length || 0,
+      firstItemHasRelationships: result?.data?.[0] ? !!result.data[0].relationships : false,
+      firstItemSample: result?.data?.[0] || null
     })
 
     // Handle RPC response
diff --git a/src/app/salon/appointments/new/page.tsx b/src/app/salon/appointments/new/page.tsx
index a7db9c43..11047a3b 100644
--- a/src/app/salon/appointments/new/page.tsx
+++ b/src/app/salon/appointments/new/page.tsx
@@ -16,7 +16,17 @@ import { universalApi } from '@/lib/universal-api-v2'
 import { createDraftAppointment } from '@/lib/appointments/createDraftAppointment'
 import { upsertAppointmentLines } from '@/lib/appointments/upsertAppointmentLines'
 import { useBranchFilter } from '@/hooks/useBranchFilter'
+import { useHeraCustomers } from '@/hooks/useHeraCustomers'
+import { useHeraServices } from '@/hooks/useHeraServicesV2'
+import { useHeraStaff } from '@/hooks/useHeraStaff'
 import { BranchSelector } from '@/components/ui/BranchSelector'
+import {
+  Dialog,
+  DialogContent,
+  DialogHeader,
+  DialogTitle,
+  DialogDescription
+} from '@/components/ui/dialog'
 import { Button } from '@/components/ui/button'
 import { Input } from '@/components/ui/input'
 import { Label } from '@/components/ui/label'
@@ -53,22 +63,39 @@ import { cn } from '@/lib/utils'
 interface Customer {
   id: string
   entity_name: string
-  entity_code: string
-  metadata?: {
-    phone?: string
-    email?: string
+  entity_code?: string
+  // Flattened fields from useHeraCustomers
+  phone?: string
+  email?: string
+  vip?: boolean
+  notes?: string
+  // Also support dynamic_fields structure for compatibility
+  dynamic_fields?: {
+    phone?: { value: string }
+    email?: { value: string }
+    vip?: { value: boolean }
+    notes?: { value: string }
   }
 }
 
 interface Service {
   id: string
   entity_name: string
-  entity_code: string
-  metadata?: {
-    price?: number
-    duration_minutes?: number
-    category?: string
+  entity_code?: string
+  category?: string
+  // Fields from useHeraServices (dynamic_fields)
+  dynamic_fields?: {
+    price_market?: { value: number }
+    duration_min?: { value: number }
+    commission_rate?: { value: number }
+    description?: { value: string }
   }
+  // Also support flattened fields for compatibility
+  price_market?: number
+  duration_min?: number
+  // Legacy field names
+  price_amount?: number
+  duration_minutes?: number
 }
 
 interface Stylist {
@@ -137,6 +164,41 @@ function NewAppointmentContent() {
     hasMultipleBranches
   } = useBranchFilter(selectedBranchId, 'salon-appointments', organizationId)
 
+  // Use enterprise-grade HERA hooks for data
+  const {
+    customers,
+    isLoading: customersLoading,
+    error: customersError,
+    createCustomer
+  } = useHeraCustomers({
+    organizationId,
+    includeArchived: false
+  })
+
+  const {
+    services,
+    isLoading: servicesLoading,
+    error: servicesError
+  } = useHeraServices({
+    organizationId,
+    includeArchived: false,
+    filters: {
+      branch_id: branchId || 'all'
+    }
+  })
+
+  const {
+    staff: stylists,
+    isLoading: staffLoading,
+    error: staffError
+  } = useHeraStaff({
+    organizationId,
+    includeArchived: false,
+    filters: {
+      branch_id: branchId || 'all'
+    }
+  })
+
   // Form state
   const [selectedDate, setSelectedDate] = useState(format(new Date(), 'yyyy-MM-dd'))
   const [selectedTime, setSelectedTime] = useState('')
@@ -144,34 +206,72 @@ function NewAppointmentContent() {
   const [selectedStylist, setSelectedStylist] = useState<Stylist | null>(null)
   const [notes, setNotes] = useState('')
 
-  // Data state
-  const [customers, setCustomers] = useState<Customer[]>([])
-  const [services, setServices] = useState<Service[]>([])
-  const [stylists, setStylists] = useState<Stylist[]>([])
+  // Cart and UI state
   const [cart, setCart] = useState<CartItem[]>([])
-  const [loading, setLoading] = useState(true)
   const [saving, setSaving] = useState(false)
+  const [showSuccessDialog, setShowSuccessDialog] = useState(false)
+  const [createdAppointmentId, setCreatedAppointmentId] = useState<string | null>(null)
 
   // Search state
   const [customerSearch, setCustomerSearch] = useState('')
   const [serviceSearch, setServiceSearch] = useState('')
 
-  // Generate available time slots
+  // New customer modal state
+  const [showNewCustomerModal, setShowNewCustomerModal] = useState(false)
+  const [newCustomerData, setNewCustomerData] = useState({
+    name: '',
+    phone: '',
+    email: ''
+  })
+  const [creatingCustomer, setCreatingCustomer] = useState(false)
+
+  // Combined loading state
+  const loading = customersLoading || servicesLoading || staffLoading
+
+  // Generate available time slots (realistic working hours: 9 AM - 9 PM)
   const generateTimeSlots = (): TimeSlot[] => {
     const slots: TimeSlot[] = []
-    const date = new Date(`${selectedDate}T09:00:00`)
-    const endTime = new Date(`${selectedDate}T18:00:00`)
+    const now = new Date()
+    const selectedDateObj = new Date(selectedDate)
+    const isToday = selectedDateObj.toDateString() === now.toDateString()
+
+    // Working hours: 9:00 AM to 9:00 PM
+    const startHour = 9
+    const endHour = 21
+
+    // Start from current hour if today, otherwise from opening time
+    let currentHour = isToday ? Math.max(now.getHours(), startHour) : startHour
+    let currentMinute = isToday ? (now.getMinutes() < 30 ? 30 : 0) : 0
 
-    while (date < endTime) {
-      const start = new Date(date)
-      const end = new Date(date.getTime() + 30 * 60 * 1000) // 30 min slots
+    // If today and current minute is 30+, start from next hour
+    if (isToday && now.getMinutes() >= 30 && currentMinute === 0) {
+      currentHour += 1
+    }
+
+    // Generate 30-minute slots
+    while (currentHour < endHour || (currentHour === endHour && currentMinute === 0)) {
+      const startTime = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`
+
+      // Calculate end time (30 minutes later)
+      let endMinute = currentMinute + 30
+      let endHour = currentHour
+      if (endMinute >= 60) {
+        endMinute = 0
+        endHour += 1
+      }
+      const endTime = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`
 
       slots.push({
-        start: start.toTimeString().substring(0, 5),
-        end: end.toTimeString().substring(0, 5)
+        start: startTime,
+        end: endTime
       })
 
-      date.setMinutes(date.getMinutes() + 30)
+      // Move to next slot
+      currentMinute += 30
+      if (currentMinute >= 60) {
+        currentMinute = 0
+        currentHour += 1
+      }
     }
 
     return slots
@@ -191,60 +291,6 @@ function NewAppointmentContent() {
   const totalAmount = cart.reduce((sum, item) => sum + item.price * item.quantity, 0)
   const totalDuration = cart.reduce((sum, item) => sum + item.duration * item.quantity, 0)
 
-  // Load initial data
-  useEffect(() => {
-    if (!organizationId) return
-
-    const loadData = async () => {
-      try {
-        setLoading(true)
-
-        // Set organization ID on universalApi
-        universalApi.setOrganizationId(organizationId)
-
-        console.log('üìä Loading appointment data for org:', organizationId)
-
-        // Load customers
-        const customersResponse = await universalApi.read('core_entities', {
-          organization_id: organizationId,
-          entity_type: 'customer'
-        })
-
-        console.log('üë• Customers response:', customersResponse)
-
-        // Load services
-        const servicesResponse = await universalApi.read('core_entities', {
-          organization_id: organizationId,
-          entity_type: 'service'
-        })
-
-        console.log('‚úÇÔ∏è Services response:', servicesResponse)
-
-        // Load stylists
-        const stylistsResponse = await universalApi.read('core_entities', {
-          organization_id: organizationId,
-          entity_type: 'employee'
-        })
-
-        console.log('üíá Stylists response:', stylistsResponse)
-
-        if (customersResponse.success) setCustomers(customersResponse.data || [])
-        if (servicesResponse.success) setServices(servicesResponse.data || [])
-        if (stylistsResponse.success) setStylists(stylistsResponse.data || [])
-      } catch (error) {
-        console.error('Error loading data:', error)
-        toast({
-          title: 'Error',
-          description: 'Failed to load appointment data'
-        })
-      } finally {
-        setLoading(false)
-      }
-    }
-
-    loadData()
-  }, [organizationId])
-
   // Pre-select customer if customerId is provided in URL
   useEffect(() => {
     if (customerIdFromUrl && customers.length > 0) {
@@ -256,6 +302,11 @@ function NewAppointmentContent() {
     }
   }, [customerIdFromUrl, customers])
 
+  // Clear selected time when date changes (time slots will be regenerated)
+  useEffect(() => {
+    setSelectedTime('')
+  }, [selectedDate])
+
   // Cart operations
   const addToCart = (service: Service) => {
     const existingItem = cart.find(item => item.service.id === service.id)
@@ -263,13 +314,26 @@ function NewAppointmentContent() {
     if (existingItem) {
       updateQuantity(service.id, 1)
     } else {
+      // Extract price and duration from various possible locations
+      const price =
+        service.dynamic_fields?.price_market?.value ||
+        service.price_market ||
+        service.price_amount ||
+        0
+
+      const duration =
+        service.dynamic_fields?.duration_min?.value ||
+        service.duration_min ||
+        service.duration_minutes ||
+        30
+
       setCart([
         ...cart,
         {
           service,
           quantity: 1,
-          price: service.metadata?.price || 0,
-          duration: service.metadata?.duration_minutes || 30
+          price,
+          duration
         }
       ])
     }
@@ -291,6 +355,56 @@ function NewAppointmentContent() {
     setCart(cart.filter(item => item.service.id !== serviceId))
   }
 
+  // Create new customer
+  const handleCreateCustomer = async () => {
+    if (!newCustomerData.name.trim()) {
+      toast({
+        title: 'Error',
+        description: 'Customer name is required'
+      })
+      return
+    }
+
+    setCreatingCustomer(true)
+
+    try {
+      const result = await createCustomer({
+        name: newCustomerData.name,
+        phone: newCustomerData.phone || undefined,
+        email: newCustomerData.email || undefined
+      })
+
+      if (result) {
+        toast({
+          title: 'Success',
+          description: 'Customer created successfully'
+        })
+
+        // Auto-select the newly created customer
+        const newCustomer = customers.find(c => c.id === result.id) || {
+          id: result.id,
+          entity_name: newCustomerData.name,
+          entity_code: result.entity_code || '',
+          phone: newCustomerData.phone,
+          email: newCustomerData.email
+        }
+        setSelectedCustomer(newCustomer as Customer)
+
+        // Reset form and close modal
+        setNewCustomerData({ name: '', phone: '', email: '' })
+        setShowNewCustomerModal(false)
+      }
+    } catch (error) {
+      console.error('Error creating customer:', error)
+      toast({
+        title: 'Error',
+        description: error instanceof Error ? error.message : 'Failed to create customer'
+      })
+    } finally {
+      setCreatingCustomer(false)
+    }
+  }
+
   // Save appointment
   const handleSave = async () => {
     if (!organizationId) {
@@ -348,6 +462,8 @@ function NewAppointmentContent() {
 
       // Create draft appointment with branch info
       console.log('Creating appointment with branch:', branchId)
+      // ENTERPRISE PATTERN: Normalized data - store only IDs
+      // Customer/stylist names will be fetched separately via useHeraAppointments
       const { id: appointmentId } = await createDraftAppointment({
         organizationId,
         startAt,
@@ -372,15 +488,9 @@ function NewAppointmentContent() {
         }))
       })
 
-      toast({
-        title: 'Success',
-        description: 'Appointment created successfully'
-      })
-
-      // Delay redirect to allow toast to show
-      setTimeout(() => {
-        router.push('/salon/appointments')
-      }, 1000)
+      // Show success dialog instead of immediate redirect
+      setCreatedAppointmentId(appointmentId)
+      setShowSuccessDialog(true)
     } catch (error) {
       console.error('Error creating appointment:', error)
       toast({
@@ -480,6 +590,42 @@ function NewAppointmentContent() {
             <div className="text-center">
               <div className="animate-spin rounded-full h-12 w-12 border-4 border-[#D4AF37] border-t-transparent mx-auto mb-4"></div>
               <p className="text-[#F5E6C8]/60">Loading appointment data...</p>
+              <div className="mt-4 space-y-1 text-sm text-[#F5E6C8]/40">
+                {customersLoading && <p>‚Ä¢ Loading customers...</p>}
+                {servicesLoading && <p>‚Ä¢ Loading services...</p>}
+                {staffLoading && <p>‚Ä¢ Loading staff...</p>}
+              </div>
+            </div>
+          </div>
+        </div>
+      ) : (customersError || servicesError || staffError) ? (
+        <div className="container mx-auto px-6 py-12">
+          <div className="max-w-md mx-auto">
+            <div
+              className="p-6 rounded-xl text-center"
+              style={{
+                background: 'rgba(239, 68, 68, 0.1)',
+                border: '1px solid rgba(239, 68, 68, 0.3)'
+              }}
+            >
+              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-red-500/20 flex items-center justify-center">
+                <X className="w-8 h-8 text-red-400" />
+              </div>
+              <h3 className="text-lg font-semibold text-[#F5E6C8] mb-2">Failed to Load Data</h3>
+              <p className="text-sm text-[#F5E6C8]/60 mb-4">
+                {customersError && <span className="block">‚Ä¢ {customersError.message || 'Failed to load customers'}</span>}
+                {servicesError && <span className="block">‚Ä¢ {servicesError.message || 'Failed to load services'}</span>}
+                {staffError && <span className="block">‚Ä¢ {staffError.message || 'Failed to load staff'}</span>}
+              </p>
+              <Button
+                onClick={() => window.location.reload()}
+                style={{
+                  background: 'linear-gradient(135deg, #D4AF37 0%, #B8860B 100%)',
+                  color: '#0B0B0B'
+                }}
+              >
+                Retry
+              </Button>
             </div>
           </div>
         </div>
@@ -669,7 +815,9 @@ function NewAppointmentContent() {
                       <div>
                         <p className="font-medium text-[#F5E6C8]">{selectedCustomer.entity_name}</p>
                         <p className="text-sm text-[#F5E6C8]/60 mt-1">
-                          {selectedCustomer.metadata?.phone || 'No phone'}
+                          {selectedCustomer.phone ||
+                           selectedCustomer.dynamic_fields?.phone?.value ||
+                           'No phone'}
                         </p>
                       </div>
                       <Button
@@ -699,9 +847,34 @@ function NewAppointmentContent() {
                       />
                     </div>
 
+                    <Button
+                      onClick={() => setShowNewCustomerModal(true)}
+                      className="w-full mt-2 transition-all duration-240"
+                      style={{
+                        background:
+                          'linear-gradient(135deg, rgba(212,175,55,0.15) 0%, rgba(184,134,11,0.1) 100%)',
+                        border: '1px solid rgba(212,175,55,0.3)',
+                        color: '#D4AF37',
+                        transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                      }}
+                      onMouseEnter={e => {
+                        e.currentTarget.style.background =
+                          'linear-gradient(135deg, rgba(212,175,55,0.25) 0%, rgba(184,134,11,0.2) 100%)'
+                        e.currentTarget.style.transform = 'translateY(-1px)'
+                      }}
+                      onMouseLeave={e => {
+                        e.currentTarget.style.background =
+                          'linear-gradient(135deg, rgba(212,175,55,0.15) 0%, rgba(184,134,11,0.1) 100%)'
+                        e.currentTarget.style.transform = 'translateY(0)'
+                      }}
+                    >
+                      <Plus className="w-4 h-4 mr-2" />
+                      New Customer
+                    </Button>
+
                     {customerSearch && (
                       <ScrollArea
-                        className="h-32"
+                        className="h-32 mt-2"
                         style={{ '--scrollbar-color': 'rgba(212,175,55,0.3)' } as any}
                       >
                         {filteredCustomers.map(customer => (
@@ -725,7 +898,9 @@ function NewAppointmentContent() {
                           >
                             <p className="font-medium text-[#F5E6C8]">{customer.entity_name}</p>
                             <p className="text-sm text-[#F5E6C8]/50">
-                              {customer.metadata?.phone || 'No phone'}
+                              {customer.phone ||
+                               customer.dynamic_fields?.phone?.value ||
+                               'No phone'}
                             </p>
                           </div>
                         ))}
@@ -835,34 +1010,82 @@ function NewAppointmentContent() {
 
                   <div>
                     <Label className="text-[#F5E6C8]/70 text-sm">Time</Label>
-                    <Select value={selectedTime} onValueChange={setSelectedTime}>
-                      <SelectTrigger
+                    {timeSlots.length === 0 ? (
+                      <div
+                        className="p-3 rounded-lg text-sm text-center"
                         style={{
-                          background: 'rgba(0,0,0,0.3)',
-                          border: '1px solid rgba(245,230,200,0.15)',
-                          color: '#F5E6C8'
+                          background: 'rgba(212,175,55,0.1)',
+                          border: '1px solid rgba(212,175,55,0.2)',
+                          color: '#D4AF37'
                         }}
                       >
-                        <SelectValue placeholder="Select time" />
-                      </SelectTrigger>
-                      <SelectContent
-                        className="hera-select-content"
-                        style={{
-                          background: 'rgba(26,26,26,0.98)',
-                          border: '1px solid rgba(245,230,200,0.15)'
-                        }}
+                        <Clock className="w-4 h-4 mx-auto mb-1" />
+                        <p>No available time slots for this date</p>
+                        <p className="text-xs text-[#F5E6C8]/50 mt-1">
+                          Please select a future date
+                        </p>
+                      </div>
+                    ) : (
+                      <Select
+                        value={selectedTime}
+                        onValueChange={setSelectedTime}
+                        disabled={timeSlots.length === 0}
                       >
-                        {timeSlots.map(slot => (
-                          <SelectItem
-                            key={slot.start}
-                            value={slot.start}
-                            className="text-[#F5E6C8] hover:bg-[#D4AF37]/10"
-                          >
-                            {slot.start}
-                          </SelectItem>
-                        ))}
-                      </SelectContent>
-                    </Select>
+                        <SelectTrigger
+                          style={{
+                            background: 'rgba(0,0,0,0.3)',
+                            border: '1px solid rgba(245,230,200,0.15)',
+                            color: '#F5E6C8'
+                          }}
+                        >
+                          <SelectValue placeholder="Select time" />
+                        </SelectTrigger>
+                        <SelectContent
+                          className="hera-select-content"
+                          style={{
+                            background: 'rgba(26,26,26,0.98)',
+                            border: '1px solid rgba(245,230,200,0.15)'
+                          }}
+                        >
+                          {timeSlots.map(slot => {
+                            // Convert 24-hour to 12-hour format with AM/PM
+                            const [hours, minutes] = slot.start.split(':').map(Number)
+                            const period = hours >= 12 ? 'PM' : 'AM'
+                            const displayHours = hours % 12 || 12
+                            const displayTime = `${displayHours}:${minutes.toString().padStart(2, '0')} ${period}`
+
+                            return (
+                              <SelectItem
+                                key={slot.start}
+                                value={slot.start}
+                                className="text-[#F5E6C8] hover:bg-[#D4AF37]/10"
+                              >
+                                {displayTime}
+                              </SelectItem>
+                            )
+                          })}
+                        </SelectContent>
+                      </Select>
+                    )}
+                  </div>
+
+                  {/* Working hours info */}
+                  <div
+                    className="p-3 rounded-lg text-xs"
+                    style={{
+                      background: 'rgba(15,111,92,0.1)',
+                      border: '1px solid rgba(15,111,92,0.2)',
+                      color: 'rgba(245,230,200,0.7)'
+                    }}
+                  >
+                    <div className="flex items-center gap-2 mb-1">
+                      <Clock className="w-3 h-3 text-emerald-400" />
+                      <span className="font-medium text-emerald-400">Working Hours</span>
+                    </div>
+                    <p>Monday - Sunday: 9:00 AM - 9:00 PM</p>
+                    <p className="mt-1 text-[#F5E6C8]/50">
+                      Appointments are available in 30-minute slots
+                    </p>
                   </div>
 
                   <div>
@@ -950,11 +1173,25 @@ function NewAppointmentContent() {
                             <div className="flex items-center gap-3 text-sm text-[#F5E6C8]/50">
                               <span className="flex items-center gap-1">
                                 <Clock className="w-3 h-3 text-[#D4AF37]/50" />
-                                <span>{service.metadata?.duration_minutes || 30} min</span>
+                                <span>
+                                  {service.dynamic_fields?.duration_min?.value ||
+                                   service.duration_min ||
+                                   service.duration_minutes ||
+                                   30}{' '}
+                                  min
+                                </span>
                               </span>
                               <span className="flex items-center gap-1">
                                 <DollarSign className="w-3 h-3 text-[#D4AF37]/50" />
-                                <span>AED {service.metadata?.price || 0}</span>
+                                <span>
+                                  AED{' '}
+                                  {(
+                                    service.dynamic_fields?.price_market?.value ||
+                                    service.price_market ||
+                                    service.price_amount ||
+                                    0
+                                  ).toFixed(2)}
+                                </span>
                               </span>
                             </div>
                           </div>
@@ -1221,6 +1458,446 @@ function NewAppointmentContent() {
           </div>
         </div>
       )}
+
+      {/* New Customer Dialog - Enterprise Grade with Soft Animations */}
+      <Dialog open={showNewCustomerModal} onOpenChange={setShowNewCustomerModal}>
+        <DialogContent
+          className="sm:max-w-[500px] border-0 p-0 overflow-hidden"
+          style={{
+            background: 'linear-gradient(135deg, #1A1A1A 0%, #0F0F0F 100%)',
+            backdropFilter: 'blur(20px)',
+            boxShadow: '0 25px 50px rgba(0,0,0,0.8), 0 0 0 1px rgba(212,175,55,0.15)',
+            animation: 'slideUp 240ms cubic-bezier(0.22, 0.61, 0.36, 1)'
+          }}
+        >
+          {/* Header with gradient accent */}
+          <div
+            className="relative p-6 pb-4"
+            style={{
+              background:
+                'linear-gradient(135deg, rgba(212,175,55,0.08) 0%, rgba(184,134,11,0.05) 100%)',
+              borderBottom: '1px solid rgba(245,230,200,0.1)'
+            }}
+          >
+            <div
+              className="absolute top-0 left-0 right-0 h-px"
+              style={{
+                background:
+                  'linear-gradient(90deg, transparent, rgba(212,175,55,0.5), transparent)'
+              }}
+            ></div>
+            <DialogHeader>
+              <DialogTitle className="flex items-center gap-3 text-2xl">
+                <div
+                  className="w-11 h-11 rounded-xl flex items-center justify-center"
+                  style={{
+                    background: 'linear-gradient(135deg, #D4AF37 0%, #B8860B 100%)',
+                    boxShadow: '0 8px 20px rgba(212,175,55,0.3)'
+                  }}
+                >
+                  <User className="w-6 h-6 text-[#0B0B0B]" />
+                </div>
+                <span className="text-[#F5E6C8]">Add New Customer</span>
+              </DialogTitle>
+              <DialogDescription className="text-[#F5E6C8]/60 mt-2">
+                Create a new customer profile to book appointments
+              </DialogDescription>
+            </DialogHeader>
+          </div>
+
+          {/* Form content with soft animations */}
+          <div className="p-6 space-y-5">
+            <div className="space-y-2">
+              <Label className="text-[#F5E6C8]/80 text-sm font-medium">
+                Customer Name <span className="text-[#D4AF37]">*</span>
+              </Label>
+              <Input
+                placeholder="Enter full name..."
+                value={newCustomerData.name}
+                onChange={e => setNewCustomerData({ ...newCustomerData, name: e.target.value })}
+                className="transition-all duration-180"
+                style={{
+                  background: 'rgba(0,0,0,0.4)',
+                  border: '1px solid rgba(245,230,200,0.15)',
+                  color: '#F5E6C8',
+                  transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                }}
+                onFocus={e => {
+                  e.currentTarget.style.borderColor = 'rgba(212,175,55,0.5)'
+                  e.currentTarget.style.boxShadow = '0 0 0 3px rgba(212,175,55,0.1)'
+                }}
+                onBlur={e => {
+                  e.currentTarget.style.borderColor = 'rgba(245,230,200,0.15)'
+                  e.currentTarget.style.boxShadow = 'none'
+                }}
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label className="text-[#F5E6C8]/80 text-sm font-medium">
+                Phone Number (Optional)
+              </Label>
+              <Input
+                placeholder="Enter phone number..."
+                value={newCustomerData.phone}
+                onChange={e => setNewCustomerData({ ...newCustomerData, phone: e.target.value })}
+                className="transition-all duration-180"
+                style={{
+                  background: 'rgba(0,0,0,0.4)',
+                  border: '1px solid rgba(245,230,200,0.15)',
+                  color: '#F5E6C8',
+                  transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                }}
+                onFocus={e => {
+                  e.currentTarget.style.borderColor = 'rgba(212,175,55,0.5)'
+                  e.currentTarget.style.boxShadow = '0 0 0 3px rgba(212,175,55,0.1)'
+                }}
+                onBlur={e => {
+                  e.currentTarget.style.borderColor = 'rgba(245,230,200,0.15)'
+                  e.currentTarget.style.boxShadow = 'none'
+                }}
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label className="text-[#F5E6C8]/80 text-sm font-medium">Email (Optional)</Label>
+              <Input
+                type="email"
+                placeholder="Enter email address..."
+                value={newCustomerData.email}
+                onChange={e => setNewCustomerData({ ...newCustomerData, email: e.target.value })}
+                className="transition-all duration-180"
+                style={{
+                  background: 'rgba(0,0,0,0.4)',
+                  border: '1px solid rgba(245,230,200,0.15)',
+                  color: '#F5E6C8',
+                  transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                }}
+                onFocus={e => {
+                  e.currentTarget.style.borderColor = 'rgba(212,175,55,0.5)'
+                  e.currentTarget.style.boxShadow = '0 0 0 3px rgba(212,175,55,0.1)'
+                }}
+                onBlur={e => {
+                  e.currentTarget.style.borderColor = 'rgba(245,230,200,0.15)'
+                  e.currentTarget.style.boxShadow = 'none'
+                }}
+              />
+            </div>
+
+            {/* Action buttons with enterprise hover effects */}
+            <div className="flex gap-3 pt-4">
+              <Button
+                onClick={() => {
+                  setShowNewCustomerModal(false)
+                  setNewCustomerData({ name: '', phone: '', email: '' })
+                }}
+                disabled={creatingCustomer}
+                className="flex-1 transition-all duration-240"
+                style={{
+                  background: 'rgba(0,0,0,0.3)',
+                  border: '1px solid rgba(245,230,200,0.2)',
+                  color: '#F5E6C8',
+                  transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                }}
+                onMouseEnter={e => {
+                  e.currentTarget.style.background = 'rgba(245,230,200,0.1)'
+                  e.currentTarget.style.borderColor = 'rgba(245,230,200,0.3)'
+                }}
+                onMouseLeave={e => {
+                  e.currentTarget.style.background = 'rgba(0,0,0,0.3)'
+                  e.currentTarget.style.borderColor = 'rgba(245,230,200,0.2)'
+                }}
+              >
+                <X className="w-4 h-4 mr-2" />
+                Cancel
+              </Button>
+
+              <Button
+                onClick={handleCreateCustomer}
+                disabled={creatingCustomer || !newCustomerData.name}
+                className="flex-1 transition-all duration-240"
+                style={{
+                  background: 'linear-gradient(135deg, #D4AF37 0%, #B8860B 100%)',
+                  color: '#0B0B0B',
+                  fontWeight: '600',
+                  border: 'none',
+                  boxShadow: '0 8px 24px rgba(212,175,55,0.3)',
+                  transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                }}
+                onMouseEnter={e => {
+                  if (!creatingCustomer && newCustomerData.name) {
+                    e.currentTarget.style.transform = 'translateY(-1px)'
+                    e.currentTarget.style.boxShadow = '0 12px 32px rgba(212,175,55,0.4)'
+                  }
+                }}
+                onMouseLeave={e => {
+                  e.currentTarget.style.transform = 'translateY(0)'
+                  e.currentTarget.style.boxShadow = '0 8px 24px rgba(212,175,55,0.3)'
+                }}
+              >
+                {creatingCustomer ? (
+                  <>
+                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-[#0B0B0B] mr-2"></div>
+                    Creating...
+                  </>
+                ) : (
+                  <>
+                    <Check className="w-4 h-4 mr-2" />
+                    Create Customer
+                  </>
+                )}
+              </Button>
+            </div>
+
+            {/* Helper text */}
+            <p
+              className="text-xs text-center pt-2"
+              style={{ color: 'rgba(245,230,200,0.5)' }}
+            >
+              <span className="text-[#D4AF37]">*</span> Name is required ¬∑ Phone and Email are optional
+            </p>
+          </div>
+        </DialogContent>
+      </Dialog>
+
+      {/* Success Confirmation Dialog - Enterprise Grade */}
+      <Dialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>
+        <DialogContent
+          className="sm:max-w-[550px] border-0 p-0 overflow-y-auto max-h-[90vh]"
+          style={{
+            background: 'linear-gradient(135deg, #0F0F0F 0%, #1A1A1A 100%)',
+            backdropFilter: 'blur(20px)',
+            boxShadow: '0 25px 50px rgba(0,0,0,0.8), 0 0 0 1px rgba(212,175,55,0.2)',
+            animation: 'slideUp 300ms cubic-bezier(0.22, 0.61, 0.36, 1)'
+          }}
+        >
+          {/* Success Header with Golden Glow */}
+          <div
+            className="relative p-8 pb-6 text-center"
+            style={{
+              background:
+                'linear-gradient(135deg, rgba(212,175,55,0.15) 0%, rgba(184,134,11,0.08) 100%)',
+              borderBottom: '1px solid rgba(245,230,200,0.15)'
+            }}
+          >
+            <div
+              className="absolute top-0 left-0 right-0 h-px"
+              style={{
+                background:
+                  'linear-gradient(90deg, transparent, rgba(212,175,55,0.6), transparent)'
+              }}
+            ></div>
+
+            {/* Success Icon with Animation */}
+            <div className="mb-4 relative">
+              <div
+                className="w-20 h-20 mx-auto rounded-full flex items-center justify-center relative"
+                style={{
+                  background: 'linear-gradient(135deg, #D4AF37 0%, #B8860B 100%)',
+                  boxShadow:
+                    '0 10px 40px rgba(212,175,55,0.4), 0 0 0 8px rgba(212,175,55,0.1), 0 0 0 16px rgba(212,175,55,0.05)',
+                  animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite'
+                }}
+              >
+                <Check className="w-10 h-10 text-[#0B0B0B]" strokeWidth={3} />
+                <div
+                  className="absolute inset-0 rounded-full"
+                  style={{
+                    background:
+                      'radial-gradient(circle at 30% 30%, rgba(255,255,255,0.3) 0%, transparent 60%)'
+                  }}
+                ></div>
+              </div>
+            </div>
+
+            <DialogHeader>
+              <DialogTitle className="text-3xl font-bold text-center mb-2">
+                <span
+                  style={{
+                    background:
+                      'linear-gradient(135deg, #F5E6C8 0%, #D4AF37 100%)',
+                    WebkitBackgroundClip: 'text',
+                    WebkitTextFillColor: 'transparent',
+                    backgroundClip: 'text'
+                  }}
+                >
+                  Appointment Confirmed!
+                </span>
+              </DialogTitle>
+              <DialogDescription className="text-[#F5E6C8]/70 text-base">
+                Your appointment has been successfully scheduled
+              </DialogDescription>
+            </DialogHeader>
+          </div>
+
+          {/* Appointment Details */}
+          <div className="p-8 space-y-4">
+            {/* Customer & Stylist Info */}
+            <div className="grid grid-cols-2 gap-4">
+              <div
+                className="p-4 rounded-lg"
+                style={{
+                  background: 'rgba(212,175,55,0.08)',
+                  border: '1px solid rgba(212,175,55,0.2)'
+                }}
+              >
+                <div className="flex items-center gap-2 mb-2">
+                  <User className="w-4 h-4 text-[#D4AF37]" />
+                  <span className="text-xs text-[#F5E6C8]/60 font-medium">Customer</span>
+                </div>
+                <p className="text-[#F5E6C8] font-semibold">
+                  {selectedCustomer?.entity_name}
+                </p>
+              </div>
+
+              <div
+                className="p-4 rounded-lg"
+                style={{
+                  background: 'rgba(184,134,11,0.08)',
+                  border: '1px solid rgba(184,134,11,0.2)'
+                }}
+              >
+                <div className="flex items-center gap-2 mb-2">
+                  <Scissors className="w-4 h-4 text-[#B8860B]" />
+                  <span className="text-xs text-[#F5E6C8]/60 font-medium">Stylist</span>
+                </div>
+                <p className="text-[#F5E6C8] font-semibold">
+                  {selectedStylist?.entity_name}
+                </p>
+              </div>
+            </div>
+
+            {/* Date & Time */}
+            <div
+              className="p-4 rounded-lg"
+              style={{
+                background: 'rgba(212,175,55,0.08)',
+                border: '1px solid rgba(212,175,55,0.2)'
+              }}
+            >
+              <div className="flex items-center justify-between">
+                <div className="flex items-center gap-3">
+                  <div
+                    className="w-10 h-10 rounded-lg flex items-center justify-center"
+                    style={{
+                      background: 'linear-gradient(135deg, #D4AF37 0%, #B8860B 100%)'
+                    }}
+                  >
+                    <Calendar className="w-5 h-5 text-[#0B0B0B]" />
+                  </div>
+                  <div>
+                    {selectedDate && selectedTime ? (
+                      <>
+                        <p className="text-[#F5E6C8] font-semibold">
+                          {format(new Date(`${selectedDate}T${selectedTime}`), 'EEEE, MMMM d, yyyy')}
+                        </p>
+                        <p className="text-sm text-[#F5E6C8]/60">
+                          {format(new Date(`${selectedDate}T${selectedTime}`), 'h:mm a')} ‚Ä¢{' '}
+                          {totalDuration} minutes
+                        </p>
+                      </>
+                    ) : (
+                      <p className="text-[#F5E6C8]/60">Date/time not available</p>
+                    )}
+                  </div>
+                </div>
+              </div>
+            </div>
+
+            {/* Services Summary */}
+            <div
+              className="p-4 rounded-lg"
+              style={{
+                background: 'rgba(15,111,92,0.1)',
+                border: '1px solid rgba(15,111,92,0.2)'
+              }}
+            >
+              <div className="flex items-center justify-between mb-3">
+                <span className="text-sm text-[#F5E6C8]/70 font-medium">
+                  {cart.length} Service{cart.length !== 1 ? 's' : ''}
+                </span>
+                <span className="text-xl font-bold text-[#D4AF37]">
+                  AED {totalAmount.toFixed(2)}
+                </span>
+              </div>
+              <div className="space-y-2">
+                {cart.slice(0, 3).map((item, idx) => (
+                  <div key={idx} className="flex items-center justify-between text-sm">
+                    <span className="text-[#F5E6C8]/80">
+                      {item.quantity}x {item.service.entity_name}
+                    </span>
+                    <span className="text-[#F5E6C8]/60">
+                      AED {(item.price * item.quantity).toFixed(2)}
+                    </span>
+                  </div>
+                ))}
+                {cart.length > 3 && (
+                  <p className="text-xs text-[#F5E6C8]/50 text-center pt-2">
+                    +{cart.length - 3} more service{cart.length - 3 !== 1 ? 's' : ''}
+                  </p>
+                )}
+              </div>
+            </div>
+
+            {/* Action Buttons */}
+            <div className="flex gap-3 pt-4">
+              <Button
+                onClick={() => router.push('/salon/appointments')}
+                className="flex-1 transition-all duration-240"
+                style={{
+                  background: 'rgba(245,230,200,0.1)',
+                  border: '1px solid rgba(245,230,200,0.2)',
+                  color: '#F5E6C8',
+                  transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                }}
+                onMouseEnter={e => {
+                  e.currentTarget.style.background = 'rgba(245,230,200,0.15)'
+                  e.currentTarget.style.borderColor = 'rgba(245,230,200,0.3)'
+                }}
+                onMouseLeave={e => {
+                  e.currentTarget.style.background = 'rgba(245,230,200,0.1)'
+                  e.currentTarget.style.borderColor = 'rgba(245,230,200,0.2)'
+                }}
+              >
+                View All Appointments
+              </Button>
+
+              <Button
+                onClick={() => {
+                  setShowSuccessDialog(false)
+                  // Reset form for new appointment
+                  setSelectedCustomer(null)
+                  setSelectedStylist(null)
+                  setSelectedTime('')
+                  setCart([])
+                  setNotes('')
+                  setSelectedDate(format(new Date(), 'yyyy-MM-dd'))
+                }}
+                className="flex-1 transition-all duration-240"
+                style={{
+                  background: 'linear-gradient(135deg, #D4AF37 0%, #B8860B 100%)',
+                  color: '#0B0B0B',
+                  fontWeight: '600',
+                  border: 'none',
+                  boxShadow: '0 8px 24px rgba(212,175,55,0.3)',
+                  transitionTimingFunction: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
+                }}
+                onMouseEnter={e => {
+                  e.currentTarget.style.transform = 'translateY(-1px)'
+                  e.currentTarget.style.boxShadow = '0 12px 32px rgba(212,175,55,0.4)'
+                }}
+                onMouseLeave={e => {
+                  e.currentTarget.style.transform = 'translateY(0)'
+                  e.currentTarget.style.boxShadow = '0 8px 24px rgba(212,175,55,0.3)'
+                }}
+              >
+                <Plus className="w-4 h-4 mr-2" />
+                Book Another
+              </Button>
+            </div>
+          </div>
+        </DialogContent>
+      </Dialog>
     </div>
   )
 }
diff --git a/src/app/salon/appointments/page.tsx b/src/app/salon/appointments/page.tsx
index c4b066c6..d16cdfa4 100644
--- a/src/app/salon/appointments/page.tsx
+++ b/src/app/salon/appointments/page.tsx
@@ -7,12 +7,10 @@ import { useRouter } from 'next/navigation'
 import { useSecuredSalonContext } from '../SecuredSalonProvider'
 import {
   useHeraAppointments,
-  type Appointment,
-  type AppointmentFormValues
+  type Appointment
 } from '@/hooks/useHeraAppointments'
 import { useBranchFilter } from '@/hooks/useBranchFilter'
 import { StatusToastProvider, useSalonToast } from '@/components/salon/ui/StatusToastProvider'
-import { AppointmentModal } from '@/components/salon/appointments/AppointmentModal'
 import {
   Plus,
   Clock,
@@ -24,7 +22,9 @@ import {
   Trash2,
   Building2,
   Archive,
-  DollarSign
+  DollarSign,
+  User,
+  Sparkles
 } from 'lucide-react'
 import { Button } from '@/components/ui/button'
 import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
@@ -47,19 +47,19 @@ import {
 } from '@/components/ui/select'
 import { format } from 'date-fns'
 
-// Luxe color palette
-const COLORS = {
+// Salon Luxe Theme - Enterprise Grade
+const LUXE_COLORS = {
   black: '#0B0B0B',
   charcoal: '#1A1A1A',
+  charcoalDark: '#0F0F0F',
+  charcoalLight: '#232323',
   gold: '#D4AF37',
   goldDark: '#B8860B',
   champagne: '#F5E6C8',
   bronze: '#8C7853',
-  lightText: '#E0E0E0',
-  charcoalDark: '#0F0F0F',
-  charcoalLight: '#232323',
   emerald: '#0F6F5C',
-  rose: '#E8B4B8'
+  rose: '#E8B4B8',
+  softTransition: 'cubic-bezier(0.22, 0.61, 0.36, 1)'
 }
 
 interface AppointmentStats {
@@ -76,30 +76,24 @@ function AppointmentsContent() {
 
   // State declarations
   const [searchTerm, setSearchTerm] = useState('')
-  const [appointmentModalOpen, setAppointmentModalOpen] = useState(false)
-  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | undefined>()
   const [showArchivedAppointments, setShowArchivedAppointments] = useState(false)
   const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false)
   const [appointmentToDelete, setAppointmentToDelete] = useState<Appointment | null>(null)
   const [statusFilter, setStatusFilter] = useState<string>('all')
   const [dateFilter, setDateFilter] = useState<string>('all')
 
-  // Use the new useHeraAppointments hook
+  // Use the universal entity hook for appointments
   const {
     appointments,
     isLoading,
-    createAppointment,
-    updateAppointment,
     archiveAppointment,
     deleteAppointment,
     restoreAppointment,
-    isCreating,
-    isUpdating,
     isDeleting
   } = useHeraAppointments({
     organizationId: organizationId || '',
     includeArchived: showArchivedAppointments,
-    userRole: 'manager' // TODO: Get from auth context
+    userRole: 'manager'
   })
 
   // Branch filter hook
@@ -128,75 +122,6 @@ function AppointmentsContent() {
     completedAppointments: appointments?.filter(a => a.status === 'completed').length || 0
   }
 
-  // Appointment modal handlers
-  const handleOpenAppointmentModal = (appointment?: Appointment) => {
-    setSelectedAppointment(appointment)
-    setAppointmentModalOpen(true)
-  }
-
-  const handleCloseAppointmentModal = () => {
-    setSelectedAppointment(undefined)
-    setAppointmentModalOpen(false)
-  }
-
-  const handleSaveAppointment = async (appointmentData: AppointmentFormValues) => {
-    if (!organizationId) return
-
-    try {
-      if (selectedAppointment) {
-        // Update existing appointment
-        await updateAppointment(selectedAppointment.id, appointmentData)
-        showSuccess('Appointment updated', 'Successfully updated appointment')
-      } else {
-        // Create new appointment
-        await createAppointment(appointmentData)
-        showSuccess('Appointment created', 'Successfully created new appointment')
-      }
-      handleCloseAppointmentModal()
-    } catch (error) {
-      console.error('Error saving appointment:', error)
-      showError(
-        'Failed to save appointment',
-        error instanceof Error ? error.message : 'Please try again'
-      )
-      throw error
-    }
-  }
-
-  const handleArchiveAppointment = async (appointmentId: string) => {
-    if (!organizationId) return
-
-    try {
-      await archiveAppointment(appointmentId)
-      showSuccess('Appointment archived', 'Successfully archived appointment')
-      handleCloseAppointmentModal()
-    } catch (error) {
-      console.error('Error archiving appointment:', error)
-      showError(
-        'Failed to archive appointment',
-        error instanceof Error ? error.message : 'Please try again'
-      )
-      throw error
-    }
-  }
-
-  const handleDeleteAppointment = async (appointmentId: string) => {
-    if (!organizationId) return
-
-    try {
-      await deleteAppointment(appointmentId, true)
-      showSuccess('Appointment deleted', 'Successfully deleted appointment permanently')
-      handleCloseAppointmentModal()
-    } catch (error) {
-      console.error('Error deleting appointment:', error)
-      showError(
-        'Failed to delete appointment',
-        error instanceof Error ? error.message : 'Please try again'
-      )
-      throw error
-    }
-  }
-
   const handleConfirmDeleteAppointment = async () => {
     if (!appointmentToDelete) return
 
@@ -269,71 +194,98 @@ function AppointmentsContent() {
     return (
       <div
         className="min-h-screen flex items-center justify-center"
-        style={{ backgroundColor: COLORS.black }}
+        style={{ backgroundColor: LUXE_COLORS.black }}
       >
         <div
-          className="text-center p-8 rounded-xl"
+          className="text-center p-8 rounded-xl backdrop-blur-xl"
           style={{
-            backgroundColor: COLORS.charcoal,
-            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.3)'
+            background: 'linear-gradient(135deg, rgba(26,26,26,0.95) 0%, rgba(15,15,15,0.95) 100%)',
+            border: `1px solid ${LUXE_COLORS.gold}20`,
+            boxShadow: '0 25px 50px rgba(0,0,0,0.5)'
           }}
         >
-          <h2 className="text-xl font-medium mb-2" style={{ color: COLORS.champagne }}>
+          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" style={{ color: LUXE_COLORS.gold }} />
+          <h2 className="text-xl font-medium mb-2" style={{ color: LUXE_COLORS.champagne }}>
             Loading...
           </h2>
-          <p style={{ color: COLORS.lightText, opacity: 0.7 }}>Setting up appointments.</p>
+          <p style={{ color: LUXE_COLORS.bronze }}>Setting up appointments.</p>
         </div>
       </div>
     )
   }
 
   return (
-    <div className="min-h-screen p-6" style={{ backgroundColor: COLORS.black }}>
+    <div className="min-h-screen p-6" style={{ backgroundColor: LUXE_COLORS.black }}>
+      {/* Main Container with Glassmorphism */}
       <div
-        className="rounded-2xl p-8"
+        className="rounded-2xl p-8 backdrop-blur-xl"
         style={{
-          backgroundColor: COLORS.charcoal,
-          border: `1px solid ${COLORS.gold}20`,
-          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.4)'
+          background: 'linear-gradient(135deg, rgba(26,26,26,0.95) 0%, rgba(15,15,15,0.95) 100%)',
+          border: `1px solid ${LUXE_COLORS.gold}15`,
+          boxShadow: '0 25px 50px rgba(0,0,0,0.5), 0 0 0 1px rgba(212,175,55,0.1)'
         }}
       >
-        {/* Header */}
-        <div className="flex justify-between items-center mb-6">
+        {/* Header with Gradient Title */}
+        <div className="flex justify-between items-center mb-8">
           <div>
             <h1
-              className="text-3xl font-bold mb-2"
+              className="text-4xl font-bold mb-2"
               style={{
-                background: `linear-gradient(135deg, ${COLORS.champagne} 0%, ${COLORS.gold} 100%)`,
+                background: `linear-gradient(135deg, ${LUXE_COLORS.champagne} 0%, ${LUXE_COLORS.gold} 100%)`,
                 WebkitBackgroundClip: 'text',
                 WebkitTextFillColor: 'transparent',
-                backgroundClip: 'text'
+                backgroundClip: 'text',
+                letterSpacing: '-0.02em'
               }}
             >
               Appointments
             </h1>
-            <p style={{ color: COLORS.bronze }}>Manage salon appointments and bookings</p>
+            <p className="text-sm" style={{ color: LUXE_COLORS.bronze }}>
+              Manage salon appointments and bookings with elegance
+            </p>
           </div>
           <div className="flex gap-3">
             <Button
               onClick={() => router.push('/salon/appointments/calendar')}
+              className="transition-all duration-240"
               style={{
-                background: `linear-gradient(135deg, ${COLORS.emerald} 0%, ${COLORS.emerald}DD 100%)`,
-                color: COLORS.champagne,
-                border: 'none'
+                background: `linear-gradient(135deg, ${LUXE_COLORS.emerald} 0%, ${LUXE_COLORS.emerald}DD 100%)`,
+                color: LUXE_COLORS.champagne,
+                border: 'none',
+                boxShadow: '0 4px 12px rgba(15,111,92,0.2)',
+                transitionTimingFunction: LUXE_COLORS.softTransition
+              }}
+              onMouseEnter={e => {
+                e.currentTarget.style.transform = 'translateY(-2px)'
+                e.currentTarget.style.boxShadow = '0 8px 20px rgba(15,111,92,0.3)'
+              }}
+              onMouseLeave={e => {
+                e.currentTarget.style.transform = 'translateY(0)'
+                e.currentTarget.style.boxShadow = '0 4px 12px rgba(15,111,92,0.2)'
               }}
-              className="hover:opacity-90"
             >
               <Calendar className="w-4 h-4 mr-2" />
               Calendar View
             </Button>
             <Button
-              onClick={() => handleOpenAppointmentModal()}
+              onClick={() => router.push('/salon/appointments/new')}
+              className="transition-all duration-240"
               style={{
-                background: `linear-gradient(135deg, ${COLORS.gold} 0%, ${COLORS.goldDark} 100%)`,
-                color: COLORS.black,
-                border: 'none'
+                background: `linear-gradient(135deg, ${LUXE_COLORS.gold} 0%, ${LUXE_COLORS.goldDark} 100%)`,
+                color: LUXE_COLORS.black,
+                border: 'none',
+                fontWeight: '600',
+                boxShadow: '0 4px 12px rgba(212,175,55,0.3)',
+                transitionTimingFunction: LUXE_COLORS.softTransition
+              }}
+              onMouseEnter={e => {
+                e.currentTarget.style.transform = 'translateY(-2px)'
+                e.currentTarget.style.boxShadow = '0 8px 20px rgba(212,175,55,0.4)'
+              }}
+              onMouseLeave={e => {
+                e.currentTarget.style.transform = 'translateY(0)'
+                e.currentTarget.style.boxShadow = '0 4px 12px rgba(212,175,55,0.3)'
               }}
-              className="hover:opacity-90"
             >
               <Plus className="w-4 h-4 mr-2" />
               New Appointment
@@ -341,7 +293,7 @@ function AppointmentsContent() {
           </div>
         </div>
 
-        {/* Stats Cards */}
+        {/* Stats Cards with Soft Animations */}
         <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
           {[
             {
@@ -349,121 +301,151 @@ function AppointmentsContent() {
               value: stats.totalAppointments,
               desc: 'All time',
               icon: CalendarDays,
-              color: COLORS.emerald
+              color: LUXE_COLORS.emerald,
+              gradient: 'linear-gradient(135deg, rgba(15,111,92,0.15) 0%, rgba(15,111,92,0.05) 100%)'
             },
             {
               title: 'Today',
               value: stats.todayAppointments,
               desc: 'Scheduled today',
               icon: Clock,
-              color: COLORS.gold
+              color: LUXE_COLORS.gold,
+              gradient: 'linear-gradient(135deg, rgba(212,175,55,0.15) 0%, rgba(212,175,55,0.05) 100%)'
             },
             {
               title: 'Upcoming',
               value: stats.upcomingAppointments,
               desc: 'Future bookings',
               icon: Calendar,
-              color: COLORS.bronze
+              color: LUXE_COLORS.bronze,
+              gradient: 'linear-gradient(135deg, rgba(140,120,83,0.15) 0%, rgba(140,120,83,0.05) 100%)'
             },
             {
               title: 'Completed',
               value: stats.completedAppointments,
               desc: 'Finished',
               icon: CheckCircle,
-              color: COLORS.champagne
+              color: LUXE_COLORS.champagne,
+              gradient: 'linear-gradient(135deg, rgba(245,230,200,0.15) 0%, rgba(245,230,200,0.05) 100%)'
             }
           ].map((stat, index) => (
-            <Card
+            <div
               key={index}
+              className="rounded-xl p-6 transition-all duration-240 cursor-pointer"
               style={{
-                backgroundColor: COLORS.charcoalLight,
-                border: `1px solid ${COLORS.gold}20`,
-                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.2)'
+                background: stat.gradient,
+                border: `1px solid ${stat.color}20`,
+                boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
+                transitionTimingFunction: LUXE_COLORS.softTransition
+              }}
+              onMouseEnter={e => {
+                e.currentTarget.style.transform = 'translateY(-4px)'
+                e.currentTarget.style.boxShadow = '0 12px 24px rgba(0,0,0,0.2)'
+                e.currentTarget.style.borderColor = `${stat.color}40`
+              }}
+              onMouseLeave={e => {
+                e.currentTarget.style.transform = 'translateY(0)'
+                e.currentTarget.style.boxShadow = '0 4px 6px rgba(0,0,0,0.1)'
+                e.currentTarget.style.borderColor = `${stat.color}20`
               }}
             >
-              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
-                <CardTitle className="text-sm font-medium" style={{ color: COLORS.bronze }}>
+              <div className="flex items-center justify-between mb-3">
+                <p className="text-sm font-medium" style={{ color: LUXE_COLORS.bronze }}>
                   {stat.title}
-                </CardTitle>
-                <stat.icon className="h-4 w-4" style={{ color: stat.color }} />
-              </CardHeader>
-              <CardContent>
-                <div className="text-2xl font-bold" style={{ color: COLORS.champagne }}>
-                  {stat.value}
-                </div>
-                <p className="text-xs" style={{ color: COLORS.bronze }}>
-                  {stat.desc}
                 </p>
-              </CardContent>
-            </Card>
+                <stat.icon className="w-5 h-5" style={{ color: stat.color }} />
+              </div>
+              <div className="text-3xl font-bold mb-1" style={{ color: LUXE_COLORS.champagne }}>
+                {stat.value}
+              </div>
+              <p className="text-xs" style={{ color: LUXE_COLORS.bronze, opacity: 0.7 }}>
+                {stat.desc}
+              </p>
+            </div>
           ))}
         </div>
 
-        {/* Search and Filters */}
-        <div className="mb-6 space-y-4">
-          <div className="flex items-center gap-4">
-            <div className="relative flex-1 max-w-md">
+        {/* Search and Filters with Enhanced Styling */}
+        <div className="mb-8 space-y-4">
+          <div className="flex items-center gap-4 flex-wrap">
+            {/* Search Input */}
+            <div className="relative flex-1 min-w-[300px]">
               <Search
-                className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4"
-                style={{ color: COLORS.bronze }}
+                className="absolute left-4 top-1/2 transform -translate-y-1/2 h-4 w-4"
+                style={{ color: LUXE_COLORS.bronze }}
               />
               <Input
                 placeholder="Search by customer, stylist..."
                 value={searchTerm}
                 onChange={e => setSearchTerm(e.target.value)}
-                className="pl-10 border-0 outline-none"
+                className="pl-12 pr-4 py-6 border-0 outline-none transition-all duration-180"
                 style={{
-                  backgroundColor: COLORS.charcoalLight,
-                  border: `1px solid ${COLORS.gold}30`,
-                  color: COLORS.champagne,
-                  borderRadius: '0.375rem'
+                  background: 'rgba(245,230,200,0.05)',
+                  border: `1px solid ${LUXE_COLORS.gold}20`,
+                  color: LUXE_COLORS.champagne,
+                  borderRadius: '0.75rem',
+                  transitionTimingFunction: LUXE_COLORS.softTransition
+                }}
+                onFocus={e => {
+                  e.currentTarget.style.borderColor = `${LUXE_COLORS.gold}40`
+                  e.currentTarget.style.background = 'rgba(245,230,200,0.08)'
+                }}
+                onBlur={e => {
+                  e.currentTarget.style.borderColor = `${LUXE_COLORS.gold}20`
+                  e.currentTarget.style.background = 'rgba(245,230,200,0.05)'
                 }}
               />
             </div>
 
-            <div className="w-64">
-              <Select
-                value={branchId || '__ALL__'}
-                onValueChange={value => setBranchId(value === '__ALL__' ? '' : value)}
-              >
-                <SelectTrigger
-                  className="border-0 outline-none"
-                  style={{
-                    backgroundColor: COLORS.charcoalLight,
-                    border: `1px solid ${COLORS.gold}30`,
-                    color: COLORS.champagne
-                  }}
+            {/* Branch Filter */}
+            {hasMultipleBranches && (
+              <div className="w-64">
+                <Select
+                  value={branchId || '__ALL__'}
+                  onValueChange={value => setBranchId(value === '__ALL__' ? '' : value)}
                 >
-                  <div className="flex items-center gap-2">
-                    <Building2 className="h-4 w-4" style={{ color: COLORS.bronze }} />
-                    <SelectValue placeholder="All locations" />
-                  </div>
-                </SelectTrigger>
-                <SelectContent>
-                  <SelectItem value="__ALL__">All locations</SelectItem>
-                  {branchesLoading ? (
-                    <SelectItem value="__LOADING__" disabled>
-                      Loading...
-                    </SelectItem>
-                  ) : (
-                    branches.map(branch => (
-                      <SelectItem key={branch.id} value={branch.id}>
-                        {branch.name || 'Unnamed Branch'}
+                  <SelectTrigger
+                    className="border-0 outline-none py-6"
+                    style={{
+                      background: 'rgba(245,230,200,0.05)',
+                      border: `1px solid ${LUXE_COLORS.gold}20`,
+                      color: LUXE_COLORS.champagne,
+                      borderRadius: '0.75rem'
+                    }}
+                  >
+                    <div className="flex items-center gap-2">
+                      <Building2 className="h-4 w-4" style={{ color: LUXE_COLORS.bronze }} />
+                      <SelectValue placeholder="All locations" />
+                    </div>
+                  </SelectTrigger>
+                  <SelectContent>
+                    <SelectItem value="__ALL__">All locations</SelectItem>
+                    {branchesLoading ? (
+                      <SelectItem value="__LOADING__" disabled>
+                        Loading...
                       </SelectItem>
-                    ))
-                  )}
-                </SelectContent>
-              </Select>
-            </div>
+                    ) : (
+                      branches.map(branch => (
+                        <SelectItem key={branch.id} value={branch.id}>
+                          {branch.name || 'Unnamed Branch'}
+                        </SelectItem>
+                      ))
+                    )}
+                  </SelectContent>
+                </Select>
+              </div>
+            )}
 
+            {/* Status Filter */}
             <div className="w-48">
               <Select value={statusFilter} onValueChange={setStatusFilter}>
                 <SelectTrigger
-                  className="border-0 outline-none"
+                  className="border-0 outline-none py-6"
                   style={{
-                    backgroundColor: COLORS.charcoalLight,
-                    border: `1px solid ${COLORS.gold}30`,
-                    color: COLORS.champagne
+                    background: 'rgba(245,230,200,0.05)',
+                    border: `1px solid ${LUXE_COLORS.gold}20`,
+                    color: LUXE_COLORS.champagne,
+                    borderRadius: '0.75rem'
                   }}
                 >
                   <SelectValue placeholder="All statuses" />
@@ -474,19 +456,20 @@ function AppointmentsContent() {
                   <SelectItem value="checked_in">Checked In</SelectItem>
                   <SelectItem value="completed">Completed</SelectItem>
                   <SelectItem value="cancelled">Cancelled</SelectItem>
-                  <SelectItem value="no_show">No Show</SelectItem>
                 </SelectContent>
               </Select>
             </div>
 
+            {/* Date Filter */}
             <div className="w-48">
               <Select value={dateFilter} onValueChange={setDateFilter}>
                 <SelectTrigger
-                  className="border-0 outline-none"
+                  className="border-0 outline-none py-6"
                   style={{
-                    backgroundColor: COLORS.charcoalLight,
-                    border: `1px solid ${COLORS.gold}30`,
-                    color: COLORS.champagne
+                    background: 'rgba(245,230,200,0.05)',
+                    border: `1px solid ${LUXE_COLORS.gold}20`,
+                    color: LUXE_COLORS.champagne,
+                    borderRadius: '0.75rem'
                   }}
                 >
                   <SelectValue placeholder="All dates" />
@@ -500,15 +483,19 @@ function AppointmentsContent() {
               </Select>
             </div>
 
+            {/* Archived Toggle */}
             <Button
-              variant={showArchivedAppointments ? 'default' : 'outline'}
               onClick={() => setShowArchivedAppointments(!showArchivedAppointments)}
+              className="whitespace-nowrap transition-all duration-240"
               style={{
-                backgroundColor: showArchivedAppointments ? COLORS.gold : 'transparent',
-                color: showArchivedAppointments ? COLORS.black : COLORS.champagne,
-                borderColor: COLORS.gold
+                background: showArchivedAppointments
+                  ? `linear-gradient(135deg, ${LUXE_COLORS.gold} 0%, ${LUXE_COLORS.goldDark} 100%)`
+                  : 'rgba(245,230,200,0.05)',
+                color: showArchivedAppointments ? LUXE_COLORS.black : LUXE_COLORS.champagne,
+                border: `1px solid ${LUXE_COLORS.gold}${showArchivedAppointments ? '' : '30'}`,
+                fontWeight: showArchivedAppointments ? '600' : '400',
+                transitionTimingFunction: LUXE_COLORS.softTransition
               }}
-              className="whitespace-nowrap"
             >
               <Archive className="h-4 w-4 mr-2" />
               {showArchivedAppointments ? 'Hide Archived' : 'Show Archived'}
@@ -516,16 +503,50 @@ function AppointmentsContent() {
           </div>
         </div>
 
-        {/* Appointments List */}
+        {/* Appointments List with Enhanced Cards */}
         {isLoading ? (
-          <div className="flex items-center justify-center py-12">
-            <div
-              className="animate-spin rounded-full h-8 w-8 border-b-2"
-              style={{ borderColor: COLORS.gold }}
+          <div className="flex flex-col items-center justify-center py-20">
+            <Loader2
+              className="w-10 h-10 animate-spin mb-4"
+              style={{ color: LUXE_COLORS.gold }}
             />
-            <span className="ml-3" style={{ color: COLORS.bronze }}>
+            <p className="text-lg" style={{ color: LUXE_COLORS.bronze }}>
               Loading appointments...
-            </span>
+            </p>
+          </div>
+        ) : filteredAppointments.length === 0 ? (
+          <div
+            className="text-center py-20 rounded-xl"
+            style={{
+              background: 'rgba(245,230,200,0.03)',
+              border: `1px solid ${LUXE_COLORS.gold}10`
+            }}
+          >
+            <Sparkles className="w-12 h-12 mx-auto mb-4" style={{ color: LUXE_COLORS.bronze, opacity: 0.5 }} />
+            <h3 className="text-xl font-medium mb-2" style={{ color: LUXE_COLORS.champagne }}>
+              No appointments found
+            </h3>
+            <p className="text-sm mb-6" style={{ color: LUXE_COLORS.bronze }}>
+              {searchTerm || statusFilter !== 'all' || dateFilter !== 'all'
+                ? 'Try adjusting your filters'
+                : 'Create your first appointment to get started'}
+            </p>
+            {!searchTerm && statusFilter === 'all' && dateFilter === 'all' && (
+              <Button
+                onClick={() => router.push('/salon/appointments/new')}
+                className="transition-all duration-240"
+                style={{
+                  background: `linear-gradient(135deg, ${LUXE_COLORS.gold} 0%, ${LUXE_COLORS.goldDark} 100%)`,
+                  color: LUXE_COLORS.black,
+                  border: 'none',
+                  fontWeight: '600',
+                  boxShadow: '0 4px 12px rgba(212,175,55,0.3)'
+                }}
+              >
+                <Plus className="w-4 h-4 mr-2" />
+                New Appointment
+              </Button>
+            )}
           </div>
         ) : (
           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
@@ -535,308 +556,262 @@ function AppointmentsContent() {
                 : null
 
               return (
-                <Card
+                <div
                   key={appointment.id}
-                  className="transition-all duration-200 hover:scale-[1.02]"
+                  className="rounded-xl p-6 transition-all duration-240"
                   style={{
-                    backgroundColor: COLORS.charcoalLight,
-                    border: `1px solid ${COLORS.gold}20`,
-                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.2)',
-                    opacity: appointment.status === 'archived' ? 0.6 : 1
+                    background: 'linear-gradient(135deg, rgba(245,230,200,0.05) 0%, rgba(212,175,55,0.03) 100%)',
+                    border: `1px solid ${LUXE_COLORS.gold}20`,
+                    boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
+                    opacity: appointment.status === 'archived' ? 0.6 : 1,
+                    transitionTimingFunction: LUXE_COLORS.softTransition
+                  }}
+                  onMouseEnter={e => {
+                    e.currentTarget.style.transform = 'translateY(-4px)'
+                    e.currentTarget.style.boxShadow = '0 12px 24px rgba(0,0,0,0.2)'
+                    e.currentTarget.style.borderColor = `${LUXE_COLORS.gold}40`
+                  }}
+                  onMouseLeave={e => {
+                    e.currentTarget.style.transform = 'translateY(0)'
+                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)'
+                    e.currentTarget.style.borderColor = `${LUXE_COLORS.gold}20`
                   }}
                 >
-                  <CardContent className="p-6">
-                    <div className="space-y-4">
-                      {/* Header */}
-                      <div className="flex items-start justify-between">
-                        <div className="flex-1">
-                          <h3 className="font-semibold text-lg" style={{ color: COLORS.champagne }}>
-                            {appointment.customer_name || 'Customer'}
-                          </h3>
-                          <p className="text-sm mt-1" style={{ color: COLORS.bronze }}>
-                            {appointment.stylist_name || 'Unassigned'}
-                          </p>
+                  <div className="space-y-4">
+                    {/* Header */}
+                    <div className="flex items-start justify-between">
+                      <div className="flex-1">
+                        <h3 className="font-semibold text-lg mb-1" style={{ color: LUXE_COLORS.champagne }}>
+                          {appointment.customer_name || 'Customer'}
+                        </h3>
+                        <div className="flex items-center gap-2 text-sm" style={{ color: LUXE_COLORS.bronze }}>
+                          <User className="w-3 h-3" />
+                          <span>{appointment.stylist_name || 'Unassigned'}</span>
                         </div>
-                        <Badge
-                          style={{
-                            backgroundColor:
-                              appointment.status === 'booked'
-                                ? `${COLORS.gold}20`
-                                : appointment.status === 'completed'
-                                  ? `${COLORS.emerald}20`
-                                  : `${COLORS.bronze}20`,
-                            color:
-                              appointment.status === 'booked'
-                                ? COLORS.gold
-                                : appointment.status === 'completed'
-                                  ? COLORS.emerald
-                                  : COLORS.bronze,
-                            border: `1px solid ${
-                              appointment.status === 'booked'
-                                ? COLORS.gold
-                                : appointment.status === 'completed'
-                                  ? COLORS.emerald
-                                  : COLORS.bronze
-                            }40`
-                          }}
-                        >
-                          {appointment.status}
-                        </Badge>
                       </div>
+                      <Badge
+                        className="transition-all duration-180"
+                        style={{
+                          background:
+                            appointment.status === 'booked'
+                              ? `linear-gradient(135deg, ${LUXE_COLORS.gold}30 0%, ${LUXE_COLORS.gold}20 100%)`
+                              : appointment.status === 'completed'
+                                ? `linear-gradient(135deg, ${LUXE_COLORS.emerald}30 0%, ${LUXE_COLORS.emerald}20 100%)`
+                                : appointment.status === 'checked_in'
+                                  ? `linear-gradient(135deg, ${LUXE_COLORS.bronze}30 0%, ${LUXE_COLORS.bronze}20 100%)`
+                                  : `linear-gradient(135deg, ${LUXE_COLORS.rose}30 0%, ${LUXE_COLORS.rose}20 100%)`,
+                          color:
+                            appointment.status === 'booked'
+                              ? LUXE_COLORS.gold
+                              : appointment.status === 'completed'
+                                ? LUXE_COLORS.emerald
+                                : appointment.status === 'checked_in'
+                                  ? LUXE_COLORS.bronze
+                                  : LUXE_COLORS.rose,
+                          border: `1px solid ${
+                            appointment.status === 'booked'
+                              ? LUXE_COLORS.gold
+                              : appointment.status === 'completed'
+                                ? LUXE_COLORS.emerald
+                                : appointment.status === 'checked_in'
+                                  ? LUXE_COLORS.bronze
+                                  : LUXE_COLORS.rose
+                          }40`,
+                          fontWeight: '500',
+                          textTransform: 'capitalize'
+                        }}
+                      >
+                        {appointment.status}
+                      </Badge>
+                    </div>
 
-                      {/* Details */}
-                      <div className="space-y-2 text-sm">
-                        {appointmentDate && (
-                          <>
-                            <div
-                              className="flex items-center gap-2"
-                              style={{ color: COLORS.bronze }}
-                            >
-                              <Calendar className="w-4 h-4" />
-                              <span>{format(appointmentDate, 'MMM d, yyyy')}</span>
-                            </div>
-                            <div
-                              className="flex items-center gap-2"
-                              style={{ color: COLORS.bronze }}
-                            >
-                              <Clock className="w-4 h-4" />
-                              <span>{format(appointmentDate, 'h:mm a')}</span>
+                    {/* Appointment Details */}
+                    <div className="space-y-3 pt-3" style={{ borderTop: `1px solid ${LUXE_COLORS.gold}10` }}>
+                      {appointmentDate && (
+                        <>
+                          <div className="flex items-center gap-3 text-sm" style={{ color: LUXE_COLORS.bronze }}>
+                            <Calendar className="w-4 h-4" style={{ color: LUXE_COLORS.gold }} />
+                            <span className="font-medium">{format(appointmentDate, 'EEEE, MMM d, yyyy')}</span>
+                          </div>
+                          <div className="flex items-center gap-3 text-sm" style={{ color: LUXE_COLORS.bronze }}>
+                            <Clock className="w-4 h-4" style={{ color: LUXE_COLORS.gold }} />
+                            <span className="font-medium">
+                              {format(appointmentDate, 'h:mm a')}
                               {appointment.duration_minutes && (
-                                <span>({appointment.duration_minutes} min)</span>
+                                <span className="ml-2 opacity-70">({appointment.duration_minutes} min)</span>
                               )}
-                            </div>
-                          </>
-                        )}
-                        {appointment.price !== undefined && appointment.price > 0 && (
-                          <div
-                            className="flex items-center gap-2"
-                            style={{ color: COLORS.champagne }}
-                          >
-                            <DollarSign className="w-4 h-4" style={{ color: COLORS.gold }} />
-                            <span className="font-medium">
-                              {appointment.currency_code || 'AED'} {appointment.price.toFixed(2)}
                             </span>
                           </div>
-                        )}
-                      </div>
-
-                      {/* Notes */}
-                      {appointment.notes && (
-                        <p className="text-sm italic" style={{ color: COLORS.bronze }}>
-                          {appointment.notes}
-                        </p>
+                        </>
+                      )}
+                      {appointment.price !== undefined && appointment.price > 0 && (
+                        <div
+                          className="flex items-center gap-3 text-sm font-medium"
+                          style={{ color: LUXE_COLORS.champagne }}
+                        >
+                          <DollarSign className="w-4 h-4" style={{ color: LUXE_COLORS.gold }} />
+                          <span>
+                            {appointment.currency_code || 'AED'} {appointment.price.toFixed(2)}
+                          </span>
+                        </div>
                       )}
+                    </div>
 
-                      {/* Action Buttons */}
+                    {/* Notes */}
+                    {appointment.notes && (
                       <div
-                        className="pt-4 border-t flex gap-2"
-                        style={{ borderColor: COLORS.gold + '20' }}
+                        className="p-3 rounded-lg text-sm italic"
+                        style={{
+                          background: 'rgba(212,175,55,0.05)',
+                          border: `1px solid ${LUXE_COLORS.gold}10`,
+                          color: LUXE_COLORS.bronze
+                        }}
+                      >
+                        {appointment.notes}
+                      </div>
+                    )}
+
+                    {/* Action Buttons */}
+                    <div className="pt-4 flex gap-2" style={{ borderTop: `1px solid ${LUXE_COLORS.gold}10` }}>
+                      <Button
+                        size="sm"
+                        onClick={() => router.push(`/salon/appointments/${appointment.id}`)}
+                        className="flex-1 transition-all duration-180"
+                        style={{
+                          background: 'rgba(212,175,55,0.15)',
+                          color: LUXE_COLORS.gold,
+                          border: `1px solid ${LUXE_COLORS.gold}30`,
+                          transitionTimingFunction: LUXE_COLORS.softTransition
+                        }}
+                        onMouseEnter={e => {
+                          e.currentTarget.style.background = 'rgba(212,175,55,0.25)'
+                          e.currentTarget.style.borderColor = `${LUXE_COLORS.gold}50`
+                        }}
+                        onMouseLeave={e => {
+                          e.currentTarget.style.background = 'rgba(212,175,55,0.15)'
+                          e.currentTarget.style.borderColor = `${LUXE_COLORS.gold}30`
+                        }}
                       >
+                        <Edit className="h-3 h-3 mr-1" />
+                        View
+                      </Button>
+                      {appointment.status === 'archived' ? (
                         <Button
                           size="sm"
-                          onClick={() => handleOpenAppointmentModal(appointment)}
+                          onClick={() => handleRestoreAppointment(appointment)}
+                          className="flex-1 transition-all duration-180"
                           style={{
-                            backgroundColor: COLORS.gold + '20',
-                            color: COLORS.gold,
-                            border: `1px solid ${COLORS.gold}40`,
-                            flex: 1
+                            background: 'rgba(15,111,92,0.15)',
+                            color: LUXE_COLORS.emerald,
+                            border: `1px solid ${LUXE_COLORS.emerald}30`,
+                            transitionTimingFunction: LUXE_COLORS.softTransition
                           }}
-                          className="hover:opacity-80 transition-opacity"
                         >
-                          <Edit className="h-3 w-3 mr-1" />
-                          Edit
+                          Restore
                         </Button>
-
-                        {/* Show Archive button for active appointments */}
-                        {appointment.status !== 'archived' &&
-                          appointment.status !== 'cancelled' && (
-                            <Button
-                              size="sm"
-                              onClick={async () => {
-                                try {
-                                  await archiveAppointment(appointment.id)
-                                  showSuccess(
-                                    'Appointment archived',
-                                    'Successfully archived appointment'
-                                  )
-                                } catch (error) {
-                                  showError(
-                                    'Failed to archive appointment',
-                                    error instanceof Error ? error.message : 'Please try again'
-                                  )
-                                }
-                              }}
-                              style={{
-                                backgroundColor: COLORS.bronze + '20',
-                                color: COLORS.bronze,
-                                border: `1px solid ${COLORS.bronze}40`,
-                                flex: 1
-                              }}
-                              className="hover:opacity-80 transition-opacity"
-                            >
-                              <Archive className="h-3 w-3 mr-1" />
-                              Archive
-                            </Button>
-                          )}
-
-                        {/* Show Restore button for archived appointments */}
-                        {appointment.status === 'archived' && (
-                          <Button
-                            size="sm"
-                            onClick={() => handleRestoreAppointment(appointment)}
-                            style={{
-                              backgroundColor: COLORS.emerald + '20',
-                              color: COLORS.emerald,
-                              border: `1px solid ${COLORS.emerald}40`,
-                              flex: 1
-                            }}
-                            className="hover:opacity-80 transition-opacity"
-                          >
-                            Restore
-                          </Button>
-                        )}
-
-                        {/* Show Delete button for archived appointments */}
-                        {appointment.status === 'archived' && (
-                          <Button
-                            size="sm"
-                            onClick={() => {
-                              setAppointmentToDelete(appointment)
-                              setDeleteConfirmOpen(true)
-                            }}
-                            style={{
-                              backgroundColor: '#991B1B20',
-                              color: '#991B1B',
-                              border: `1px solid #991B1B40`,
-                              flex: 1
-                            }}
-                            className="hover:opacity-80 transition-opacity"
-                          >
-                            <Trash2 className="h-3 w-3 mr-1" />
-                            Delete
-                          </Button>
-                        )}
-                      </div>
+                      ) : (
+                        <Button
+                          size="sm"
+                          onClick={() => {
+                            setAppointmentToDelete(appointment)
+                            setDeleteConfirmOpen(true)
+                          }}
+                          className="transition-all duration-180"
+                          style={{
+                            background: 'rgba(232,180,184,0.15)',
+                            color: LUXE_COLORS.rose,
+                            border: `1px solid ${LUXE_COLORS.rose}30`,
+                            transitionTimingFunction: LUXE_COLORS.softTransition
+                          }}
+                        >
+                          <Trash2 className="h-3 w-3" />
+                        </Button>
+                      )}
                     </div>
-                  </CardContent>
-                </Card>
+                  </div>
+                </div>
               )
             })}
           </div>
         )}
-
-        {/* Empty State */}
-        {!isLoading && filteredAppointments.length === 0 && (
-          <div className="text-center py-12">
-            <Calendar className="h-12 w-12 mx-auto mb-4" style={{ color: COLORS.bronze }} />
-            <h3 className="text-lg font-medium mb-2" style={{ color: COLORS.champagne }}>
-              No appointments found
-            </h3>
-            <p style={{ color: COLORS.bronze }}>
-              {searchTerm || statusFilter !== 'all' || dateFilter !== 'all'
-                ? 'Try adjusting your filters'
-                : 'Click "New Appointment" to create your first booking'}
-            </p>
-            {!searchTerm && statusFilter === 'all' && dateFilter === 'all' && (
-              <Button
-                className="mt-4"
-                onClick={() => setAppointmentModalOpen(true)}
-                style={{
-                  background: `linear-gradient(135deg, ${COLORS.gold} 0%, ${COLORS.goldDark} 100%)`,
-                  color: COLORS.black,
-                  border: 'none'
-                }}
-              >
-                <Plus className="w-4 h-4 mr-2" />
-                Create Your First Appointment
-              </Button>
-            )}
-          </div>
-        )}
       </div>
 
       {/* Delete Confirmation Dialog */}
       <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
         <DialogContent
-          className="max-w-md"
+          className="sm:max-w-[450px] border-0 p-0 overflow-hidden"
           style={{
-            backgroundColor: COLORS.charcoal,
-            border: `1px solid ${COLORS.gold}`,
-            color: COLORS.lightText
+            background: 'linear-gradient(135deg, #1A1A1A 0%, #0F0F0F 100%)',
+            backdropFilter: 'blur(20px)',
+            boxShadow: '0 25px 50px rgba(0,0,0,0.8), 0 0 0 1px rgba(212,175,55,0.2)'
           }}
         >
-          <DialogHeader>
-            <DialogTitle style={{ color: COLORS.champagne }} className="text-xl font-bold">
-              Delete Appointment?
+          <DialogHeader className="p-6 pb-4" style={{ borderBottom: `1px solid ${LUXE_COLORS.gold}15` }}>
+            <DialogTitle className="text-xl" style={{ color: LUXE_COLORS.champagne }}>
+              Delete Appointment
             </DialogTitle>
           </DialogHeader>
-          <div className="py-4">
-            <p style={{ color: COLORS.lightText }}>
-              Are you sure you want to permanently delete this appointment with{' '}
-              <strong style={{ color: COLORS.gold }}>
-                &ldquo;{appointmentToDelete?.customer_name}&rdquo;
-              </strong>
-              ?
-            </p>
-            <p className="mt-3 text-sm" style={{ color: COLORS.bronze }}>
-              This action cannot be undone.
+          <div className="p-6">
+            <p className="mb-6" style={{ color: LUXE_COLORS.bronze }}>
+              Are you sure you want to permanently delete this appointment? This action cannot be undone.
             </p>
+            {appointmentToDelete && (
+              <div
+                className="p-4 rounded-lg mb-6"
+                style={{
+                  background: 'rgba(232,180,184,0.1)',
+                  border: `1px solid ${LUXE_COLORS.rose}20`
+                }}
+              >
+                <p className="font-medium mb-1" style={{ color: LUXE_COLORS.champagne }}>
+                  {appointmentToDelete.customer_name || 'Customer'}
+                </p>
+                <p className="text-sm" style={{ color: LUXE_COLORS.bronze }}>
+                  {appointmentToDelete.start_time &&
+                    format(new Date(appointmentToDelete.start_time), 'MMM d, yyyy ‚Ä¢ h:mm a')}
+                </p>
+              </div>
+            )}
           </div>
-          <DialogFooter className="flex gap-3">
+          <DialogFooter className="p-6 pt-0 flex gap-3">
             <Button
-              type="button"
               variant="outline"
-              onClick={() => {
-                setDeleteConfirmOpen(false)
-                setAppointmentToDelete(null)
-              }}
-              disabled={isDeleting}
+              onClick={() => setDeleteConfirmOpen(false)}
               className="flex-1"
               style={{
-                borderColor: COLORS.gold,
-                color: COLORS.champagne,
-                backgroundColor: 'transparent'
+                background: 'rgba(245,230,200,0.05)',
+                border: `1px solid ${LUXE_COLORS.gold}20`,
+                color: LUXE_COLORS.champagne
               }}
             >
               Cancel
             </Button>
             <Button
-              type="button"
               onClick={handleConfirmDeleteAppointment}
               disabled={isDeleting}
               className="flex-1"
               style={{
-                backgroundColor: '#991B1B',
-                color: '#FFFFFF'
+                background: `linear-gradient(135deg, ${LUXE_COLORS.rose} 0%, #D4969A 100%)`,
+                color: LUXE_COLORS.black,
+                border: 'none',
+                fontWeight: '600'
               }}
             >
               {isDeleting ? (
                 <>
-                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                   Deleting...
                 </>
               ) : (
                 <>
-                  <Trash2 className="h-4 w-4 mr-2" />
-                  Delete
+                  <Trash2 className="w-4 h-4 mr-2" />
+                  Delete Permanently
                 </>
               )}
             </Button>
           </DialogFooter>
         </DialogContent>
       </Dialog>
-
-      {/* Appointment Modal */}
-      <AppointmentModal
-        open={appointmentModalOpen}
-        onOpenChange={handleCloseAppointmentModal}
-        onSave={handleSaveAppointment}
-        onArchive={handleArchiveAppointment}
-        onDelete={handleDeleteAppointment}
-        appointment={selectedAppointment}
-        userRole="manager"
-        isLoading={isCreating || isUpdating || isDeleting}
-      />
     </div>
   )
 }
diff --git a/src/app/salon/inventory/page.tsx b/src/app/salon/inventory/page.tsx
index b178b60a..6c097979 100644
--- a/src/app/salon/inventory/page.tsx
+++ b/src/app/salon/inventory/page.tsx
@@ -1,10 +1,30 @@
 'use client'
 
-import React, { useState } from 'react'
+/**
+ * HERA Enterprise Inventory Management Page
+ *
+ * ‚úÖ Uses useUniversalEntity (NO direct Supabase)
+ * ‚úÖ Enterprise-grade UI with glassmorphic design
+ * ‚úÖ Multi-branch inventory tracking
+ * ‚úÖ Stock movements with audit trail
+ * ‚úÖ Low stock alerts
+ * ‚úÖ Inventory valuation
+ */
+
+import React, { useState, useMemo } from 'react'
 import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
 import { Button } from '@/components/ui/button'
 import { Badge } from '@/components/ui/badge'
+import { Input } from '@/components/ui/input'
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog'
 import { useSecuredSalonContext } from '../SecuredSalonProvider'
+import { useBranchFilter } from '@/hooks/useBranchFilter'
+import { useHeraInventory, useHeraStockMovements, type InventoryItem } from '@/hooks/useHeraInventory'
+import { useHERAAuth } from '@/components/auth/HERAAuthProvider'
+import { BranchStockManager } from '@/components/salon/products/BranchStockManager'
+import { getProductInventory, setBranchStock, adjustStock } from '@/lib/services/inventory-service'
+import type { ProductInventory } from '@/types/inventory'
 import {
   Package2,
   TruckIcon,
@@ -13,651 +33,737 @@ import {
   Upload,
   Search,
   Filter,
-  ArrowLeft,
-  ChevronRight
+  ChevronRight,
+  AlertTriangle,
+  TrendingUp,
+  DollarSign,
+  Archive,
+  RefreshCw,
+  Download,
+  Edit
 } from 'lucide-react'
-import { ItemList } from '@/components/salon/inventory/ItemList'
-import { ItemModal } from '@/components/salon/inventory/ItemModal'
-import { MovementList } from '@/components/salon/inventory/MovementList'
-import { MovementModal } from '@/components/salon/inventory/MovementModal'
-import { ValuationCard } from '@/components/salon/inventory/ValuationCard'
-import { useInventoryPlaybook } from '@/hooks/useInventoryPlaybook'
-import { useMovementsPlaybook } from '@/hooks/useMovementsPlaybook'
-import { ItemWithStock, MovementForm } from '@/schemas/inventory'
 import { cn } from '@/lib/utils'
 
 const COLORS = {
-  black: '#0B0B0B',
-  charcoal: '#1A1A1A',
+  charcoalDark: '#0F0F0F',
+  charcoalLight: '#232323',
   gold: '#D4AF37',
   goldDark: '#B8860B',
-  champagne: '#F5E6C8',
   bronze: '#8C7853',
   lightText: '#E0E0E0',
-  charcoalDark: '#0F0F0F', // Darker shade for depth
-  charcoalLight: '#232323', // Lighter shade for elements
-  plum: '#B794F4', // Added for gradient accent
-  emerald: '#0F6F5C' // Added for accent
+  emerald: '#0F6F5C',
+  rose: '#E8B4B8',
+  plum: '#B794F4'
 }
 
 export default function SalonInventoryPage() {
-  const { organization, organizationId, isAuthenticated, isLoading } = useSecuredSalonContext()
-  const contextLoading = isLoading
+  const { organizationId } = useSecuredSalonContext()
+  const { user } = useHERAAuth()
+  const contextLoading = !organizationId
 
   const [activeTab, setActiveTab] = useState('items')
   const [searchQuery, setSearchQuery] = useState('')
-  const [statusFilter, setStatusFilter] = useState<'active' | 'archived' | 'all'>('active')
-  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set())
-  const [selectedMovements, setSelectedMovements] = useState<Set<string>>(new Set())
-
-  // Modal states
-  const [itemModalOpen, setItemModalOpen] = useState(false)
-  const [editingItem, setEditingItem] = useState<ItemWithStock | null>(null)
-  const [movementModalOpen, setMovementModalOpen] = useState(false)
-
-  // Branch state (TODO: Implement branch selector)
-  const [currentBranch] = useState('BRN-001')
-
-  // Use inventory hook
+  const [includeArchived, setIncludeArchived] = useState(false)
+  const [categoryFilter, setCategoryFilter] = useState('')
+  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null)
+  const [stockModalOpen, setStockModalOpen] = useState(false)
+  const [currentInventory, setCurrentInventory] = useState<ProductInventory | null>(null)
+  const [loadingInventory, setLoadingInventory] = useState(false)
+
+  // Branch filter
+  const {
+    branchId,
+    branches,
+    loading: branchesLoading,
+    setBranchId,
+    hasMultipleBranches
+  } = useBranchFilter(undefined, 'salon-inventory', organizationId)
+
+  // Inventory hook - NO direct Supabase
   const {
     items,
-    total: itemsTotal,
-    loading: itemsLoading,
-    lowStockItems,
-    saveItem,
-    archiveMany,
-    restoreMany,
-    exportCSV: exportItems
-  } = useInventoryPlaybook({
+    isLoading: itemsLoading,
+    createItem,
+    updateItem,
+    archiveItem,
+    restoreItem,
+    lowStockCount,
+    totalValue,
+    refetch
+  } = useHeraInventory({
     organizationId,
-    branchId: currentBranch,
-    query: searchQuery,
-    status: statusFilter
+    branchId: branchId || 'all',
+    includeArchived,
+    searchQuery,
+    categoryFilter,
+    filters: {
+      include_dynamic: true,
+      include_relationships: true
+    }
   })
 
-  // Use movements hook
+  // Stock movements hook
   const {
     movements,
-    total: movementsTotal,
-    loading: movementsLoading,
-    createMovement,
-    exportCSV: exportMovements
-  } = useMovementsPlaybook({
+    isLoading: movementsLoading,
+    createMovement
+  } = useHeraStockMovements({
     organizationId,
-    branchId: currentBranch
+    branchId: branchId || 'all',
+    filters: {
+      include_dynamic: true
+    }
   })
 
-  // Calculate valuation summary
-  const totalValue = items.reduce((sum, item) => sum + (item.value || 0), 0)
-  const totalItems = items.filter(i => i.status === 'active').length
-  const outOfStock = items.filter(i => i.on_hand === 0).length
+  // Calculate summary metrics
+  const activeItems = useMemo(() =>
+    items.filter(item => item.status === 'active').length,
+    [items]
+  )
 
-  if (!isAuthenticated) {
-    return (
-      <div
-        className="flex items-center justify-center min-h-screen"
-        style={{ backgroundColor: 'var(--hera-black)' }}
-      >
-        <div
-          className="text-center p-8 rounded-xl"
-          style={{
-            backgroundColor: COLORS.charcoal,
-            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.3)'
-          }}
-        >
-          <h2 className="text-xl font-medium mb-2" style={{ color: COLORS.champagne }}>
-            Please log in to access inventory
-          </h2>
-        </div>
-      </div>
-    )
-  }
+  const outOfStockCount = useMemo(() =>
+    items.filter(item => item.stock_status === 'out_of_stock').length,
+    [items]
+  )
 
-  if (contextLoading) {
-    return (
-      <div
-        className="flex items-center justify-center min-h-screen"
-        style={{ backgroundColor: 'var(--hera-black)' }}
-      >
-        <div
-          className="animate-spin rounded-full h-8 w-8 border-b-2"
-          style={{ borderColor: COLORS.gold }}
-        />
-      </div>
-    )
-  }
+  // Handle opening stock management modal
+  const handleManageStock = async (item: InventoryItem) => {
+    if (!organizationId) return
 
-  if (!organizationId) {
-    return (
-      <div
-        className="flex items-center justify-center min-h-screen"
-        style={{ backgroundColor: 'var(--hera-black)' }}
-      >
-        <div
-          className="text-center p-8 rounded-xl"
-          style={{
-            backgroundColor: COLORS.charcoal,
-            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.3)'
-          }}
-        >
-          <h2 className="text-xl font-medium mb-2" style={{ color: COLORS.champagne }}>
-            No organization context found
-          </h2>
-          <p style={{ color: COLORS.lightText, opacity: 0.7 }}>
-            Please select an organization to continue
-          </p>
-        </div>
-      </div>
-    )
-  }
+    setSelectedItem(item)
+    setStockModalOpen(true)
 
-  const handleSelectAllItems = (checked: boolean) => {
-    if (checked) {
-      setSelectedItems(new Set(items.map(i => i.id)))
-    } else {
-      setSelectedItems(new Set())
-    }
-  }
+    console.log('Item relationships:', (item as any).relationships)
+    console.log('Available branches:', branches)
+
+    // Build inventory from current item data
+    const stockAtRels = (item as any).relationships?.stock_at || (item as any).relationships?.STOCK_AT || []
+    console.log('Stock at relationships:', stockAtRels)
+
+    // If no stock relationships, create entries for all available branches
+    let branchStocks = []
 
-  const handleSelectItem = (id: string, checked: boolean) => {
-    const newSelected = new Set(selectedItems)
-    if (checked) {
-      newSelected.add(id)
+    if (Array.isArray(stockAtRels) && stockAtRels.length > 0) {
+      branchStocks = stockAtRels.map((rel: any) => ({
+        branch_id: rel.to_entity?.id || '',
+        branch_name: rel.to_entity?.entity_name || 'Unknown Branch',
+        quantity: item.stock_quantity || 0,
+        reorder_level: item.reorder_level || 10,
+        status: item.stock_status || 'in_stock',
+        value: (item.stock_quantity || 0) * (item.price_cost || 0)
+      }))
     } else {
-      newSelected.delete(id)
+      // No stock relationships - create entries for all branches
+      branchStocks = branches.map(branch => ({
+        branch_id: branch.id,
+        branch_name: branch.name,
+        quantity: 0,
+        reorder_level: 10,
+        status: 'out_of_stock' as const,
+        value: 0
+      }))
     }
-    setSelectedItems(newSelected)
-  }
-
-  const handleArchiveSelected = async () => {
-    const ids = Array.from(selectedItems)
-    await archiveMany(ids)
-    setSelectedItems(new Set())
-  }
 
-  const handleRestoreSelected = async () => {
-    const ids = Array.from(selectedItems)
-    await restoreMany(ids)
-    setSelectedItems(new Set())
-  }
+    console.log('Branch stocks:', branchStocks)
+
+    const inventory: ProductInventory = {
+      product_id: item.id,
+      product_name: item.entity_name,
+      product_code: item.entity_code,
+      total_quantity: item.stock_quantity || 0,
+      total_value: item.stock_value || 0,
+      cost_price: item.price_cost || 0,
+      selling_price: item.price_market || 0,
+      branch_stocks: branchStocks,
+      requires_inventory: true,
+      track_by: 'unit'
+    }
 
-  const handleSaveItem = async (data: any) => {
-    await saveItem(data, editingItem?.id)
-    setItemModalOpen(false)
-    setEditingItem(null)
+    console.log('Final inventory:', inventory)
+    setCurrentInventory(inventory)
   }
 
-  const handleEditItem = (item: ItemWithStock) => {
-    setEditingItem(item)
-    setItemModalOpen(true)
+  // Handle stock update
+  const handleStockUpdate = async (branchId: string, quantity: number, reorderLevel: number) => {
+    if (!organizationId || !selectedItem) return
+
+    try {
+      await setBranchStock(organizationId, selectedItem.id, branchId, {
+        branch_id: branchId,
+        quantity,
+        reorder_level: reorderLevel
+      })
+
+      // Refetch items to get updated stock
+      await refetch()
+
+      // Update current inventory display
+      if (currentInventory) {
+        const updatedBranchStocks = currentInventory.branch_stocks.map(bs =>
+          bs.branch_id === branchId
+            ? { ...bs, quantity, reorder_level }
+            : bs
+        )
+        setCurrentInventory({
+          ...currentInventory,
+          branch_stocks: updatedBranchStocks,
+          total_quantity: updatedBranchStocks.reduce((sum, bs) => sum + bs.quantity, 0),
+          total_value: updatedBranchStocks.reduce((sum, bs) => sum + bs.value, 0)
+        })
+      }
+    } catch (error) {
+      console.error('Failed to update stock:', error)
+    }
   }
 
-  const handleDuplicateItem = (item: ItemWithStock) => {
-    const duplicated = { ...item, name: `${item.name} (Copy)`, sku: undefined, id: '' }
-    setEditingItem(duplicated)
-    setItemModalOpen(true)
+  // Handle quick stock adjustment
+  const handleQuickAdjust = async (branchId: string, type: 'increase' | 'decrease', amount: number) => {
+    if (!organizationId || !selectedItem || !user?.id) return
+
+    const currentQty = currentInventory?.branch_stocks.find(bs => bs.branch_id === branchId)?.quantity || 0
+    const newQty = type === 'increase' ? currentQty + amount : currentQty - amount
+
+    try {
+      await adjustStock(organizationId, user.id, {
+        product_id: selectedItem.id,
+        branch_id: branchId,
+        adjustment_type: 'set',
+        quantity: Math.max(0, newQty),
+        reason: 'Quick adjustment'
+      })
+
+      // Refetch items to get updated stock
+      await refetch()
+
+      // Update current inventory display
+      if (currentInventory) {
+        const updatedBranchStocks = currentInventory.branch_stocks.map(bs =>
+          bs.branch_id === branchId
+            ? { ...bs, quantity: Math.max(0, newQty), value: Math.max(0, newQty) * (currentInventory.cost_price || 0) }
+            : bs
+        )
+        setCurrentInventory({
+          ...currentInventory,
+          branch_stocks: updatedBranchStocks,
+          total_quantity: updatedBranchStocks.reduce((sum, bs) => sum + bs.quantity, 0),
+          total_value: updatedBranchStocks.reduce((sum, bs) => sum + bs.value, 0)
+        })
+      }
+    } catch (error) {
+      console.error('Failed to adjust stock:', error)
+    }
   }
 
-  const handleArchiveItem = async (ids: string[]) => {
-    await archiveMany(ids)
+  // Authentication checks
+  if (!organizationId) {
+    return (
+      <div className="flex items-center justify-center min-h-screen" style={{ backgroundColor: COLORS.charcoalDark }}>
+        <div className="text-center p-8 rounded-xl" style={{ backgroundColor: COLORS.charcoalLight }}>
+          <h2 className="text-xl font-medium mb-2" style={{ color: COLORS.gold }}>
+            No organization context found
+          </h2>
+          <p style={{ color: COLORS.lightText + '80' }}>
+            Please select an organization to continue
+          </p>
+        </div>
+      </div>
+    )
   }
 
-  const handleRestoreItem = async (ids: string[]) => {
-    await restoreMany(ids)
+  if (contextLoading) {
+    return (
+      <div className="flex items-center justify-center min-h-screen" style={{ backgroundColor: COLORS.charcoalDark }}>
+        <div className="animate-spin rounded-full h-8 w-8 border-b-2" style={{ borderColor: COLORS.gold }} />
+      </div>
+    )
   }
 
   return (
-    <div className="min-h-screen" style={{ backgroundColor: 'var(--hera-black)' }}>
-      {/* Main content wrapper with charcoal background for depth */}
-      <div className="relative" style={{ minHeight: '100vh' }}>
-        {/* Subtle gradient overlay for depth */}
-        <div
-          className="absolute inset-0 pointer-events-none"
-          style={{
-            background: `radial-gradient(circle at 20% 80%, ${COLORS.gold}08 0%, transparent 50%),
-                           radial-gradient(circle at 80% 20%, ${COLORS.bronze}05 0%, transparent 50%),
-                           radial-gradient(circle at 40% 40%, ${COLORS.plum}03 0%, transparent 50%)`
-          }}
-        />
-
-        {/* Content container */}
+    <div className="min-h-screen" style={{ backgroundColor: COLORS.charcoalDark }}>
+      {/* Gradient overlay */}
+      <div
+        className="absolute inset-0 pointer-events-none"
+        style={{
+          background: `radial-gradient(circle at 20% 80%, ${COLORS.gold}08 0%, transparent 50%),
+                       radial-gradient(circle at 80% 20%, ${COLORS.bronze}05 0%, transparent 50%)`
+        }}
+      />
+
+      {/* Content */}
+      <div className="container mx-auto px-6 py-8 relative">
+        {/* Header */}
         <div
-          className="container mx-auto px-6 py-8 relative"
+          className="mb-8 p-6 rounded-xl"
           style={{
-            backgroundColor: COLORS.charcoal,
-            minHeight: '100vh',
-            boxShadow: 'inset 0 2px 4px rgba(0, 0, 0, 0.5), 0 0 40px rgba(0, 0, 0, 0.3)'
+            background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+            backdropFilter: 'blur(20px)',
+            border: `1px solid ${COLORS.gold}40`,
+            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)'
           }}
         >
-          {/* Header */}
-          <div
-            className="mb-8 p-6 rounded-xl"
-            style={{
-              backgroundColor: COLORS.charcoalLight,
-              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',
-              border: `1px solid ${COLORS.bronze}20`
-            }}
-          >
-            {/* Breadcrumb */}
-            <div className="flex items-center gap-2 text-sm mb-4">
-              <span style={{ color: COLORS.bronze }}>HERA</span>
-              <ChevronRight className="w-4 h-4" style={{ color: COLORS.bronze }} />
-              <span style={{ color: COLORS.bronze }}>SALON OS</span>
-              <ChevronRight className="w-4 h-4" style={{ color: COLORS.bronze }} />
-              <span style={{ color: COLORS.champagne }}>Inventory</span>
-            </div>
+          {/* Breadcrumb */}
+          <div className="flex items-center gap-2 text-sm mb-4">
+            <span style={{ color: COLORS.bronze }}>HERA</span>
+            <ChevronRight className="w-4 h-4" style={{ color: COLORS.bronze }} />
+            <span style={{ color: COLORS.bronze }}>SALON OS</span>
+            <ChevronRight className="w-4 h-4" style={{ color: COLORS.bronze }} />
+            <span style={{ color: COLORS.gold }}>Inventory</span>
+          </div>
 
-            {/* Page Header */}
-            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
-              <h1 className="text-3xl font-bold" style={{ color: COLORS.champagne }}>
+          {/* Title and Actions */}
+          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
+            <div>
+              <h1 className="text-3xl font-bold mb-2" style={{ color: COLORS.gold }}>
                 Inventory Management
               </h1>
+              <p className="text-sm" style={{ color: COLORS.lightText + '80' }}>
+                Enterprise-grade multi-branch inventory tracking
+              </p>
+            </div>
 
-              <div className="flex items-center gap-3">
-                {/* TODO: Branch Selector */}
-                <div
-                  className="px-4 py-2 rounded-lg border text-sm"
-                  style={{
-                    borderColor: COLORS.bronze + '33',
-                    backgroundColor: COLORS.charcoalDark,
-                    color: COLORS.lightText,
-                    boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.3)'
-                  }}
-                >
-                  Main Branch
-                </div>
-
-                {/* Search */}
-                <div className="relative">
-                  <Search
-                    className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4"
-                    style={{ color: COLORS.bronze }}
-                  />
-                  <input
-                    type="text"
-                    placeholder="Search items, movements..."
-                    value={searchQuery}
-                    onChange={e => setSearchQuery(e.target.value)}
-                    className="pl-10 pr-4 py-2 rounded-lg border text-sm w-64"
+            <div className="flex items-center gap-3">
+              {/* Branch Selector */}
+              {hasMultipleBranches && (
+                <Select value={branchId || 'all'} onValueChange={setBranchId}>
+                  <SelectTrigger
+                    className="w-48"
                     style={{
-                      borderColor: COLORS.bronze + '33',
                       backgroundColor: COLORS.charcoalDark,
-                      color: COLORS.lightText,
-                      boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.3)'
+                      borderColor: COLORS.gold + '40',
+                      color: COLORS.lightText
                     }}
-                  />
-                </div>
-
-                {/* Action Buttons */}
-                <Button
-                  variant="outline"
-                  onClick={() => setMovementModalOpen(true)}
-                  className="gap-2"
-                  style={{
-                    borderColor: COLORS.bronze,
-                    color: COLORS.champagne
-                  }}
-                >
-                  <Upload className="w-4 h-4" />
-                  New Movement
-                </Button>
-
-                <Button
-                  onClick={() => {
-                    setEditingItem(null)
-                    setItemModalOpen(true)
-                  }}
-                  className="gap-2"
+                  >
+                    <SelectValue placeholder="All Branches" />
+                  </SelectTrigger>
+                  <SelectContent className="hera-select-content">
+                    <SelectItem value="all">All Branches</SelectItem>
+                    {branches.map(branch => (
+                      <SelectItem key={branch.id} value={branch.id}>
+                        {branch.entity_name}
+                      </SelectItem>
+                    ))}
+                  </SelectContent>
+                </Select>
+              )}
+
+              {/* Search */}
+              <div className="relative">
+                <Search
+                  className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4"
+                  style={{ color: COLORS.gold }}
+                />
+                <Input
+                  type="text"
+                  placeholder="Search inventory..."
+                  value={searchQuery}
+                  onChange={e => setSearchQuery(e.target.value)}
+                  className="pl-10 w-64"
                   style={{
-                    background: `linear-gradient(135deg, ${COLORS.gold} 0%, ${COLORS.goldDark} 100%)`,
-                    color: COLORS.black
+                    backgroundColor: COLORS.charcoalDark,
+                    borderColor: COLORS.gold + '40',
+                    color: COLORS.lightText
                   }}
-                >
-                  <Plus className="w-4 h-4" />
-                  New Item
-                </Button>
+                />
               </div>
+
+              {/* Actions */}
+              <Button
+                variant="outline"
+                className="gap-2"
+                style={{ borderColor: COLORS.gold + '40', color: COLORS.gold }}
+              >
+                <Upload className="w-4 h-4" />
+                Stock Movement
+              </Button>
+
+              <Button
+                className="gap-2"
+                style={{ background: `linear-gradient(135deg, ${COLORS.gold} 0%, ${COLORS.goldDark} 100%)`, color: COLORS.charcoalDark }}
+              >
+                <Plus className="w-4 h-4" />
+                New Item
+              </Button>
             </div>
           </div>
+        </div>
+
+        {/* Summary Cards */}
+        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
+          <div
+            className="p-6 rounded-xl"
+            style={{
+              background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+              backdropFilter: 'blur(20px)',
+              border: `1px solid ${COLORS.gold}40`
+            }}
+          >
+            <div className="flex items-center gap-3 mb-2">
+              <Package2 className="w-5 h-5" style={{ color: COLORS.gold }} />
+              <span className="text-sm font-medium" style={{ color: COLORS.lightText }}>Total Items</span>
+            </div>
+            <div className="text-3xl font-bold" style={{ color: COLORS.gold }}>{activeItems}</div>
+            <div className="text-xs mt-1" style={{ color: COLORS.lightText + '60' }}>Active inventory items</div>
+          </div>
 
-          {/* Tabs */}
-          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
-            <TabsList
-              className="p-0 border-b w-full justify-start h-auto rounded-none"
+          <div
+            className="p-6 rounded-xl"
+            style={{
+              background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+              backdropFilter: 'blur(20px)',
+              border: `1px solid ${COLORS.emerald}40`
+            }}
+          >
+            <div className="flex items-center gap-3 mb-2">
+              <DollarSign className="w-5 h-5" style={{ color: COLORS.emerald }} />
+              <span className="text-sm font-medium" style={{ color: COLORS.lightText }}>Total Value</span>
+            </div>
+            <div className="text-3xl font-bold" style={{ color: COLORS.emerald }}>
+              AED {totalValue.toFixed(2)}
+            </div>
+            <div className="text-xs mt-1" style={{ color: COLORS.lightText + '60' }}>Current inventory value</div>
+          </div>
+
+          <div
+            className="p-6 rounded-xl"
+            style={{
+              background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+              backdropFilter: 'blur(20px)',
+              border: `1px solid ${COLORS.rose}40`
+            }}
+          >
+            <div className="flex items-center gap-3 mb-2">
+              <AlertTriangle className="w-5 h-5" style={{ color: COLORS.rose }} />
+              <span className="text-sm font-medium" style={{ color: COLORS.lightText }}>Low Stock</span>
+            </div>
+            <div className="text-3xl font-bold" style={{ color: COLORS.rose }}>{lowStockCount}</div>
+            <div className="text-xs mt-1" style={{ color: COLORS.lightText + '60' }}>Items need restocking</div>
+          </div>
+
+          <div
+            className="p-6 rounded-xl"
+            style={{
+              background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+              backdropFilter: 'blur(20px)',
+              border: `1px solid #EF444440`
+            }}
+          >
+            <div className="flex items-center gap-3 mb-2">
+              <TrendingUp className="w-5 h-5" style={{ color: '#EF4444' }} />
+              <span className="text-sm font-medium" style={{ color: COLORS.lightText }}>Out of Stock</span>
+            </div>
+            <div className="text-3xl font-bold" style={{ color: '#EF4444' }}>{outOfStockCount}</div>
+            <div className="text-xs mt-1" style={{ color: COLORS.lightText + '60' }}>Items unavailable</div>
+          </div>
+        </div>
+
+        {/* Tabs */}
+        <Tabs value={activeTab} onValueChange={setActiveTab}>
+          <TabsList
+            className="mb-6"
+            style={{
+              backgroundColor: COLORS.charcoalLight,
+              borderBottom: `1px solid ${COLORS.gold}20`
+            }}
+          >
+            <TabsTrigger
+              value="items"
+              className="relative"
               style={{
-                borderColor: COLORS.bronze + '33',
-                backgroundColor: COLORS.charcoalLight,
-                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)'
+                color: activeTab === 'items' ? COLORS.gold : COLORS.lightText
+              }}
+            >
+              <Package2 className="w-4 h-4 mr-2" />
+              Items
+              <Badge className="ml-2" style={{ backgroundColor: COLORS.charcoalDark }}>
+                {activeItems}
+              </Badge>
+              {lowStockCount > 0 && (
+                <Badge className="ml-1" style={{ backgroundColor: '#EF444420', color: '#EF4444' }}>
+                  {lowStockCount}
+                </Badge>
+              )}
+              {activeTab === 'items' && (
+                <div className="absolute bottom-0 left-0 right-0 h-0.5" style={{ backgroundColor: COLORS.gold }} />
+              )}
+            </TabsTrigger>
+
+            <TabsTrigger
+              value="movements"
+              className="relative"
+              style={{
+                color: activeTab === 'movements' ? COLORS.gold : COLORS.lightText
+              }}
+            >
+              <TruckIcon className="w-4 h-4 mr-2" />
+              Movements
+              <Badge className="ml-2" style={{ backgroundColor: COLORS.charcoalDark }}>
+                {movements.length}
+              </Badge>
+              {activeTab === 'movements' && (
+                <div className="absolute bottom-0 left-0 right-0 h-0.5" style={{ backgroundColor: COLORS.gold }} />
+              )}
+            </TabsTrigger>
+
+            <TabsTrigger
+              value="valuation"
+              className="relative"
+              style={{
+                color: activeTab === 'valuation' ? COLORS.gold : COLORS.lightText
+              }}
+            >
+              <BarChart className="w-4 h-4 mr-2" />
+              Valuation
+              {activeTab === 'valuation' && (
+                <div className="absolute bottom-0 left-0 right-0 h-0.5" style={{ backgroundColor: COLORS.gold }} />
+              )}
+            </TabsTrigger>
+          </TabsList>
+
+          {/* Items Tab */}
+          <TabsContent value="items">
+            <div
+              className="rounded-xl p-6"
+              style={{
+                background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+                backdropFilter: 'blur(20px)',
+                border: `1px solid ${COLORS.gold}40`
               }}
             >
-              <TabsTrigger
-                value="items"
-                className="rounded-none px-6 py-3 relative transition-colors"
-                style={{
-                  backgroundColor: activeTab === 'items' ? COLORS.charcoal : 'transparent'
-                }}
-              >
-                <div className="flex items-center gap-2">
-                  <Package2
-                    className="w-4 h-4"
-                    style={{ color: activeTab === 'items' ? COLORS.gold : COLORS.champagne }}
-                  />
-                  <span
-                    style={{ color: activeTab === 'items' ? COLORS.champagne : COLORS.lightText }}
-                  >
-                    Items
-                  </span>
-                  <Badge
-                    variant="secondary"
-                    className="ml-2"
-                    style={{
-                      backgroundColor: COLORS.charcoalDark,
-                      color: COLORS.champagne,
-                      border: `1px solid ${COLORS.gold}33`
-                    }}
-                  >
-                    {itemsTotal}
-                  </Badge>
-                  {lowStockItems > 0 && (
-                    <Badge
-                      className="ml-1"
-                      style={{
-                        backgroundColor: 'rgba(220, 38, 38, 0.2)',
-                        color: '#EF4444',
-                        borderColor: 'rgba(220, 38, 38, 0.5)'
-                      }}
-                    >
-                      {lowStockItems} low
-                    </Badge>
-                  )}
-                </div>
-                <div
-                  className={cn(
-                    'absolute bottom-0 left-0 right-0 h-0.5 transition-all',
-                    activeTab === 'items' ? 'opacity-100' : 'opacity-0'
-                  )}
-                  style={{ backgroundColor: COLORS.gold }}
-                />
-              </TabsTrigger>
-
-              <TabsTrigger
-                value="movements"
-                className="rounded-none px-6 py-3 relative transition-colors"
-                style={{
-                  backgroundColor: activeTab === 'movements' ? COLORS.charcoal : 'transparent'
-                }}
-              >
-                <div className="flex items-center gap-2">
-                  <TruckIcon
-                    className="w-4 h-4"
-                    style={{ color: activeTab === 'movements' ? COLORS.gold : COLORS.champagne }}
-                  />
-                  <span
-                    style={{
-                      color: activeTab === 'movements' ? COLORS.champagne : COLORS.lightText
-                    }}
-                  >
-                    Movements
-                  </span>
-                  <Badge
-                    variant="secondary"
-                    className="ml-2"
-                    style={{
-                      backgroundColor: COLORS.charcoalDark,
-                      color: COLORS.champagne,
-                      border: `1px solid ${COLORS.gold}33`
-                    }}
-                  >
-                    {movementsTotal}
-                  </Badge>
-                </div>
-                <div
-                  className={cn(
-                    'absolute bottom-0 left-0 right-0 h-0.5 transition-all',
-                    activeTab === 'movements' ? 'opacity-100' : 'opacity-0'
-                  )}
-                  style={{ backgroundColor: COLORS.gold }}
-                />
-              </TabsTrigger>
-
-              <TabsTrigger
-                value="valuation"
-                className="rounded-none px-6 py-3 relative transition-colors"
-                style={{
-                  backgroundColor: activeTab === 'valuation' ? COLORS.charcoal : 'transparent'
-                }}
-              >
-                <div className="flex items-center gap-2">
-                  <BarChart
-                    className="w-4 h-4"
-                    style={{ color: activeTab === 'valuation' ? COLORS.gold : COLORS.champagne }}
-                  />
-                  <span
-                    style={{
-                      color: activeTab === 'valuation' ? COLORS.champagne : COLORS.lightText
-                    }}
-                  >
-                    Valuation
-                  </span>
-                </div>
-                <div
-                  className={cn(
-                    'absolute bottom-0 left-0 right-0 h-0.5 transition-all',
-                    activeTab === 'valuation' ? 'opacity-100' : 'opacity-0'
-                  )}
-                  style={{ backgroundColor: COLORS.gold }}
-                />
-              </TabsTrigger>
-            </TabsList>
-
-            {/* Items Tab */}
-            <TabsContent value="items" className="space-y-6">
               {/* Filters */}
-              <div className="flex items-center justify-between">
+              <div className="flex items-center justify-between mb-6">
                 <div className="flex items-center gap-3">
-                  <select
-                    value={statusFilter}
-                    onChange={e => setStatusFilter(e.target.value as any)}
-                    className="px-3 py-1.5 rounded-lg border text-sm"
+                  <Button
+                    variant={includeArchived ? 'default' : 'outline'}
+                    size="sm"
+                    onClick={() => setIncludeArchived(!includeArchived)}
                     style={{
-                      borderColor: COLORS.bronze + '33',
-                      backgroundColor: COLORS.charcoalDark,
-                      color: COLORS.lightText,
-                      boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.3)'
+                      borderColor: COLORS.gold + '40',
+                      backgroundColor: includeArchived ? COLORS.gold : 'transparent',
+                      color: includeArchived ? COLORS.charcoalDark : COLORS.lightText
                     }}
                   >
-                    <option value="active">Active Items</option>
-                    <option value="archived">Archived Items</option>
-                    <option value="all">All Items</option>
-                  </select>
+                    <Archive className="w-4 h-4 mr-2" />
+                    {includeArchived ? 'Hide Archived' : 'Show Archived'}
+                  </Button>
 
-                  {lowStockItems > 0 && (
+                  {lowStockCount > 0 && (
                     <Badge
                       className="cursor-pointer"
-                      style={{
-                        backgroundColor: '#DC2626' + '20',
-                        color: '#DC2626',
-                        borderColor: '#DC2626' + '50'
-                      }}
+                      style={{ backgroundColor: '#EF444420', color: '#EF4444', borderColor: '#EF444450' }}
                     >
                       <Filter className="w-3 h-3 mr-1" />
-                      {lowStockItems} Low Stock
+                      {lowStockCount} Low Stock
                     </Badge>
                   )}
                 </div>
 
-                {/* Bulk Actions */}
-                {selectedItems.size > 0 && (
-                  <div className="flex items-center gap-2">
-                    <span className="text-sm" style={{ color: COLORS.lightText }}>
-                      {selectedItems.size} selected
-                    </span>
-                    {statusFilter === 'active' ? (
-                      <Button
-                        size="sm"
-                        variant="outline"
-                        onClick={handleArchiveSelected}
-                        style={{ borderColor: COLORS.bronze, color: COLORS.champagne }}
-                      >
-                        Archive
-                      </Button>
-                    ) : statusFilter === 'archived' ? (
-                      <Button
-                        size="sm"
-                        variant="outline"
-                        onClick={handleRestoreSelected}
-                        style={{ borderColor: COLORS.bronze, color: COLORS.champagne }}
-                      >
-                        Restore
-                      </Button>
-                    ) : null}
-                    <Button
-                      size="sm"
-                      variant="outline"
-                      onClick={exportItems}
-                      style={{ borderColor: COLORS.bronze, color: COLORS.champagne }}
-                    >
-                      Export CSV
-                    </Button>
-                  </div>
-                )}
+                <Button
+                  variant="outline"
+                  size="sm"
+                  style={{ borderColor: COLORS.gold + '40', color: COLORS.lightText }}
+                >
+                  <Download className="w-4 h-4 mr-2" />
+                  Export CSV
+                </Button>
               </div>
 
               {/* Items List */}
-              <ItemList
-                items={items}
-                loading={itemsLoading}
-                selectedIds={selectedItems}
-                onSelectAll={handleSelectAllItems}
-                onSelectOne={handleSelectItem}
-                onEdit={handleEditItem}
-                onDuplicate={handleDuplicateItem}
-                onArchive={handleArchiveItem}
-                onRestore={handleRestoreItem}
-              />
-            </TabsContent>
-
-            {/* Movements Tab */}
-            <TabsContent value="movements" className="space-y-6">
-              {/* Movement Filters */}
-              <div className="flex items-center justify-between">
-                <div className="flex items-center gap-3">
-                  {/* Type filter chips */}
-                  {['All', 'Receipt', 'Issue', 'Transfer', 'Adjust'].map(type => (
-                    <Badge
-                      key={type}
-                      variant="outline"
-                      className="cursor-pointer"
+              {itemsLoading ? (
+                <div className="flex items-center justify-center py-12">
+                  <RefreshCw className="w-8 h-8 animate-spin" style={{ color: COLORS.gold }} />
+                </div>
+              ) : items.length === 0 ? (
+                <div className="text-center py-12">
+                  <Package2 className="w-12 h-12 mx-auto mb-4" style={{ color: COLORS.gold + '40' }} />
+                  <p style={{ color: COLORS.lightText }}>No inventory items found</p>
+                  <p className="text-sm mt-2" style={{ color: COLORS.lightText + '60' }}>
+                    Add your first item to get started
+                  </p>
+                </div>
+              ) : (
+                <div className="space-y-2">
+                  {items.map(item => (
+                    <div
+                      key={item.id}
+                      className="p-4 rounded-lg hover:bg-opacity-70 transition-all"
                       style={{
-                        borderColor: COLORS.bronze + '50',
-                        color: COLORS.champagne
+                        backgroundColor: COLORS.charcoalDark,
+                        border: `1px solid ${
+                          item.stock_status === 'out_of_stock' ? '#EF4444' :
+                          item.stock_status === 'low_stock' ? '#F59E0B' :
+                          COLORS.gold
+                        }30`
                       }}
                     >
-                      {type}
-                    </Badge>
+                      <div className="flex items-center justify-between">
+                        <div className="flex-1">
+                          <div className="flex items-center gap-3">
+                            <h3 className="font-medium" style={{ color: COLORS.lightText }}>
+                              {item.entity_name}
+                            </h3>
+                            {item.sku && (
+                              <Badge variant="outline" style={{ borderColor: COLORS.bronze + '40' }}>
+                                {item.sku}
+                              </Badge>
+                            )}
+                            <Badge
+                              style={{
+                                backgroundColor:
+                                  item.stock_status === 'out_of_stock' ? '#EF444420' :
+                                  item.stock_status === 'low_stock' ? '#F59E0B20' :
+                                  '#10B98120',
+                                color:
+                                  item.stock_status === 'out_of_stock' ? '#EF4444' :
+                                  item.stock_status === 'low_stock' ? '#F59E0B' :
+                                  '#10B981'
+                              }}
+                            >
+                              {item.stock_status === 'out_of_stock' ? 'Out of Stock' :
+                               item.stock_status === 'low_stock' ? 'Low Stock' :
+                               'In Stock'}
+                            </Badge>
+                          </div>
+                          <div className="flex items-center gap-6 mt-2 text-sm" style={{ color: COLORS.lightText + '80' }}>
+                            <span>Qty: <strong>{item.stock_quantity || 0}</strong></span>
+                            <span>Cost: <strong>AED {(item.price_cost || 0).toFixed(2)}</strong></span>
+                            <span>Value: <strong>AED {(item.stock_value || 0).toFixed(2)}</strong></span>
+                            {item.category && <span>Category: <strong>{item.category}</strong></span>}
+                          </div>
+                        </div>
+                        <Button
+                          size="sm"
+                          onClick={() => handleManageStock(item)}
+                          style={{
+                            backgroundColor: COLORS.gold,
+                            color: COLORS.charcoalDark
+                          }}
+                        >
+                          <Edit className="w-4 h-4 mr-2" />
+                          Manage Stock
+                        </Button>
+                      </div>
+                    </div>
                   ))}
                 </div>
+              )}
+            </div>
+          </TabsContent>
 
-                {movementsTotal > 0 && (
-                  <Button
-                    size="sm"
-                    variant="outline"
-                    onClick={exportMovements}
-                    style={{ borderColor: COLORS.bronze, color: COLORS.champagne }}
-                  >
-                    Export CSV
-                  </Button>
-                )}
-              </div>
-
-              {/* Movements List */}
-              <MovementList movements={movements} loading={movementsLoading} />
-            </TabsContent>
-
-            {/* Valuation Tab */}
-            <TabsContent value="valuation" className="space-y-6">
-              {/* Valuation Summary */}
-              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
-                <ValuationCard
-                  branch_id={currentBranch}
-                  branch_name="Main Branch"
-                  total_items={totalItems}
-                  total_value={totalValue}
-                  low_stock_items={lowStockItems}
-                  out_of_stock_items={outOfStock}
-                  valuation_method="WAC"
-                  last_updated={new Date().toISOString()}
-                />
-
-                {/* Additional branch cards would go here */}
-              </div>
-
-              {/* Valuation Settings */}
-              <div
-                className="p-6 rounded-xl border"
-                style={{
-                  backgroundColor: COLORS.charcoalLight,
-                  borderColor: COLORS.bronze + '33',
-                  boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'
-                }}
-              >
-                <h3 className="text-lg font-medium mb-4" style={{ color: COLORS.champagne }}>
-                  Valuation Configuration
-                </h3>
-                <div className="space-y-3">
-                  <div className="flex items-center justify-between">
-                    <span style={{ color: COLORS.lightText }}>Organization Valuation Method</span>
-                    <select
-                      className="px-3 py-1.5 rounded-lg border text-sm"
+          {/* Movements Tab */}
+          <TabsContent value="movements">
+            <div
+              className="rounded-xl p-6"
+              style={{
+                background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+                backdropFilter: 'blur(20px)',
+                border: `1px solid ${COLORS.gold}40`
+              }}
+            >
+              {movementsLoading ? (
+                <div className="flex items-center justify-center py-12">
+                  <RefreshCw className="w-8 h-8 animate-spin" style={{ color: COLORS.gold }} />
+                </div>
+              ) : movements.length === 0 ? (
+                <div className="text-center py-12">
+                  <TruckIcon className="w-12 h-12 mx-auto mb-4" style={{ color: COLORS.gold + '40' }} />
+                  <p style={{ color: COLORS.lightText }}>No stock movements recorded</p>
+                </div>
+              ) : (
+                <div className="space-y-2">
+                  {movements.map(movement => (
+                    <div
+                      key={movement.id}
+                      className="p-4 rounded-lg"
                       style={{
-                        borderColor: COLORS.bronze + '33',
                         backgroundColor: COLORS.charcoalDark,
-                        color: COLORS.lightText,
-                        boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.3)'
+                        border: `1px solid ${COLORS.gold}30`
                       }}
                     >
-                      <option>Weighted Average Cost (WAC)</option>
-                      <option>First In First Out (FIFO)</option>
-                    </select>
-                  </div>
-                  <p className="text-sm" style={{ color: COLORS.lightText, opacity: 0.7 }}>
-                    This setting applies to all items unless overridden at the item level
-                  </p>
+                      <div className="flex items-center justify-between">
+                        <div>
+                          <h3 className="font-medium" style={{ color: COLORS.lightText }}>
+                            {movement.entity_name}
+                          </h3>
+                          <p className="text-sm mt-1" style={{ color: COLORS.lightText + '80' }}>
+                            Type: {movement.movement_type} ‚Ä¢ Qty: {movement.quantity}
+                          </p>
+                        </div>
+                        <div className="text-right">
+                          <div className="text-sm" style={{ color: COLORS.lightText }}>
+                            AED {(movement.quantity * movement.unit_cost).toFixed(2)}
+                          </div>
+                          <div className="text-xs mt-1" style={{ color: COLORS.lightText + '60' }}>
+                            {new Date(movement.created_at).toLocaleDateString()}
+                          </div>
+                        </div>
+                      </div>
+                    </div>
+                  ))}
                 </div>
-              </div>
-            </TabsContent>
-          </Tabs>
-
-          {/* Item Modal */}
-          {itemModalOpen && (
-            <ItemModal
-              open={itemModalOpen}
-              onClose={() => {
-                setItemModalOpen(false)
-                setEditingItem(null)
+              )}
+            </div>
+          </TabsContent>
+
+          {/* Valuation Tab */}
+          <TabsContent value="valuation">
+            <div
+              className="rounded-xl p-6"
+              style={{
+                background: `linear-gradient(135deg, ${COLORS.charcoalLight}CC 0%, ${COLORS.charcoalDark}CC 100%)`,
+                backdropFilter: 'blur(20px)',
+                border: `1px solid ${COLORS.gold}40`
               }}
-              item={editingItem}
-              onSave={handleSaveItem}
-              categories={['Hair Care', 'Color', 'Tools', 'Retail', 'Supplies', 'Equipment']}
-            />
-          )}
-
-          {/* Movement Modal */}
-          {movementModalOpen && (
-            <MovementModal
-              open={movementModalOpen}
-              onClose={() => setMovementModalOpen(false)}
-              items={items}
-              branches={[
-                { id: 'BRN-001', name: 'Main Branch' },
-                { id: 'BRN-002', name: 'Downtown Branch' },
-                { id: 'BRN-003', name: 'Mall Branch' }
-              ]}
-              currentBranch={currentBranch}
-              onSave={createMovement}
-            />
-          )}
-        </div>
+            >
+              <div className="text-center py-12">
+                <BarChart className="w-12 h-12 mx-auto mb-4" style={{ color: COLORS.gold }} />
+                <h3 className="text-xl font-medium mb-2" style={{ color: COLORS.gold }}>
+                  Inventory Valuation: AED {totalValue.toFixed(2)}
+                </h3>
+                <p style={{ color: COLORS.lightText + '80' }}>
+                  Total value across {activeItems} active items
+                </p>
+              </div>
+            </div>
+          </TabsContent>
+        </Tabs>
+
+        {/* Stock Management Dialog */}
+        <Dialog open={stockModalOpen} onOpenChange={setStockModalOpen}>
+          <DialogContent
+            className="max-w-4xl max-h-[90vh] overflow-y-auto"
+            style={{
+              backgroundColor: COLORS.charcoalDark,
+              border: `1px solid ${COLORS.gold}40`
+            }}
+          >
+            <DialogHeader>
+              <DialogTitle style={{ color: COLORS.gold }}>
+                Manage Stock - {selectedItem?.entity_name}
+              </DialogTitle>
+              <DialogDescription style={{ color: COLORS.lightText + '80' }}>
+                Update stock levels and reorder points for each branch
+              </DialogDescription>
+            </DialogHeader>
+
+            {loadingInventory ? (
+              <div className="flex items-center justify-center py-12">
+                <RefreshCw className="w-8 h-8 animate-spin" style={{ color: COLORS.gold }} />
+              </div>
+            ) : currentInventory && selectedItem ? (
+              <BranchStockManager
+                productId={selectedItem.id}
+                inventory={currentInventory}
+                onStockUpdate={handleStockUpdate}
+                onQuickAdjust={handleQuickAdjust}
+              />
+            ) : (
+              <div className="text-center py-12">
+                <Package2 className="w-12 h-12 mx-auto mb-4" style={{ color: COLORS.gold + '40' }} />
+                <p style={{ color: COLORS.lightText }}>No inventory data available</p>
+              </div>
+            )}
+          </DialogContent>
+        </Dialog>
       </div>
     </div>
   )
diff --git a/src/components/salon/SalonRoleBasedDarkSidebar.tsx b/src/components/salon/SalonRoleBasedDarkSidebar.tsx
index 22f00ac8..50d6f564 100644
--- a/src/components/salon/SalonRoleBasedDarkSidebar.tsx
+++ b/src/components/salon/SalonRoleBasedDarkSidebar.tsx
@@ -39,7 +39,7 @@ const roleBasedSidebarItems: Record<string, SidebarItem[]> = {
     { title: 'Owner Dashboard', href: '/salon/owner', icon: TrendingUp },
     {
       title: 'Appointments',
-      href: '/salon/appointments1',
+      href: '/salon/appointments',
       icon: Calendar,
       badge: '3',
       badgeColor: LUXE_COLORS.emerald
@@ -58,7 +58,7 @@ const roleBasedSidebarItems: Record<string, SidebarItem[]> = {
     { title: 'Dashboard', href: '/salon/receptionist/dashboard', icon: Home },
     {
       title: 'Appointments',
-      href: '/salon/appointments1',
+      href: '/salon/appointments',
       icon: Calendar,
       badge: '3',
       badgeColor: LUXE_COLORS.emerald
diff --git a/src/hooks/useHeraAppointments.ts b/src/hooks/useHeraAppointments.ts
index 23980693..6d90de35 100644
--- a/src/hooks/useHeraAppointments.ts
+++ b/src/hooks/useHeraAppointments.ts
@@ -5,6 +5,7 @@
  * Provides appointment-specific helpers and RPC integration
  */
 
+import { useMemo, useState, useEffect } from 'react'
 import { useUniversalEntity } from './useUniversalEntity'
 import { APPOINTMENT_PRESET } from './entityPresets'
 import type { DynamicFieldDef } from './useUniversalEntity'
@@ -68,6 +69,7 @@ export interface UseHeraAppointmentsOptions {
 }
 
 export function useHeraAppointments(options?: UseHeraAppointmentsOptions) {
+  // Fetch appointments
   const {
     entities: appointments,
     isLoading,
@@ -87,13 +89,111 @@ export function useHeraAppointments(options?: UseHeraAppointmentsOptions) {
       include_dynamic: true,
       include_relationships: false,
       limit: 100,
-      // Only filter by 'active' status when not including archived
-      ...(options?.includeArchived ? {} : { status: 'booked,checked_in,completed' }),
+      // Get all appointments - we'll filter by status client-side since RPC doesn't support comma-separated values
+      status: null,
       ...options?.filters
     },
     dynamicFields: APPOINTMENT_PRESET.dynamicFields as DynamicFieldDef[]
   })
 
+  // ENTERPRISE PATTERN: Normalized Data - Fetch customers separately
+  // IMPORTANT: Use uppercase entity_type to match useHeraCustomers/useHeraStaff convention
+  const { entities: customers, isLoading: customersLoading } = useUniversalEntity({
+    entity_type: 'CUSTOMER', // ‚úÖ Uppercase matches normalized standard
+    organizationId: options?.organizationId,
+    filters: {
+      include_dynamic: false, // We only need entity names, not full details
+      limit: 1000 // Reasonable limit for customers
+    }
+  })
+
+  // ENTERPRISE PATTERN: Normalized Data - Fetch staff separately
+  // NOTE: useUniversalEntity normalizes to uppercase, so this will query for 'STAFF'
+  const { entities: staff, isLoading: staffLoading } = useUniversalEntity({
+    entity_type: 'STAFF', // ‚úÖ Normalized to uppercase
+    organizationId: options?.organizationId,
+    filters: {
+      include_dynamic: false,
+      limit: 500
+    }
+  })
+
+  // BACKWARD COMPATIBILITY: Direct fetch for lowercase 'staff' (bypasses normalization)
+  // This is a workaround for staff entities that couldn't be updated due to constraints
+  const [staffLegacy, setStaffLegacy] = useState<any[]>([])
+  const [staffLegacyLoading, setStaffLegacyLoading] = useState(true)
+
+  useEffect(() => {
+    if (!options?.organizationId) return
+
+    const fetchLegacyStaff = async () => {
+      try {
+        const response = await fetch('/api/v2/entities?' + new URLSearchParams({
+          organization_id: options.organizationId!,
+          entity_type: 'staff', // ‚ö†Ô∏è Lowercase query (bypasses normalization)
+          include_dynamic: 'false',
+          limit: '500'
+        }), {
+          headers: {
+            'x-hera-api-version': 'v2'
+          }
+        })
+
+        if (response.ok) {
+          const result = await response.json()
+          setStaffLegacy(result.data || [])
+        }
+      } catch (error) {
+        console.log('[useHeraAppointments] Legacy staff fetch failed:', error)
+      } finally {
+        setStaffLegacyLoading(false)
+      }
+    }
+
+    fetchLegacyStaff()
+  }, [options?.organizationId])
+
+  // Merge normalized STAFF and legacy staff
+  const allStaff = useMemo(() => {
+    const merged = [
+      ...(staff || []),
+      ...(staffLegacy || [])
+    ]
+    console.log('[useHeraAppointments] Staff merge:', {
+      staff: staff?.length || 0,
+      staffLegacy: staffLegacy.length,
+      merged: merged.length
+    })
+    return merged
+  }, [staff, staffLegacy])
+
+  const allStaffLoading = staffLoading || staffLegacyLoading
+
+  // Create lookup maps for O(1) access (enterprise performance pattern)
+  const customerMap = useMemo(() => {
+    if (!customers) return new Map<string, string>()
+    const map = new Map(
+      customers.map(c => [c.id, c.entity_name])
+    )
+    console.log('[useHeraAppointments] Customer map created:', {
+      totalCustomers: customers.length,
+      sampleCustomers: Array.from(map.entries()).slice(0, 3)
+    })
+    return map
+  }, [customers])
+
+  const staffMap = useMemo(() => {
+    if (!allStaff || allStaff.length === 0) return new Map<string, string>()
+    const map = new Map(
+      allStaff.map(s => [s.id, s.entity_name])
+    )
+    console.log('[useHeraAppointments] Staff map created:', {
+      totalStaff: allStaff.length,
+      sampleStaff: Array.from(map.entries()).slice(0, 3)
+    })
+    return map
+  }, [allStaff])
+
   // Helper to create appointment with proper smart codes
   const createAppointment = async (data: AppointmentFormValues) => {
     // Build entity_name from customer and time
@@ -368,9 +468,104 @@ export function useHeraAppointments(options?: UseHeraAppointmentsOptions) {
     return result
   }
 
+  // ENTERPRISE PATTERN: Normalized Data Enrichment
+  // Fetch customer/staff names using IDs (proper relational pattern)
+  const enrichedAppointments = useMemo(() => {
+    if (!appointments || appointments.length === 0) return []
+
+    return (appointments as Appointment[]).map(apt => {
+      // Look up customer name by ID (normalized approach)
+      // FALLBACK: Use denormalized customer_name if ID lookup fails (backward compatibility)
+      let customerName = 'Unknown Customer'
+      if (apt.customer_id) {
+        customerName = customerMap.get(apt.customer_id) || apt.customer_name || 'Unknown Customer'
+      } else if (apt.customer_name) {
+        // Old denormalized data without customer_id
+        customerName = apt.customer_name
+      }
+
+      // Look up stylist name by ID (normalized approach)
+      // FALLBACK: Use denormalized stylist_name if ID lookup fails (backward compatibility)
+      let stylistName = 'Unassigned'
+      if (apt.stylist_id) {
+        stylistName = staffMap.get(apt.stylist_id) || apt.stylist_name || 'Unassigned'
+      } else if (apt.stylist_name) {
+        // Old denormalized data without stylist_id
+        stylistName = apt.stylist_name
+      }
+
+      // Debug logging for first appointment
+      if (apt === appointments[0]) {
+        console.log('[useHeraAppointments] Enriching appointment (first one):', {
+          appointmentId: apt.id,
+          appointmentName: apt.entity_name,
+          customer_id: apt.customer_id,
+          customer_id_type: typeof apt.customer_id,
+          customerFound: customerMap.has(apt.customer_id || ''),
+          customerName,
+          stylist_id: apt.stylist_id,
+          stylist_id_type: typeof apt.stylist_id,
+          stylistFound: staffMap.has(apt.stylist_id || ''),
+          stylistName,
+          customerMapSize: customerMap.size,
+          staffMapSize: staffMap.size,
+          allCustomerIds: Array.from(customerMap.keys()),
+          allCustomerEntries: Array.from(customerMap.entries()),
+          allStaffIds: Array.from(staffMap.keys()),
+          appointmentDynamicFields: apt
+        })
+      }
+
+      return {
+        ...apt,
+        customer_name: customerName,
+        stylist_name: stylistName
+      }
+    })
+  }, [appointments, customerMap, staffMap]) // Dependencies are stable - only change when data changes
+
+  // Filter appointments client-side since RPC doesn't support comma-separated status values
+  const filteredAppointments = enrichedAppointments?.filter(apt => {
+    // If includeArchived is true, return all appointments
+    if (options?.includeArchived) return true
+
+    // Check status - it could be in entity.status OR in dynamic fields
+    // Old appointments have status in dynamic fields, new ones in entity.status
+    const validStatuses = ['booked', 'checked_in', 'completed', 'active']
+    const entityStatus = apt.status
+    const dynamicStatus = (apt as any).dynamic_fields?.status?.value || (apt as any).status
+
+    const isValid = validStatuses.includes(entityStatus) || validStatuses.includes(dynamicStatus)
+
+    console.log('[useHeraAppointments] Filtering appointment:', {
+      id: apt.id,
+      name: apt.entity_name,
+      entityStatus,
+      dynamicStatus,
+      isValid,
+      validStatuses
+    })
+
+    return isValid
+  })
+
+  console.log('[useHeraAppointments] Final filtered appointments:', {
+    totalCount: appointments?.length || 0,
+    filteredCount: filteredAppointments?.length || 0,
+    includeArchived: options?.includeArchived,
+    enrichmentStatus: {
+      customersLoaded: !customersLoading,
+      staffLoaded: !allStaffLoading,
+      fullyEnriched: !customersLoading && !allStaffLoading
+    }
+  })
+
+  // Combined loading state - appointments are only fully loaded when enrichment data is ready
+  const isFullyLoaded = !isLoading && !customersLoading && !allStaffLoading
+
   return {
-    appointments: appointments as Appointment[],
-    isLoading,
+    appointments: filteredAppointments,
+    isLoading: !isFullyLoaded, // Show loading until ALL data is ready (normalized pattern)
     error,
     refetch,
     createAppointment,
diff --git a/src/hooks/useHeraProducts.ts b/src/hooks/useHeraProducts.ts
index c903bada..752f6a5e 100644
--- a/src/hooks/useHeraProducts.ts
+++ b/src/hooks/useHeraProducts.ts
@@ -13,7 +13,7 @@
 import { useMemo } from 'react'
 import { useUniversalEntity } from './useUniversalEntity'
 import { PRODUCT_PRESET } from './entityPresets'
-import type { DynamicFieldDef } from './useUniversalEntity'
+import type { DynamicFieldDef, RelationshipDef } from './useUniversalEntity'
 
 export interface Product {
   id: string
@@ -83,7 +83,8 @@ export function useHeraProducts(options?: UseHeraProductsOptions) {
       ...(options?.includeArchived ? {} : { status: 'active' }),
       ...options?.filters
     },
-    dynamicFields: PRODUCT_PRESET.dynamicFields as DynamicFieldDef[]
+    dynamicFields: PRODUCT_PRESET.dynamicFields as DynamicFieldDef[],
+    relationships: PRODUCT_PRESET.relationships as RelationshipDef[]
   })
 
   // Helper to create product with proper smart codes
@@ -327,11 +328,25 @@ export function useHeraProducts(options?: UseHeraProductsOptions) {
 
     let filtered = products as Product[]
 
+    console.log('[useHeraProducts] Filtering products:', {
+      total: filtered.length,
+      branch_id: options?.filters?.branch_id,
+      sample_product_relationships: filtered[0] ? (filtered[0] as any).relationships : 'no products'
+    })
+
     // Filter by STOCK_AT branch relationship (when branch is selected, not "All Locations")
     if (options?.filters?.branch_id && options.filters.branch_id !== 'all') {
       filtered = filtered.filter(p => {
         // Check if product has STOCK_AT relationship with the specified branch
         const stockAtRelationships = (p as any).relationships?.stock_at || (p as any).relationships?.STOCK_AT
+
+        console.log('[useHeraProducts] Product filter check:', {
+          product: p.entity_name,
+          has_relationships: !!(p as any).relationships,
+          stockAtRelationships,
+          branch_id_filter: options.filters?.branch_id
+        })
+
         if (!stockAtRelationships) return false
 
         // Handle both array and single relationship formats
@@ -341,6 +356,8 @@ export function useHeraProducts(options?: UseHeraProductsOptions) {
           return stockAtRelationships.to_entity?.id === options.filters?.branch_id
         }
       })
+
+      console.log('[useHeraProducts] After branch filter:', filtered.length)
     }
 
     // Search filter
diff --git a/src/hooks/useUniversalEntity.ts b/src/hooks/useUniversalEntity.ts
index 005bed9e..b9539f22 100644
--- a/src/hooks/useUniversalEntity.ts
+++ b/src/hooks/useUniversalEntity.ts
@@ -164,6 +164,19 @@ function mergeDynamic(rows: any[]) {
   return out
 }
 
+// ================================================================================
+// ENTERPRISE PATTERN: Entity Type Normalization
+// ================================================================================
+
+/**
+ * Normalizes entity_type to uppercase for consistency
+ * HERA Standard: All entity types are UPPERCASE (CUSTOMER, STAFF, PRODUCT, etc.)
+ */
+function normalizeEntityType(entityType: string): string {
+  if (!entityType) return entityType
+  return entityType.toUpperCase()
+}
+
 // Helper to get authentication headers, including organization context
 async function getAuthHeaders(organizationId?: string | null): Promise<Record<string, string>> {
   const {
@@ -212,7 +225,10 @@ export function useUniversalEntity(config: UseUniversalEntityConfig) {
   const queryClient = useQueryClient()
   // Use passed organizationId if provided, otherwise fall back to useHERAAuth
   const organizationId = config.organizationId || organization?.id
-  const { entity_type, filters = {} } = config
+
+  // ‚úÖ ENTERPRISE PATTERN: Normalize entity_type to uppercase
+  const entity_type = normalizeEntityType(config.entity_type)
+  const { filters = {} } = config
 
   // Build query key - only include primitives
   const queryKey = useMemo(
@@ -268,22 +284,48 @@ export function useUniversalEntity(config: UseUniversalEntityConfig) {
       const result = await getEntities('', {
         p_organization_id: organizationId,
         p_entity_type: entity_type,
-        p_status: filters.status || null // Pass null to get all statuses
+        p_status: filters.status || null, // Pass null to get all statuses
+        p_include_relationships: !!filters.include_relationships,
+        p_include_dynamic: filters.include_dynamic !== false
       })
 
       const entitiesArray = Array.isArray(result) ? result : []
 
       console.log('[useUniversalEntity] Fetched entities:', {
         count: entitiesArray.length,
-        isArray: Array.isArray(result)
+        isArray: Array.isArray(result),
+        first_entity: entitiesArray[0],
+        first_entity_has_relationships: entitiesArray[0] ? !!entitiesArray[0].relationships : false,
+        first_entity_relationships: entitiesArray[0]?.relationships
+      })
+
+      // Check if entities already have dynamic_fields from RPC
+      const hasDynamicFieldsInRpc = entitiesArray[0]?.dynamic_fields
+      console.log('[useUniversalEntity] Dynamic fields check:', {
+        hasDynamicFieldsInRpc: !!hasDynamicFieldsInRpc,
+        firstEntityDynamicFields: entitiesArray[0]?.dynamic_fields
       })
 
-      // Fetch dynamic data for ALL entities in ONE batch call
+      // Fetch dynamic data for ALL entities in ONE batch call (only if not already in RPC response)
       const headers = await getAuthHeaders(organizationId)
       const entityIds = entitiesArray.map(e => e.id)
 
       let allDynamicData: any[] = []
-      if (entityIds.length > 0) {
+
+      // If RPC already returned dynamic_fields, use those
+      if (hasDynamicFieldsInRpc) {
+        entitiesArray.forEach(entity => {
+          if (entity.dynamic_fields && Array.isArray(entity.dynamic_fields)) {
+            entity.dynamic_fields.forEach((field: any) => {
+              allDynamicData.push({
+                ...field,
+                entity_id: entity.id
+              })
+            })
+          }
+        })
+        console.log('[useUniversalEntity] Using dynamic fields from RPC:', allDynamicData.length)
+      } else if (entityIds.length > 0) {
         try {
           const response = await fetch(
             `/api/v2/dynamic-data?p_entity_ids=${entityIds.join(',')}`,
@@ -292,6 +334,7 @@ export function useUniversalEntity(config: UseUniversalEntityConfig) {
           if (response.ok) {
             const result = await response.json()
             allDynamicData = result.data || []
+            console.log('[useUniversalEntity] Fetched dynamic data from API:', allDynamicData.length)
           }
         } catch (error) {
           console.error('[useUniversalEntity] Failed to fetch dynamic data batch:', error)
@@ -337,6 +380,12 @@ export function useUniversalEntity(config: UseUniversalEntityConfig) {
         return mergedData
       })
 
+      console.log('[useUniversalEntity] Entities with dynamic data:', {
+        count: entitiesWithDynamicData.length,
+        first_entity_merged: entitiesWithDynamicData[0],
+        dynamicDataCount: allDynamicData.length
+      })
+
       // Fetch relationships for all entities if requested
       if (filters.include_relationships && entitiesWithDynamicData.length > 0) {
         // Reuse headers from above to avoid extra auth calls
diff --git a/src/lib/appointments/createDraftAppointment.ts b/src/lib/appointments/createDraftAppointment.ts
index 0c6f749a..1e34a7ed 100644
--- a/src/lib/appointments/createDraftAppointment.ts
+++ b/src/lib/appointments/createDraftAppointment.ts
@@ -1,10 +1,10 @@
 // ================================================================================
-// CREATE DRAFT APPOINTMENT
+// CREATE DRAFT APPOINTMENT - HERA Universal API Pattern
 // Smart Code: HERA.LIB.APPOINTMENT.CREATE.DRAFT.V1
-// Creates a DRAFT appointment header with smart_code and org filter
+// Uses Universal API v2 with proper RPC calls
 // ================================================================================
 
-import { supabase } from '@/lib/supabase'
+import { upsertEntity, setDynamicDataBatch } from '@/lib/universal-api-v2-client'
 
 export type DraftInput = {
   organizationId: string
@@ -39,46 +39,131 @@ export async function createDraftAppointment(input: DraftInput): Promise<{ id: s
   const startDate = new Date(startAt)
   const endDate = new Date(startDate.getTime() + durationMin * 60 * 1000)
 
-  // Generate transaction code
-  const transactionCode = `APT-${new Date().toISOString().split('T')[0].replace(/-/g, '')}-${Date.now().toString().slice(-6)}`
-
-  // Create appointment transaction
-  const appointmentData = {
-    organization_id: organizationId,
-    transaction_type: 'APPOINTMENT',
-    transaction_code: transactionCode,
-    transaction_date: startDate.toISOString(),
-    source_entity_id: customerEntityId,
-    target_entity_id: preferredStylistEntityId || null,
-    total_amount: 0, // Will be calculated from services
-    smart_code: 'HERA.SALON.APPOINTMENT.BOOKING.HEADER.V1',
-    metadata: {
-      status: 'DRAFT',
-      start_time: startDate.toISOString(),
-      end_time: endDate.toISOString(),
-      duration_minutes: durationMin,
-      notes: notes || null,
-      branch_id: branchId || null,
-      idempotency_key: idempotencyKey || null,
-      created_via: 'POS_MODAL',
-      created_at: new Date().toISOString()
-    }
+  // Format appointment name: "Appointment - Date"
+  const appointmentName = `Appointment - ${startDate.toLocaleDateString('en-US', {
+    month: 'short',
+    day: 'numeric',
+    year: 'numeric'
+  })}`
+
+  // Generate appointment code
+  const appointmentCode = `APT-${new Date().toISOString().split('T')[0].replace(/-/g, '')}-${Date.now().toString().slice(-6)}`
+
+  console.log('[createDraftAppointment] Creating appointment entity:', {
+    name: appointmentName,
+    code: appointmentCode,
+    organizationId
+  })
+
+  // Step 1: Create appointment entity using Universal API
+  const entityResult = await upsertEntity('', {
+    p_organization_id: organizationId,
+    p_entity_type: 'appointment',
+    p_entity_name: appointmentName,
+    p_entity_code: appointmentCode,
+    p_smart_code: 'HERA.SALON.APPOINTMENT.ENTITY.BOOKING.V1',
+    p_status: 'booked'
+  })
+
+  if (!entityResult || !entityResult.data) {
+    throw new Error('Failed to create appointment entity')
   }
 
-  const { data, error } = await supabase
-    .from('universal_transactions')
-    .insert(appointmentData)
-    .select('id')
-    .single()
+  // Extract the ID from the entity result - it could be entityResult.data.id or entityResult.data itself if it's a UUID
+  const appointmentId = typeof entityResult.data === 'string'
+    ? entityResult.data
+    : entityResult.data.id || entityResult.data.entity_id
+
+  console.log('[createDraftAppointment] Entity created:', {
+    appointmentId,
+    fullResult: entityResult.data
+  })
 
-  if (error) {
-    console.error('Error creating draft appointment:', error)
-    throw new Error(`Failed to create appointment: ${error.message}`)
+  // Step 2: Add dynamic data fields for appointment details
+  // ENTERPRISE PATTERN: Normalized data - store only IDs, not names
+  // Names will be fetched separately from customer/staff entities
+  const dynamicFields = [
+    {
+      field_name: 'customer_id',
+      field_type: 'text' as const,
+      field_value: customerEntityId
+    },
+    {
+      field_name: 'stylist_id',
+      field_type: 'text' as const,
+      field_value: preferredStylistEntityId || ''
+    },
+    {
+      field_name: 'start_time',
+      field_type: 'text' as const,
+      field_value: startDate.toISOString()
+    },
+    {
+      field_name: 'end_time',
+      field_type: 'text' as const,
+      field_value: endDate.toISOString()
+    },
+    {
+      field_name: 'duration_minutes',
+      field_type: 'number' as const,
+      field_value_number: durationMin
+    },
+    {
+      field_name: 'currency_code',
+      field_type: 'text' as const,
+      field_value: 'AED'
+    },
+    {
+      field_name: 'price',
+      field_type: 'number' as const,
+      field_value_number: 0
+    }
+  ]
+
+  // Add optional fields
+  if (notes) {
+    dynamicFields.push({
+      field_name: 'notes',
+      field_type: 'text' as const,
+      field_value: notes
+    })
+  }
+
+  if (branchId) {
+    dynamicFields.push({
+      field_name: 'branch_id',
+      field_type: 'text' as const,
+      field_value: branchId
+    })
   }
 
-  if (!data) {
-    throw new Error('No data returned from appointment creation')
+  console.log('[createDraftAppointment] Adding dynamic fields:', dynamicFields.length)
+
+  // Insert all dynamic fields using batch API
+  try {
+    console.log('[createDraftAppointment] Calling setDynamicDataBatch with:', {
+      p_organization_id: organizationId,
+      p_entity_id: appointmentId,
+      p_smart_code: 'HERA.SALON.APPOINTMENT.DYN.BATCH.V1',
+      p_fields: dynamicFields
+    })
+
+    const batchResult = await setDynamicDataBatch('', {
+      p_organization_id: organizationId,
+      p_entity_id: appointmentId,
+      p_smart_code: 'HERA.SALON.APPOINTMENT.DYN.BATCH.V1',
+      p_fields: dynamicFields
+    })
+
+    console.log('‚úÖ Created appointment with dynamic data:', {
+      appointmentId,
+      batchResult
+    })
+  } catch (error) {
+    console.error('‚ùå Error adding dynamic fields:', error)
+    // Don't fail the whole operation if dynamic fields fail
+    throw error // Re-throw so we can see the error in the UI
   }
 
-  return { id: data.id as string }
+  return { id: appointmentId }
 }
diff --git a/src/lib/appointments/upsertAppointmentLines.ts b/src/lib/appointments/upsertAppointmentLines.ts
index 3cb13257..f9926cf9 100644
--- a/src/lib/appointments/upsertAppointmentLines.ts
+++ b/src/lib/appointments/upsertAppointmentLines.ts
@@ -1,10 +1,10 @@
 // ================================================================================
-// UPSERT APPOINTMENT LINES
+// UPSERT APPOINTMENT LINES - HERA Universal API Pattern
 // Smart Code: HERA.LIB.APPOINTMENT.UPSERT.LINES.V1
-// Creates or updates appointment line items with smart codes
+// Uses Universal API v2 with proper RPC calls
 // ================================================================================
 
-import { supabase } from '@/lib/supabase'
+import { setDynamicDataBatch } from '@/lib/universal-api-v2-client'
 
 export type LineInput = {
   organizationId: string
@@ -21,88 +21,51 @@ export type LineInput = {
 export async function upsertAppointmentLines(input: LineInput): Promise<void> {
   const { organizationId, appointmentId, items } = input
 
+  // Extract ID if appointmentId is an object
+  const entityId = typeof appointmentId === 'string'
+    ? appointmentId
+    : (appointmentId as any).id || (appointmentId as any).entity_id
+
   // Validate required fields
   if (!organizationId) throw new Error('Organization ID is required')
-  if (!appointmentId) throw new Error('Appointment ID is required')
+  if (!entityId) throw new Error('Appointment ID is required')
   if (!items || items.length === 0) throw new Error('At least one item is required')
 
-  // Delete existing lines for this appointment (to handle updates)
-  const { error: deleteError } = await supabase
-    .from('universal_transaction_lines')
-    .delete()
-    .eq('transaction_id', appointmentId)
-    .eq('organization_id', organizationId)
+  // Calculate totals
+  const totalAmount = items.reduce((sum, item) => sum + item.qty * item.unitAmount, 0)
+  const serviceIds = items.filter(item => item.type === 'SERVICE').map(item => item.entityId)
 
-  if (deleteError) {
-    console.error('Error deleting existing lines:', deleteError)
-    throw new Error(`Failed to clear existing lines: ${deleteError.message}`)
-  }
+  console.log('[upsertAppointmentLines] Updating appointment:', {
+    entityId,
+    serviceCount: serviceIds.length,
+    totalAmount
+  })
 
-  // Prepare line items
-  const lines = items.map((item, index) => ({
-    organization_id: organizationId,
-    transaction_id: appointmentId,
-    line_number: index + 1,
-    entity_id: item.entityId,
-    line_type: item.type,
-    description: `${item.type} - Line ${index + 1}`,
-    quantity: item.qty,
-    unit_amount: item.unitAmount,
-    line_amount: item.qty * item.unitAmount,
-    discount_amount: 0,
-    tax_amount: 0,
-    smart_code:
-      item.type === 'SERVICE'
-        ? 'HERA.SALON.APPOINTMENT.LINE.SERVICE.V1'
-        : 'HERA.SALON.APPOINTMENT.LINE.PRODUCT.V1',
-    line_data: {
-      item_type: item.type,
-      duration_minutes: item.durationMin || null,
-      created_at: new Date().toISOString()
+  // Prepare dynamic data updates
+  const dynamicFields = [
+    {
+      field_name: 'service_ids',
+      field_type: 'json' as const,
+      field_value_json: serviceIds
+    },
+    {
+      field_name: 'price',
+      field_type: 'number' as const,
+      field_value_number: totalAmount
     }
-  }))
-
-  // Insert new lines
-  const { error: insertError } = await supabase.from('universal_transaction_lines').insert(lines)
-
-  if (insertError) {
-    console.error('Error inserting appointment lines:', insertError)
-    throw new Error(`Failed to create appointment lines: ${insertError.message}`)
-  }
-
-  // Update appointment total amount
-  const totalAmount = lines.reduce((sum, line) => sum + line.line_amount, 0)
-  const totalDuration = items
-    .filter(item => item.type === 'SERVICE' && item.durationMin)
-    .reduce((sum, item) => sum + (item.durationMin || 0), 0)
-
-  // First get current metadata
-  const { data: currentData } = await supabase
-    .from('universal_transactions')
-    .select('metadata')
-    .eq('id', appointmentId)
-    .eq('organization_id', organizationId)
-    .single()
-
-  const currentMetadata = currentData?.metadata || {}
-  const updatedMetadata = {
-    ...(typeof currentMetadata === 'object' ? currentMetadata : {}),
-    total_service_duration_minutes: totalDuration,
-    line_items_count: items.length,
-    updated_at: new Date().toISOString()
-  }
+  ]
 
-  const { error: updateError } = await supabase
-    .from('universal_transactions')
-    .update({
-      total_amount: totalAmount,
-      metadata: updatedMetadata
-    })
-    .eq('id', appointmentId)
-    .eq('organization_id', organizationId)
+  // Update dynamic data using batch API
+  await setDynamicDataBatch('', {
+    p_organization_id: organizationId,
+    p_entity_id: entityId,
+    p_smart_code: 'HERA.SALON.APPOINTMENT.DYN.UPDATE.V1',
+    p_fields: dynamicFields
+  })
 
-  if (updateError) {
-    console.error('Error updating appointment total:', updateError)
-    throw new Error(`Failed to update appointment total: ${updateError.message}`)
-  }
+  console.log('‚úÖ Updated appointment with services and price:', {
+    entityId,
+    serviceCount: serviceIds.length,
+    totalAmount
+  })
 }
diff --git a/src/lib/universal-api-v2-client.ts b/src/lib/universal-api-v2-client.ts
index feb02068..29d07d9a 100644
--- a/src/lib/universal-api-v2-client.ts
+++ b/src/lib/universal-api-v2-client.ts
@@ -67,6 +67,8 @@ export async function getEntities(
     p_smart_code?: string
     p_parent_entity_id?: string
     p_status?: string | null
+    p_include_relationships?: boolean
+    p_include_dynamic?: boolean
   }
 ) {
   const url = baseUrl || getBaseUrl()
@@ -80,6 +82,13 @@ export async function getEntities(
   if (params.p_status !== undefined) {
     qs.set('p_status', params.p_status || '')
   }
+  // Include relationships and dynamic data flags
+  if (params.p_include_relationships !== undefined) {
+    qs.set('p_include_relationships', params.p_include_relationships.toString())
+  }
+  if (params.p_include_dynamic !== undefined) {
+    qs.set('p_include_dynamic', params.p_include_dynamic.toString())
+  }
 
   const authHeaders = await getAuthHeaders()
   const res = await fetch(`${url}/api/v2/entities?${qs.toString()}`, {
diff --git a/src/types/hera-database.types.ts b/src/types/hera-database.types.ts
index 86019a07..bfd2e933 100644
--- a/src/types/hera-database.types.ts
+++ b/src/types/hera-database.types.ts
@@ -1,5 +1,5 @@
 // HERA Database Types - Auto-generated from actual schema
-// Generated: 2025-10-06T10:09:32.141Z
+// Generated: 2025-10-06T12:05:39.885Z
 // Run 'node mcp-server/schema-introspection.js' to update
 
 export interface CoreOrganizations {
