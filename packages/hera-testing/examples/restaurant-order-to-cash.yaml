id: restaurant-order-to-cash-basic
title: Restaurant Order-to-Cash Basic Flow
description: Complete restaurant order workflow from customer order to payment completion
industry: restaurant
version: 1.0.0
author: HERA Testing Framework

context:
  tenant: marios-restaurant-test
  organization_id: "{{test_org_id}}"
  currency: USD
  timezone: UTC
  locale: en-US
  fiscal_year: 2024
  clock: "2024-03-15T14:30:00Z"
  smart_code_prefix: HERA.TEST.REST
  industry: restaurant

personas:
  server:
    role: sales
    organization_id: "{{test_org_id}}"
    permissions: ["orders:create", "orders:read", "menu:read"]
  
  kitchen:
    role: user
    organization_id: "{{test_org_id}}"
    permissions: ["orders:read", "kitchen:update", "inventory:read"]
  
  cashier:
    role: manager
    organization_id: "{{test_org_id}}"
    permissions: ["orders:read", "orders:update", "payments:create", "cash:access"]

setup:
  - action_type: create_entity
    data:
      entity_type: customer
      entity_name: John Smith
      entity_code: CUST-001
      smart_code: HERA.CRM.CUST.ENT.PROF.v1
      dynamic_fields:
        phone: "+1-555-1234"
        table_number: 12
    store_as: customer
    
  - action_type: create_entity
    data:
      entity_type: product
      entity_name: Margherita Pizza
      entity_code: PIZZA-MARG
      smart_code: HERA.REST.MENU.ITEM.v1
      dynamic_fields:
        price: 18.99
        category: "Main Course"
        ingredients: ["tomato", "mozzarella", "basil"]
        cook_time: 15
    store_as: pizza_product
    
  - action_type: create_entity
    data:
      entity_type: product
      entity_name: Caesar Salad
      entity_code: SALAD-CAESAR
      smart_code: HERA.REST.MENU.ITEM.v1
      dynamic_fields:
        price: 12.99
        category: "Appetizer"
        ingredients: ["lettuce", "parmesan", "croutons", "caesar_dressing"]
        cook_time: 5
    store_as: salad_product

steps:
  - id: create_order
    description: Server takes customer order at table 12
    persona: server
    actions:
      - action_type: create_transaction
        data:
          transaction_type: sale
          transaction_code: "ORDER-{{timestamp}}"
          smart_code: HERA.REST.SALE.ORDER.v1
          reference_entity_id: "{{customer.id}}"
          metadata:
            table_number: 12
            server_id: "{{server.entity_id}}"
            order_type: "dine_in"
          line_items:
            - line_number: 1
              line_entity_id: "{{pizza_product.id}}"
              quantity: 1
              unit_price: 18.99
              line_amount: 18.99
              smart_code: HERA.REST.ORDER.LINE.MAIN.v1
              metadata:
                category: "Main Course"
                special_instructions: "Extra basil"
            - line_number: 2
              line_entity_id: "{{salad_product.id}}"
              quantity: 1
              unit_price: 12.99
              line_amount: 12.99
              smart_code: HERA.REST.ORDER.LINE.APP.v1
              metadata:
                category: "Appetizer"
        store_as: order
    timeout: 10000

  - id: order_to_kitchen
    description: Order is sent to kitchen display system
    persona: server
    actions:
      - action_type: create_relationship
        data:
          from_entity_id: "{{order.id}}"
          to_entity_id: "{{kitchen_status.id}}"
          relationship_type: has_status
          smart_code: HERA.WORKFLOW.STATUS.ASSIGN.v1
          relationship_data:
            status: "in_kitchen"
            timestamp: "{{clock}}"
            assigned_by: "{{server.entity_id}}"

  - id: kitchen_preparation
    description: Kitchen staff prepares the order
    persona: kitchen
    actions:
      - action_type: set_dynamic_field
        entity_id: "{{order.id}}"
        field_name: prep_start_time
        field_value: "{{clock}}"
        smart_code: HERA.REST.KITCHEN.PREP.START.v1
        
      - action_type: wait
        duration: 2000
        condition: "kitchen_preparation_simulation"
        
      - action_type: set_dynamic_field
        entity_id: "{{order.id}}"
        field_name: prep_end_time
        field_value: "{{clock+900}}" # 15 minutes later
        smart_code: HERA.REST.KITCHEN.PREP.END.v1

  - id: order_ready
    description: Order is marked as ready for service
    persona: kitchen
    actions:
      - action_type: create_relationship
        data:
          from_entity_id: "{{order.id}}"
          to_entity_id: "{{ready_status.id}}"
          relationship_type: has_status
          smart_code: HERA.WORKFLOW.STATUS.ASSIGN.v1
          relationship_data:
            status: "ready_to_serve"
            completed_by: "{{kitchen.entity_id}}"
            completion_time: "{{clock+900}}"

  - id: serve_order
    description: Server delivers order to customer table
    persona: server
    actions:
      - action_type: create_relationship
        data:
          from_entity_id: "{{order.id}}"
          to_entity_id: "{{served_status.id}}"
          relationship_type: has_status
          smart_code: HERA.WORKFLOW.STATUS.ASSIGN.v1
          relationship_data:
            status: "served"
            served_by: "{{server.entity_id}}"
            serve_time: "{{clock+1200}}"

  - id: generate_bill
    description: Cashier generates bill for the customer
    persona: cashier
    actions:
      - action_type: set_dynamic_field
        entity_id: "{{order.id}}"
        field_name: subtotal
        field_value: 31.98
        smart_code: HERA.REST.BILL.SUBTOTAL.v1
        
      - action_type: set_dynamic_field
        entity_id: "{{order.id}}"
        field_name: tax_amount
        field_value: 2.56 # 8% tax
        smart_code: HERA.REST.BILL.TAX.v1
        
      - action_type: set_dynamic_field
        entity_id: "{{order.id}}"
        field_name: total_amount
        field_value: 34.54
        smart_code: HERA.REST.BILL.TOTAL.v1

  - id: process_payment
    description: Customer pays the bill
    persona: cashier
    actions:
      - action_type: create_transaction
        data:
          transaction_type: payment
          transaction_code: "PAY-{{timestamp}}"
          smart_code: HERA.FIN.PAY.CASH.v1
          total_amount: 34.54
          reference_entity_id: "{{order.id}}"
          metadata:
            payment_method: "cash"
            amount_tendered: 40.00
            change_given: 5.46
            processed_by: "{{cashier.entity_id}}"
        store_as: payment
        
      - action_type: create_relationship
        data:
          from_entity_id: "{{order.id}}"
          to_entity_id: "{{paid_status.id}}"
          relationship_type: has_status
          smart_code: HERA.WORKFLOW.STATUS.ASSIGN.v1
          relationship_data:
            status: "paid"
            payment_id: "{{payment.id}}"
            paid_at: "{{clock+1800}}"

assertions:
  - type: database
    assertions:
      - table: universal_transactions
        condition: exists
        filters:
          transaction_type: sale
          smart_code: HERA.REST.SALE.ORDER.v1
        expected: true
      
      - table: universal_transactions
        condition: exists
        filters:
          transaction_type: payment
          smart_code: HERA.FIN.PAY.CASH.v1
        expected: true
        
      - table: universal_transaction_lines
        condition: count
        filters:
          line_amount: 18.99
        expected: 1
        
      - table: core_relationships
        condition: count
        filters:
          relationship_type: has_status
        expected: 4 # in_kitchen, ready_to_serve, served, paid

  - type: business
    assertions:
      - oracle: workflow_status
        expected: "paid"
        
      - oracle: accounting_equation
        expected: true # Assets = Liabilities + Equity
        tolerance: 0.01
        
      - oracle: smart_code_validation
        expected: true # All smart codes follow HERA patterns

  - type: ui
    assertions:
      - selector: "[data-testid='order-status']"
        condition: contains
        value: "Paid"
        timeout: 5000

cleanup:
  - action_type: api_call
    endpoint: "/api/v1/test/cleanup"
    method: POST
    data:
      entities: ["{{customer.id}}", "{{pizza_product.id}}", "{{salad_product.id}}"]
      transactions: ["{{order.id}}", "{{payment.id}}"]

metadata:
  tags: ["restaurant", "order-to-cash", "pos", "kitchen", "payment"]
  priority: critical
  estimated_duration: 45 # seconds
  requires_auth: true
  requires_data: true
  browser_support: ["chromium", "firefox", "webkit"]
  mobile_support: true