"use strict";
/**
 * HERA DNA SDK Builders
 * Type-safe builders for creating DNA-compliant objects
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DNA = exports.SmartCodeBuilder = exports.RelationshipBuilder = exports.DynamicDataBuilder = exports.TransactionBuilder = exports.EntityBuilder = void 0;
const types_1 = require("./types");
/**
 * Entity Builder - Type-safe entity creation
 */
class EntityBuilder {
    constructor(organizationId) {
        this.entity = {};
        this.entity.organization_id = organizationId;
    }
    id(id) {
        this.entity.id = (0, types_1.validateEntityId)(id);
        return this;
    }
    type(type) {
        this.entity.entity_type = type;
        return this;
    }
    name(name) {
        this.entity.entity_name = name;
        return this;
    }
    code(code) {
        this.entity.entity_code = code;
        return this;
    }
    smartCode(code) {
        this.entity.smart_code = typeof code === 'string' ? (0, types_1.createSmartCode)(code) : code;
        return this;
    }
    metadata(metadata) {
        this.entity.metadata = metadata;
        return this;
    }
    build() {
        if (!this.entity.entity_type) {
            throw new Error('Entity type is required');
        }
        if (!this.entity.entity_name) {
            throw new Error('Entity name is required');
        }
        if (!this.entity.smart_code) {
            throw new Error('Smart code is required');
        }
        return {
            ...this.entity,
            id: this.entity.id || '', // Will be generated by database
            created_at: new Date(),
            updated_at: new Date()
        };
    }
}
exports.EntityBuilder = EntityBuilder;
/**
 * Transaction Builder - Type-safe transaction creation
 */
class TransactionBuilder {
    constructor(organizationId) {
        this.transaction = {};
        this.transaction.organization_id = organizationId;
    }
    id(id) {
        this.transaction.id = (0, types_1.validateTransactionId)(id);
        return this;
    }
    type(type) {
        this.transaction.transaction_type = type;
        return this;
    }
    code(code) {
        this.transaction.transaction_code = code;
        return this;
    }
    date(date) {
        this.transaction.transaction_date = date;
        return this;
    }
    smartCode(code) {
        this.transaction.smart_code = typeof code === 'string' ? (0, types_1.createSmartCode)(code) : code;
        return this;
    }
    fromEntity(id) {
        this.transaction.from_entity_id = typeof id === 'string' ? (0, types_1.validateEntityId)(id) : id;
        return this;
    }
    toEntity(id) {
        this.transaction.to_entity_id = typeof id === 'string' ? (0, types_1.validateEntityId)(id) : id;
        return this;
    }
    amount(amount) {
        this.transaction.total_amount = amount;
        return this;
    }
    currency(currency) {
        if (currency.length !== 3) {
            throw new Error('Currency must be 3 characters');
        }
        this.transaction.currency = currency.toUpperCase();
        return this;
    }
    metadata(metadata) {
        this.transaction.metadata = metadata;
        return this;
    }
    build() {
        if (!this.transaction.transaction_type) {
            throw new Error('Transaction type is required');
        }
        if (!this.transaction.transaction_code) {
            throw new Error('Transaction code is required');
        }
        if (!this.transaction.transaction_date) {
            throw new Error('Transaction date is required');
        }
        if (!this.transaction.smart_code) {
            throw new Error('Smart code is required');
        }
        return {
            ...this.transaction,
            id: this.transaction.id || '', // Will be generated by database
            created_at: new Date(),
            updated_at: new Date()
        };
    }
}
exports.TransactionBuilder = TransactionBuilder;
/**
 * Dynamic Data Builder - Type-safe dynamic field creation
 */
class DynamicDataBuilder {
    constructor(organizationId, entityId) {
        this.data = {};
        this.data.organization_id = organizationId;
        this.data.entity_id = entityId;
    }
    field(name) {
        this.data.field_name = name;
        return this;
    }
    text(value) {
        this.data.field_value_text = value;
        return this;
    }
    number(value) {
        this.data.field_value_number = value;
        return this;
    }
    date(value) {
        this.data.field_value_date = value;
        return this;
    }
    boolean(value) {
        this.data.field_value_boolean = value;
        return this;
    }
    json(value) {
        this.data.field_value_json = value;
        return this;
    }
    smartCode(code) {
        this.data.smart_code = typeof code === 'string' ? (0, types_1.createSmartCode)(code) : code;
        return this;
    }
    build() {
        if (!this.data.field_name) {
            throw new Error('Field name is required');
        }
        if (!this.data.smart_code) {
            throw new Error('Smart code is required');
        }
        const hasValue = this.data.field_value_text !== undefined ||
            this.data.field_value_number !== undefined ||
            this.data.field_value_date !== undefined ||
            this.data.field_value_boolean !== undefined ||
            this.data.field_value_json !== undefined;
        if (!hasValue) {
            throw new Error('At least one field value must be set');
        }
        return {
            ...this.data,
            id: '', // Will be generated by database
            created_at: new Date(),
            updated_at: new Date()
        };
    }
}
exports.DynamicDataBuilder = DynamicDataBuilder;
/**
 * Relationship Builder - Type-safe relationship creation
 */
class RelationshipBuilder {
    constructor(organizationId) {
        this.relationship = {};
        this.relationship.organization_id = organizationId;
    }
    from(entityId) {
        this.relationship.from_entity_id = typeof entityId === 'string' ? (0, types_1.validateEntityId)(entityId) : entityId;
        return this;
    }
    to(entityId) {
        this.relationship.to_entity_id = typeof entityId === 'string' ? (0, types_1.validateEntityId)(entityId) : entityId;
        return this;
    }
    type(type) {
        this.relationship.relationship_type = type;
        return this;
    }
    smartCode(code) {
        this.relationship.smart_code = typeof code === 'string' ? (0, types_1.createSmartCode)(code) : code;
        return this;
    }
    validFrom(date) {
        this.relationship.valid_from = date;
        return this;
    }
    validTo(date) {
        this.relationship.valid_to = date;
        return this;
    }
    metadata(metadata) {
        this.relationship.metadata = metadata;
        return this;
    }
    build() {
        if (!this.relationship.from_entity_id) {
            throw new Error('From entity ID is required');
        }
        if (!this.relationship.to_entity_id) {
            throw new Error('To entity ID is required');
        }
        if (!this.relationship.relationship_type) {
            throw new Error('Relationship type is required');
        }
        if (!this.relationship.smart_code) {
            throw new Error('Smart code is required');
        }
        return {
            ...this.relationship,
            id: '', // Will be generated by database
            created_at: new Date(),
            updated_at: new Date()
        };
    }
}
exports.RelationshipBuilder = RelationshipBuilder;
/**
 * Smart Code Builder - Type-safe smart code creation
 */
class SmartCodeBuilder {
    constructor() {
        this.components = {};
    }
    industry(industry) {
        this.components.industry = types_1.INDUSTRY_TYPES[industry];
        return this;
    }
    module(module) {
        this.components.module = types_1.MODULE_TYPES[module];
        return this;
    }
    function(func) {
        if (!func || func.length < 2) {
            throw new Error('Function must be at least 2 characters');
        }
        this.components.function = func.toUpperCase();
        return this;
    }
    type(type) {
        if (!type || type.length < 2) {
            throw new Error('Type must be at least 2 characters');
        }
        this.components.type = type.toUpperCase();
        return this;
    }
    version(version) {
        if (version < 1 || version > 999) {
            throw new Error('Version must be between 1 and 999');
        }
        this.components.version = version;
        return this;
    }
    build() {
        if (!this.components.industry) {
            throw new Error('Industry is required');
        }
        if (!this.components.module) {
            throw new Error('Module is required');
        }
        if (!this.components.function) {
            throw new Error('Function is required');
        }
        if (!this.components.type) {
            throw new Error('Type is required');
        }
        if (!this.components.version) {
            this.components.version = 1; // Default to v1
        }
        const code = `HERA.${this.components.industry}.${this.components.module}.${this.components.function}.${this.components.type}.v${this.components.version}`;
        return (0, types_1.createSmartCode)(code);
    }
}
exports.SmartCodeBuilder = SmartCodeBuilder;
/**
 * Factory functions for quick builder creation
 */
exports.DNA = {
    entity: (orgId) => new EntityBuilder(orgId),
    transaction: (orgId) => new TransactionBuilder(orgId),
    dynamicData: (orgId, entityId) => new DynamicDataBuilder(orgId, entityId),
    relationship: (orgId) => new RelationshipBuilder(orgId),
    smartCode: () => new SmartCodeBuilder()
};
//# sourceMappingURL=builders.js.map