/**
 * HERA DNA SDK Builders
 * Type-safe builders for creating DNA-compliant objects
 */

import {
  SmartCode,
  OrganizationId,
  EntityId,
  TransactionId,
  CoreEntity,
  UniversalTransaction,
  CoreDynamicData,
  CoreRelationship,
  SmartCodeComponents,
  INDUSTRY_TYPES,
  MODULE_TYPES,
  createSmartCode,
  validateEntityId,
  validateTransactionId
} from './types';

/**
 * Entity Builder - Type-safe entity creation
 */
export class EntityBuilder {
  private entity: Partial<CoreEntity> = {};

  constructor(organizationId: OrganizationId) {
    this.entity.organization_id = organizationId;
  }

  id(id: string): this {
    this.entity.id = validateEntityId(id);
    return this;
  }

  type(type: string): this {
    this.entity.entity_type = type;
    return this;
  }

  name(name: string): this {
    this.entity.entity_name = name;
    return this;
  }

  code(code: string): this {
    this.entity.entity_code = code;
    return this;
  }

  smartCode(code: SmartCode | string): this {
    this.entity.smart_code = typeof code === 'string' ? createSmartCode(code) : code;
    return this;
  }

  metadata(metadata: Record<string, unknown>): this {
    this.entity.metadata = metadata;
    return this;
  }

  build(): CoreEntity {
    if (!this.entity.entity_type) {
      throw new Error('Entity type is required');
    }
    if (!this.entity.entity_name) {
      throw new Error('Entity name is required');
    }
    if (!this.entity.smart_code) {
      throw new Error('Smart code is required');
    }

    return {
      ...this.entity,
      id: this.entity.id || ('' as EntityId), // Will be generated by database
      created_at: new Date(),
      updated_at: new Date()
    } as CoreEntity;
  }
}

/**
 * Transaction Builder - Type-safe transaction creation
 */
export class TransactionBuilder {
  private transaction: Partial<UniversalTransaction> = {};

  constructor(organizationId: OrganizationId) {
    this.transaction.organization_id = organizationId;
  }

  id(id: string): this {
    this.transaction.id = validateTransactionId(id);
    return this;
  }

  type(type: string): this {
    this.transaction.transaction_type = type;
    return this;
  }

  code(code: string): this {
    this.transaction.transaction_code = code;
    return this;
  }

  date(date: Date): this {
    this.transaction.transaction_date = date;
    return this;
  }

  smartCode(code: SmartCode | string): this {
    this.transaction.smart_code = typeof code === 'string' ? createSmartCode(code) : code;
    return this;
  }

  fromEntity(id: EntityId | string): this {
    this.transaction.from_entity_id = typeof id === 'string' ? validateEntityId(id) : id;
    return this;
  }

  toEntity(id: EntityId | string): this {
    this.transaction.to_entity_id = typeof id === 'string' ? validateEntityId(id) : id;
    return this;
  }

  amount(amount: number): this {
    this.transaction.total_amount = amount;
    return this;
  }

  currency(currency: string): this {
    if (currency.length !== 3) {
      throw new Error('Currency must be 3 characters');
    }
    this.transaction.currency = currency.toUpperCase();
    return this;
  }

  metadata(metadata: Record<string, unknown>): this {
    this.transaction.metadata = metadata;
    return this;
  }

  build(): UniversalTransaction {
    if (!this.transaction.transaction_type) {
      throw new Error('Transaction type is required');
    }
    if (!this.transaction.transaction_code) {
      throw new Error('Transaction code is required');
    }
    if (!this.transaction.transaction_date) {
      throw new Error('Transaction date is required');
    }
    if (!this.transaction.smart_code) {
      throw new Error('Smart code is required');
    }

    return {
      ...this.transaction,
      id: this.transaction.id || ('' as TransactionId), // Will be generated by database
      created_at: new Date(),
      updated_at: new Date()
    } as UniversalTransaction;
  }
}

/**
 * Dynamic Data Builder - Type-safe dynamic field creation
 */
export class DynamicDataBuilder {
  private data: Partial<CoreDynamicData> = {};

  constructor(
    organizationId: OrganizationId,
    entityId: EntityId
  ) {
    this.data.organization_id = organizationId;
    this.data.entity_id = entityId;
  }

  field(name: string): this {
    this.data.field_name = name;
    return this;
  }

  text(value: string): this {
    this.data.field_value_text = value;
    return this;
  }

  number(value: number): this {
    this.data.field_value_number = value;
    return this;
  }

  date(value: Date): this {
    this.data.field_value_date = value;
    return this;
  }

  boolean(value: boolean): this {
    this.data.field_value_boolean = value;
    return this;
  }

  json(value: unknown): this {
    this.data.field_value_json = value;
    return this;
  }

  smartCode(code: SmartCode | string): this {
    this.data.smart_code = typeof code === 'string' ? createSmartCode(code) : code;
    return this;
  }

  build(): CoreDynamicData {
    if (!this.data.field_name) {
      throw new Error('Field name is required');
    }
    if (!this.data.smart_code) {
      throw new Error('Smart code is required');
    }

    const hasValue = 
      this.data.field_value_text !== undefined ||
      this.data.field_value_number !== undefined ||
      this.data.field_value_date !== undefined ||
      this.data.field_value_boolean !== undefined ||
      this.data.field_value_json !== undefined;

    if (!hasValue) {
      throw new Error('At least one field value must be set');
    }

    return {
      ...this.data,
      id: '', // Will be generated by database
      created_at: new Date(),
      updated_at: new Date()
    } as CoreDynamicData;
  }
}

/**
 * Relationship Builder - Type-safe relationship creation
 */
export class RelationshipBuilder {
  private relationship: Partial<CoreRelationship> = {};

  constructor(organizationId: OrganizationId) {
    this.relationship.organization_id = organizationId;
  }

  from(entityId: EntityId | string): this {
    this.relationship.from_entity_id = typeof entityId === 'string' ? validateEntityId(entityId) : entityId;
    return this;
  }

  to(entityId: EntityId | string): this {
    this.relationship.to_entity_id = typeof entityId === 'string' ? validateEntityId(entityId) : entityId;
    return this;
  }

  type(type: string): this {
    this.relationship.relationship_type = type;
    return this;
  }

  smartCode(code: SmartCode | string): this {
    this.relationship.smart_code = typeof code === 'string' ? createSmartCode(code) : code;
    return this;
  }

  validFrom(date: Date): this {
    this.relationship.valid_from = date;
    return this;
  }

  validTo(date: Date): this {
    this.relationship.valid_to = date;
    return this;
  }

  metadata(metadata: Record<string, unknown>): this {
    this.relationship.metadata = metadata;
    return this;
  }

  build(): CoreRelationship {
    if (!this.relationship.from_entity_id) {
      throw new Error('From entity ID is required');
    }
    if (!this.relationship.to_entity_id) {
      throw new Error('To entity ID is required');
    }
    if (!this.relationship.relationship_type) {
      throw new Error('Relationship type is required');
    }
    if (!this.relationship.smart_code) {
      throw new Error('Smart code is required');
    }

    return {
      ...this.relationship,
      id: '', // Will be generated by database
      created_at: new Date(),
      updated_at: new Date()
    } as CoreRelationship;
  }
}

/**
 * Smart Code Builder - Type-safe smart code creation
 */
export class SmartCodeBuilder {
  private components: Partial<SmartCodeComponents> = {};

  industry(industry: keyof typeof INDUSTRY_TYPES): this {
    this.components.industry = INDUSTRY_TYPES[industry];
    return this;
  }

  module(module: keyof typeof MODULE_TYPES): this {
    this.components.module = MODULE_TYPES[module];
    return this;
  }

  function(func: string): this {
    if (!func || func.length < 2) {
      throw new Error('Function must be at least 2 characters');
    }
    this.components.function = func.toUpperCase();
    return this;
  }

  type(type: string): this {
    if (!type || type.length < 2) {
      throw new Error('Type must be at least 2 characters');
    }
    this.components.type = type.toUpperCase();
    return this;
  }

  version(version: number): this {
    if (version < 1 || version > 999) {
      throw new Error('Version must be between 1 and 999');
    }
    this.components.version = version;
    return this;
  }

  build(): SmartCode {
    if (!this.components.industry) {
      throw new Error('Industry is required');
    }
    if (!this.components.module) {
      throw new Error('Module is required');
    }
    if (!this.components.function) {
      throw new Error('Function is required');
    }
    if (!this.components.type) {
      throw new Error('Type is required');
    }
    if (!this.components.version) {
      this.components.version = 1; // Default to v1
    }

    const code = `HERA.${this.components.industry}.${this.components.module}.${this.components.function}.${this.components.type}.v${this.components.version}`;
    return createSmartCode(code);
  }
}

/**
 * Factory functions for quick builder creation
 */
export const DNA = {
  entity: (orgId: OrganizationId) => new EntityBuilder(orgId),
  transaction: (orgId: OrganizationId) => new TransactionBuilder(orgId),
  dynamicData: (orgId: OrganizationId, entityId: EntityId) => new DynamicDataBuilder(orgId, entityId),
  relationship: (orgId: OrganizationId) => new RelationshipBuilder(orgId),
  smartCode: () => new SmartCodeBuilder()
};