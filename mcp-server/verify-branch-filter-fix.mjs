#!/usr/bin/env node
/**
 * Verify Branch Filter Fix Deployment
 * Tests that target_entity_id filtering is working correctly
 */

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

config()

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

const TEST_ORG_ID = process.env.DEFAULT_ORGANIZATION_ID
const TEST_USER_ID = process.env.DEFAULT_USER_ENTITY_ID || '00000000-0000-0000-0000-000000000001'

console.log('\n‚úÖ VERIFYING BRANCH FILTER FIX DEPLOYMENT')
console.log('='.repeat(60))

// Step 1: Verify function was updated
console.log('\nüìã Step 1: Checking function deployment...\n')

const { data: funcCheck, error: funcError } = await supabase.rpc('hera_txn_crud_v1', {
  p_action: 'QUERY',
  p_actor_user_id: TEST_USER_ID,
  p_organization_id: TEST_ORG_ID,
  p_payload: {
    transaction_type: 'GL_JOURNAL',
    limit: 1
  }
})

if (funcError) {
  console.log('‚ùå Function call failed:', funcError.message)
  console.log('   Make sure the function was deployed correctly')
  process.exit(1)
}

console.log('‚úÖ Function is callable and responding')

// Step 2: Get all transactions to find unique branches
console.log('\nüìã Step 2: Finding transactions and branches...\n')

const { data: allData, error: allError } = await supabase.rpc('hera_txn_crud_v1', {
  p_action: 'QUERY',
  p_actor_user_id: TEST_USER_ID,
  p_organization_id: TEST_ORG_ID,
  p_payload: {
    transaction_type: 'GL_JOURNAL',
    smart_code: 'HERA.SALON.FINANCE.TXN.JOURNAL.POSSALE.v1',
    limit: 1000
  }
})

if (allError) {
  console.log('‚ùå Query failed:', allError.message)
  process.exit(1)
}

const allTransactions = allData?.data?.data?.items || []

console.log('üìä Database Status:')
console.log('  Total GL_JOURNAL transactions:', allTransactions.length)

if (allTransactions.length === 0) {
  console.log('\n‚ö†Ô∏è  No transactions found in database')
  console.log('   Branch filter fix is deployed correctly')
  console.log('   Create some POS sales to test branch filtering')
  console.log('\n‚úÖ DEPLOYMENT VERIFIED (no test data available)')
  process.exit(0)
}

// Find unique branches
const branches = {}
allTransactions.forEach(t => {
  const branchId = t.target_entity_id
  if (branchId) {
    if (!branches[branchId]) {
      branches[branchId] = {
        id: branchId,
        count: 0
      }
    }
    branches[branchId].count++
  }
})

const branchList = Object.values(branches)

console.log('  Unique branches found:', branchList.length)
console.log('\nüìç Branches:')
branchList.forEach((branch, index) => {
  console.log(`  ${index + 1}. ${branch.id.substring(0, 8)}... (${branch.count} transactions)`)
})

// Step 3: Test branch filtering
if (branchList.length === 0) {
  console.log('\n‚ö†Ô∏è  No target_entity_id (branch) found in transactions')
  console.log('   This might mean transactions were not created with branch info')
  console.log('   Branch filter is deployed but cannot be tested without branch data')
  console.log('\n‚úÖ DEPLOYMENT VERIFIED (no branch data to test with)')
  process.exit(0)
}

console.log('\nüìã Step 3: Testing branch filter functionality...\n')

// Test with first branch
const testBranch = branchList[0]

console.log(`Testing filter with branch: ${testBranch.id.substring(0, 8)}...`)
console.log(`Expected transaction count: ${testBranch.count}`)

const { data: branchData, error: branchError } = await supabase.rpc('hera_txn_crud_v1', {
  p_action: 'QUERY',
  p_actor_user_id: TEST_USER_ID,
  p_organization_id: TEST_ORG_ID,
  p_payload: {
    transaction_type: 'GL_JOURNAL',
    smart_code: 'HERA.SALON.FINANCE.TXN.JOURNAL.POSSALE.v1',
    target_entity_id: testBranch.id,  // ‚úÖ BRANCH FILTER
    limit: 1000
  }
})

if (branchError) {
  console.log('\n‚ùå Branch filter query failed:', branchError.message)
  process.exit(1)
}

const branchTransactions = branchData?.data?.data?.items || []

console.log(`\nüìä Filter Results:`)
console.log(`  Without filter: ${allTransactions.length} transactions`)
console.log(`  With branch filter: ${branchTransactions.length} transactions`)

// Verify all returned transactions match the branch
const wrongBranch = branchTransactions.filter(t => t.target_entity_id !== testBranch.id)

if (wrongBranch.length > 0) {
  console.log(`\n‚ùå BRANCH FILTER FIX FAILED!`)
  console.log(`   Found ${wrongBranch.length} transactions from wrong branch`)
  console.log(`   Expected branch: ${testBranch.id}`)
  console.log(`   Got branches:`, [...new Set(wrongBranch.map(t => t.target_entity_id))])
  process.exit(1)
}

// Check if filtering reduced the count
if (branchList.length > 1) {
  // Multiple branches exist, so filter should reduce count
  if (branchTransactions.length >= allTransactions.length) {
    console.log(`\n‚ö†Ô∏è  WARNING: Filter didn't reduce transaction count`)
    console.log(`   This might mean all transactions are from the same branch`)
  } else {
    console.log(`\n‚úÖ BRANCH FILTER FIX VERIFIED!`)
    console.log(`   Filter reduced results from ${allTransactions.length} to ${branchTransactions.length}`)
    console.log(`   All filtered transactions are from correct branch`)
  }
} else {
  // Only one branch, so counts should match
  if (branchTransactions.length === allTransactions.length) {
    console.log(`\n‚úÖ BRANCH FILTER FIX VERIFIED!`)
    console.log(`   All transactions are from the same branch`)
    console.log(`   Filter is working correctly (results match expected count)`)
  } else {
    console.log(`\n‚ö†Ô∏è  WARNING: Transaction count mismatch`)
    console.log(`   Expected: ${testBranch.count}, Got: ${branchTransactions.length}`)
  }
}

// Step 4: Test "All Branches" (null filter)
console.log('\nüìã Step 4: Testing "All Branches" (no branch filter)...\n')

const { data: noBranchData, error: noBranchError } = await supabase.rpc('hera_txn_crud_v1', {
  p_action: 'QUERY',
  p_actor_user_id: TEST_USER_ID,
  p_organization_id: TEST_ORG_ID,
  p_payload: {
    transaction_type: 'GL_JOURNAL',
    smart_code: 'HERA.SALON.FINANCE.TXN.JOURNAL.POSSALE.v1',
    // No target_entity_id - should return all branches
    limit: 1000
  }
})

if (noBranchError) {
  console.log('‚ùå No-branch query failed:', noBranchError.message)
  process.exit(1)
}

const noBranchTransactions = noBranchData?.data?.data?.items || []

console.log('  Transactions without branch filter:', noBranchTransactions.length)

if (noBranchTransactions.length === allTransactions.length) {
  console.log('‚úÖ "All Branches" returns all transactions')
} else {
  console.log('‚ö†Ô∏è  Transaction count mismatch')
  console.log(`   Expected: ${allTransactions.length}, Got: ${noBranchTransactions.length}`)
}

console.log('\n' + '='.repeat(60))
console.log('‚úÖ DEPLOYMENT VERIFICATION COMPLETE')
console.log('='.repeat(60))
console.log('\nüìù Next Steps:')
console.log('  1. Go to /salon/reports/sales/daily')
console.log('  2. Select "All Branches" - should see all transactions')
console.log('  3. Select specific branch - should see fewer transactions')
console.log('  4. Verify summary cards update when changing branches')
console.log('  5. Test combining branch + date filters')
console.log('\n')
