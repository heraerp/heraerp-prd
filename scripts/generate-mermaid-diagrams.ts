/* eslint-disable no-console */
import fs from 'node:fs'
import path from 'node:path'
import { execSync } from 'node:child_process'

// Import from your actual registry
import { entityPresets } from '../src/hooks/entityPresets'
import type { Role, DynamicFieldDefUI, RelationshipDefUI } from '../src/hooks/entityPresets'

// ---------- Types matching your actual preset interface ----------
type EntityPreset = {
  entity_type: string
  labels?: { singular?: string; plural?: string }
  permissions?: {
    create?: (role: Role) => boolean
    edit?: (role: Role) => boolean
    delete?: (role: Role) => boolean
    view?: (role: Role) => boolean
  }
  dynamicFields?: DynamicFieldDefUI[]
  relationships?: RelationshipDefUI[]
}

// ---------- Helpers ----------
const OUT_DIR = path.resolve(process.cwd(), 'docs/diagrams')
const ensureDir = (p: string) => fs.existsSync(p) || fs.mkdirSync(p, { recursive: true })

const esc = (s?: string) =>
  (s ?? '')
    .replaceAll('\n', ' ')
    .replaceAll('|', '\\|')
    .replaceAll('[', '(')
    .replaceAll(']', ')')

const prettyName = (presetKey: string, preset: EntityPreset) =>
  preset.labels?.singular || preset.entity_type || presetKey

function hasMmdc(): boolean {
  try {
    execSync('npx mmdc -V', { stdio: 'ignore' })
    return true
  } catch {
    return false
  }
}

// ---------- Mermaid builders ----------
function buildFieldsSection(presetKey: string, preset: EntityPreset): string {
  const title = esc(prettyName(presetKey, preset))
  const fields = (preset.dynamicFields ?? []).map((f) => {
    const label = f.ui?.label || f.name
    return `    ${preset.entity_type} --> ${preset.entity_type}__${f.name}["${esc(label)}\\n:${f.type}\\n${esc(f.smart_code)}"]`
  })

  if (fields.length === 0) {
    return `    %% No dynamic fields defined for ${preset.entity_type}`
  }

  return [
    `  subgraph "${title} — Dynamic Fields"`,
    `    classDef fld fill:#f6f8fa,stroke:#c9d1d9,stroke-width:1px,color:#444;`,
    ...fields,
    ...((preset.dynamicFields ?? []).map((f) => `    class ${preset.entity_type}__${f.name} fld;`)),
    `  end`,
  ].join('\n')
}

function buildRelationshipsSection(presetKey: string, preset: EntityPreset): string {
  const rels = preset.relationships ?? []
  if (rels.length === 0) return `  %% No relationships for ${preset.entity_type}`

  const lines: string[] = []
  
  for (const r of rels) {
    // Extract target entity type from smart code or use generic ENTITY
    const to = r.smart_code.match(/REL\.(\w+)\./)?.[1] || 'UNKNOWN_TARGET'
    const label = r.ui?.label || r.type
    // Cardinality decoration - use simpler syntax
    const deco = r.cardinality === 'many' ? '-->' : '-->'
    lines.push(
      `  ${preset.entity_type} ${deco} ${to}["${esc(label)}"]`
    )
  }

  lines.push(`  classDef relTarget fill:#fff7ed,stroke:#fdba74,color:#7c2d12,stroke-width:1px;`)
  
  // Apply class to all target entities
  for (const r of rels) {
    const to = r.smart_code.match(/REL\.(\w+)\./)?.[1] || 'UNKNOWN_TARGET'
    lines.push(`  class ${to} relTarget;`)
  }
  
  return lines.join('\n')
}

function buildSmartCodeBadge(preset: EntityPreset): string {
  const codeList = [
    ...(preset.dynamicFields ?? []).map((f) => f.smart_code),
    ...(preset.relationships ?? []).map((r) => r.smart_code),
  ]
  const uniq = Array.from(new Set(codeList)).slice(0, 4)
  if (uniq.length === 0) return ''
  
  // Use a simple text node instead of note syntax
  const bullets = uniq.map((c, i) => `${i + 1}. ${esc(c)}`).join('<br/>')
  return `  ${preset.entity_type}_CODES["Smart Codes:<br/>${bullets}"]
  ${preset.entity_type} -.-> ${preset.entity_type}_CODES
  class ${preset.entity_type}_CODES smartCodeClass;
  classDef smartCodeClass fill:#f0f9ff,stroke:#0ea5e9,color:#0c4a6e,stroke-width:1px,font-size:10px;`
}

function buildEntityHeader(presetKey: string, preset: EntityPreset): string {
  const title = esc(prettyName(presetKey, preset))
  return [
    `  %% Entity root node`,
    `  ${preset.entity_type}["${title}\\n(${preset.entity_type})"]:::entityClass`,
    `  classDef entityClass fill:#eef2ff,stroke:#6366f1,color:#3730a3,stroke-width:1.2px;`,
  ].join('\n')
}

function buildDiagram(presetKey: string, preset: EntityPreset): string {
  const header = `%% Auto-generated by scripts/generate-mermaid-diagrams.ts
%% Preset: ${presetKey}
graph TD
  %% Layout tuning
  linkStyle default stroke-width:1.2px

${buildEntityHeader(presetKey, preset)}

${buildFieldsSection(presetKey, preset)}

${buildRelationshipsSection(presetKey, preset)}

  ${buildSmartCodeBadge(preset)}
`

  return header.trim() + '\n'
}

// Optional: the canonical HERA 6-table architecture diagram
function buildHeraSixTableDiagram(): string {
  return `%% HERA Six-Table Architecture
flowchart LR
  subgraph CORE[Core]
    CO[core_organizations]
    CE[core_entities]
    DD[core_dynamic_data]
    CR[core_relationships]
  end

  subgraph TXN[Transactions]
    UT[universal_transactions]
    UL[universal_transaction_lines]
  end

  CO --> CE
  CE --> DD
  CE --> CR
  UT --> UL

  classDef core fill:#ecfeff,stroke:#06b6d4,color:#0e7490;
  classDef txn  fill:#fff1f2,stroke:#fb7185,color:#9f1239;

  class CO,CE,DD,CR core;
  class UT,UL txn;
`
}

// ---------- Main ----------
async function main() {
  ensureDir(OUT_DIR)

  // Global architecture diagram
  const archFile = path.join(OUT_DIR, `hera-6-tables.mmd`)
  fs.writeFileSync(archFile, buildHeraSixTableDiagram(), 'utf8')
  console.log(`📝 Wrote ${archFile}`)

  const haveMmdc = hasMmdc()
  if (!haveMmdc) {
    console.log('ℹ️  mermaid-cli (mmdc) not found. Will skip SVG generation. Install with:')
    console.log('    npm i -D @mermaid-js/mermaid-cli')
  }

  for (const [key, preset] of Object.entries(entityPresets) as [string, EntityPreset][]) {
    const mmd = buildDiagram(key, preset)
    const file = path.join(OUT_DIR, `${key.toLowerCase()}.mmd`)
    fs.writeFileSync(file, mmd, 'utf8')
    console.log(`📝 Wrote ${file}`)

    if (haveMmdc) {
      const outSvg = file.replace(/\.mmd$/, '.svg')
      try {
        execSync(`npx mmdc -i "${file}" -o "${outSvg}" -b transparent -s 1.0`, { stdio: 'inherit' })
        console.log(`🖼  Rendered ${outSvg}`)
      } catch (e) {
        console.warn(`⚠️  Failed to render ${outSvg}:`, (e as Error).message)
      }
    }
  }

  console.log(`\n✅ Generated diagrams for ${Object.keys(entityPresets).length} entity presets`)
  console.log(`📁 Output directory: ${OUT_DIR}`)
  
  if (haveMmdc) {
    console.log('🖼  SVG files generated successfully')
  } else {
    console.log('💡 Install @mermaid-js/mermaid-cli to generate SVG files')
  }
}

main().catch((e) => {
  console.error(e)
  process.exit(1)
})