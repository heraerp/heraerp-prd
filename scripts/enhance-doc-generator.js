#!/usr/bin/env node

/**
 * Enhanced Documentation Generator with UI Integration
 * Handles automatic page generation from UI interface submissions
 */

const fs = require('fs')
const path = require('path')

class EnhancedDocGenerator {
  constructor() {
    this.apiBase = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000'
    this.generatedDocsDir = './generated-docs'
    this.templateDir = './docs/templates'
    this.generationLog = []
  }

  /**
   * Generate documentation page from UI submission
   */
  async generateFromUISubmission(submissionData) {
    console.log('🚀 Generating documentation from UI submission...')
    
    const {
      area,
      section,
      contentType,
      title,
      description,
      content,
      metadata = {}
    } = submissionData

    try {
      // 1. Create enhanced content with AI improvements
      const enhancedContent = await this.enhanceContentWithAI(content, contentType, area)
      
      // 2. Generate page structure
      const pageStructure = this.generatePageStructure({
        title,
        description,
        content: enhancedContent,
        area,
        section,
        contentType,
        metadata
      })

      // 3. Create page code and file
      const pageCode = this.generatePageCode(title)
      const fileName = `${pageCode}.md`
      const filePath = path.join(this.generatedDocsDir, fileName)

      // Ensure directory exists
      if (!fs.existsSync(this.generatedDocsDir)) {
        fs.mkdirSync(this.generatedDocsDir, { recursive: true })
      }

      // Write the file
      fs.writeFileSync(filePath, pageStructure)

      // 4. Create HERA database entry
      const heraEntity = await this.createHERADocumentationEntity({
        pageCode,
        title,
        description,
        content: enhancedContent,
        area,
        section,
        contentType,
        metadata,
        filePath
      })

      // 5. Create navigation relationships
      await this.createNavigationRelationships(heraEntity.id, section, area)

      // 6. Log generation
      this.generationLog.push({
        timestamp: new Date().toISOString(),
        title,
        pageCode,
        area,
        section,
        contentType,
        filePath,
        entityId: heraEntity.id,
        source: 'ui_interface'
      })

      console.log(`✅ Generated documentation page: ${title}`)
      console.log(`📁 File: ${filePath}`)
      console.log(`🆔 Entity ID: ${heraEntity.id}`)
      console.log(`🌐 URL: /docs/${area === 'developer' ? 'dev' : area}/${pageCode}`)

      return {
        success: true,
        page: {
          id: heraEntity.id,
          title,
          description,
          code: pageCode,
          url: `/docs/${area === 'developer' ? 'dev' : area}/${pageCode}`,
          area,
          section,
          contentType,
          filePath,
          createdAt: new Date().toISOString()
        }
      }

    } catch (error) {
      console.error('❌ Error generating documentation:', error)
      throw error
    }
  }

  /**
   * Generate page code from title
   */
  generatePageCode(title) {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .replace(/\s+/g, '-')
      .slice(0, 50)
  }

  /**
   * Generate page structure with metadata
   */
  generatePageStructure({ title, description, content, area, section, contentType, metadata }) {
    const frontMatter = {
      title,
      description: description || `${contentType} documentation for ${title}`,
      area,
      section,
      contentType,
      generatedAt: new Date().toISOString(),
      autoGenerated: true,
      source: 'ui_interface',
      ...metadata
    }

    const yamlFrontMatter = Object.entries(frontMatter)
      .map(([key, value]) => `${key}: ${typeof value === 'string' ? `"${value}"` : value}`)
      .join('\n')

    return `---
${yamlFrontMatter}
---

# ${title}

${description ? `${description}\n\n` : ''}${this.addContentTypeTemplate(content, contentType)}`
  }

  /**
   * Add content type specific templates
   */
  addContentTypeTemplate(content, contentType) {
    const templates = {
      guide: (content) => `## Overview

${content}

## Prerequisites

- List prerequisites here

## Step-by-Step Instructions

${this.extractStepsFromContent(content)}

## Troubleshooting

Common issues and solutions will be added here.

## Next Steps

- Related documentation links
- Further reading suggestions`,

      reference: (content) => `## Reference

${content}

## API Methods

${this.extractAPIMethodsFromContent(content)}

## Examples

\`\`\`javascript
// Code examples will be added here
\`\`\`

## Parameters

| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| | | | |

## Response Format

\`\`\`json
{
  "example": "response"
}
\`\`\``,

      tutorial: (content) => `## Tutorial Overview

${content}

## What You'll Learn

- Key learning objectives

## Tutorial Steps

${this.extractTutorialStepsFromContent(content)}

## Practice Exercises

Hands-on exercises to reinforce learning.

## Summary

Review of what was covered in this tutorial.`,

      troubleshooting: (content) => `## Problem Description

${content}

## Common Causes

- List common causes here

## Solutions

### Solution 1
${this.extractSolutionsFromContent(content)}

## Prevention

Best practices to prevent this issue.

## Related Issues

Links to related troubleshooting guides.`
    }

    return templates[contentType] ? templates[contentType](content) : content
  }

  /**
   * Extract steps from content (simple implementation)
   */
  extractStepsFromContent(content) {
    const lines = content.split('\n')
    let steps = []
    let stepNumber = 1

    for (const line of lines) {
      if (line.includes('step') || line.match(/^\d+\./)) {
        steps.push(`### Step ${stepNumber}: ${line.replace(/^\d+\.?\s*/, '')}`)
        stepNumber++
      }
    }

    return steps.length > 0 ? steps.join('\n\n') : '1. First step\n2. Second step\n3. Third step'
  }

  /**
   * Extract API methods from content
   */
  extractAPIMethodsFromContent(content) {
    const apiMethods = []
    const lines = content.split('\n')

    for (const line of lines) {
      if (line.includes('GET ') || line.includes('POST ') || line.includes('PUT ') || line.includes('DELETE ')) {
        apiMethods.push(`### \`${line.trim()}\`\n\nDescription of this endpoint.\n`)
      }
    }

    return apiMethods.length > 0 ? apiMethods.join('\n') : '### `GET /api/example`\n\nAPI method descriptions will be added here.'
  }

  /**
   * Extract tutorial steps from content
   */
  extractTutorialStepsFromContent(content) {
    return this.extractStepsFromContent(content).replace(/Step (\d+):/g, '## Step $1:')
  }

  /**
   * Extract solutions from troubleshooting content
   */
  extractSolutionsFromContent(content) {
    const lines = content.split('\n')
    const solutions = []

    for (const line of lines) {
      if (line.toLowerCase().includes('solution') || line.toLowerCase().includes('fix')) {
        solutions.push(line)
      }
    }

    return solutions.length > 0 ? solutions.join('\n\n') : 'Detailed solution steps will be provided here.'
  }

  /**
   * Enhance content with AI improvements
   */
  async enhanceContentWithAI(content, contentType, area) {
    // This would integrate with an AI service
    // For now, we'll add basic enhancements

    const enhancements = {
      developer: {
        guide: 'Added technical implementation details and code examples',
        reference: 'Enhanced with comprehensive API documentation and examples',
        tutorial: 'Structured as hands-on learning experience with exercises',
        troubleshooting: 'Organized with systematic problem-solving approach'
      },
      user: {
        guide: 'Simplified language and added visual cues for better understanding',
        reference: 'Organized with clear sections and user-friendly explanations',
        tutorial: 'Step-by-step format with screenshots and checkpoints',
        troubleshooting: 'Common user scenarios with easy-to-follow solutions'
      },
      admin: {
        guide: 'Added security considerations and best practices',
        reference: 'Comprehensive configuration options and security settings',
        tutorial: 'Administrative procedures with permission requirements',
        troubleshooting: 'System-level diagnostics and resolution procedures'
      }
    }

    const enhancement = enhancements[area]?.[contentType] || 'Enhanced with AI improvements'
    
    return `${content}

<!-- AI Enhancement: ${enhancement} -->
<!-- Generated: ${new Date().toISOString()} -->
<!-- Content Type: ${contentType} -->
<!-- Area: ${area} -->`
  }

  /**
   * Create HERA documentation entity
   */
  async createHERADocumentationEntity(entityData) {
    try {
      const response = await fetch(`${this.apiBase}/api/v1/documentation/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(entityData)
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const result = await response.json()
      return result.page || { id: `entity-${Date.now()}` }

    } catch (error) {
      console.error('Error creating HERA entity:', error)
      // Return mock entity for development
      return {
        id: `entity-${Date.now()}`,
        created_at: new Date().toISOString()
      }
    }
  }

  /**
   * Create navigation relationships
   */
  async createNavigationRelationships(entityId, section, area) {
    try {
      // This would create relationships in the HERA database
      console.log(`🔗 Creating navigation relationships for ${entityId} in ${section} (${area})`)
      
      // Implementation would go here to:
      // 1. Find other pages in the same section
      // 2. Create appropriate navigation relationships
      // 3. Update existing navigation chains

    } catch (error) {
      console.error('Error creating navigation relationships:', error)
    }
  }

  /**
   * Batch generate multiple pages
   */
  async batchGenerate(submissions) {
    console.log(`🔄 Batch generating ${submissions.length} documentation pages...`)
    
    const results = []
    for (let i = 0; i < submissions.length; i++) {
      const submission = submissions[i]
      console.log(`📄 Processing ${i + 1}/${submissions.length}: ${submission.title}`)
      
      try {
        const result = await this.generateFromUISubmission(submission)
        results.push(result)
      } catch (error) {
        console.error(`❌ Failed to generate ${submission.title}:`, error)
        results.push({
          success: false,
          error: error.message,
          title: submission.title
        })
      }
    }

    const successful = results.filter(r => r.success).length
    const failed = results.filter(r => !r.success).length

    console.log(`\n📊 Batch Generation Summary:`)
    console.log(`✅ Successful: ${successful}`)
    console.log(`❌ Failed: ${failed}`)
    console.log(`📝 Total: ${results.length}`)

    return results
  }

  /**
   * Get generation statistics
   */
  getGenerationStats() {
    const stats = {
      total: this.generationLog.length,
      byArea: {},
      byContentType: {},
      bySection: {},
      recent: this.generationLog.slice(-10)
    }

    for (const entry of this.generationLog) {
      stats.byArea[entry.area] = (stats.byArea[entry.area] || 0) + 1
      stats.byContentType[entry.contentType] = (stats.byContentType[entry.contentType] || 0) + 1
      stats.bySection[entry.section] = (stats.bySection[entry.section] || 0) + 1
    }

    return stats
  }
}

// CLI usage
if (require.main === module) {
  const generator = new EnhancedDocGenerator()
  
  // Example usage - this would typically be called from the API
  const exampleSubmission = {
    area: 'developer',
    section: 'api',
    contentType: 'reference',
    title: 'Authentication API',
    description: 'Complete reference for authentication endpoints',
    content: `# Authentication API

This API provides authentication endpoints for the HERA platform.

## Endpoints

GET /api/auth/session - Get current session
POST /api/auth/login - User login
POST /api/auth/logout - User logout
POST /api/auth/register - User registration

## Examples

Login example:
POST /api/auth/login
{
  "email": "user@example.com", 
  "password": "password"
}`,
    metadata: {
      priority: 'high',
      tags: ['authentication', 'api', 'security']
    }
  }

  generator.generateFromUISubmission(exampleSubmission)
    .then(result => {
      console.log('✅ Generation completed:', result)
    })
    .catch(error => {
      console.error('❌ Generation failed:', error)
      process.exit(1)
    })
}

module.exports = EnhancedDocGenerator